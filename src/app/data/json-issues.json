[
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4478",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4478/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4478/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4478/events",
    "html_url": "https://github.com/nlohmann/json/issues/4478",
    "id": 2596955056,
    "node_id": "I_kwDOAKp23M6aymOw",
    "number": 4478,
    "title": "Latest tag not available on NuGet",
    "user": {
      "login": "pavelschon",
      "id": 14923302,
      "node_id": "MDQ6VXNlcjE0OTIzMzAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14923302?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pavelschon",
      "html_url": "https://github.com/pavelschon",
      "followers_url": "https://api.github.com/users/pavelschon/followers",
      "following_url": "https://api.github.com/users/pavelschon/following{/other_user}",
      "gists_url": "https://api.github.com/users/pavelschon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pavelschon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pavelschon/subscriptions",
      "organizations_url": "https://api.github.com/users/pavelschon/orgs",
      "repos_url": "https://api.github.com/users/pavelschon/repos",
      "events_url": "https://api.github.com/users/pavelschon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pavelschon/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-10-18T09:19:11Z",
    "updated_at": "2024-10-18T14:31:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nThe most recent version (3.11.3) of the library is not available on NuGet, where only 3.11.2 is available.\r\n\r\nhttps://www.nuget.org/packages/nlohmann.json\r\n\n\n### Reproduction steps\n\n-\n\n### Expected vs. actual results\n\n-\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nWindows\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4478/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4475",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4475/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4475/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4475/events",
    "html_url": "https://github.com/nlohmann/json/issues/4475",
    "id": 2581488794,
    "node_id": "I_kwDOAKp23M6Z3mSa",
    "number": 4475,
    "title": "Invalid union access for get_ref/get_ptr with unsigned integer",
    "user": {
      "login": "cschreib-ibex",
      "id": 54102755,
      "node_id": "MDQ6VXNlcjU0MTAyNzU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/54102755?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cschreib-ibex",
      "html_url": "https://github.com/cschreib-ibex",
      "followers_url": "https://api.github.com/users/cschreib-ibex/followers",
      "following_url": "https://api.github.com/users/cschreib-ibex/following{/other_user}",
      "gists_url": "https://api.github.com/users/cschreib-ibex/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cschreib-ibex/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cschreib-ibex/subscriptions",
      "organizations_url": "https://api.github.com/users/cschreib-ibex/orgs",
      "repos_url": "https://api.github.com/users/cschreib-ibex/repos",
      "events_url": "https://api.github.com/users/cschreib-ibex/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cschreib-ibex/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-10-11T14:14:27Z",
    "updated_at": "2024-10-11T14:15:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nWhen a JSON value is stored as unsigned integer, it is possible to call `get_ref<number_integer_t>()` or `get_ptr<number_integer_t>()` without error, which accesses the *signed* integer member of the internal union instead of the *unsigned* member. This is undefined behaviour in C++ standard and should not be allowed (especially since trying access with other more clearly incompatible types, such as strings, is already checked and reported as an error).\r\n\r\nI note that a corresponding unit test exists but has been commented out: https://github.com/nlohmann/json/blob/63258397761b3dd96dd171e5a5ad5aa915834c35/tests/src/unit-reference_access.cpp#L218-L219\r\n\r\nThe root of the problem is that `is_number_integer()` returns `true` for both signed and unsigned integer storage, yet is used to guard reference/pointer access using signed integers: https://github.com/nlohmann/json/blob/63258397761b3dd96dd171e5a5ad5aa915834c35/include/nlohmann/json.hpp#L1464-L1467\r\n\r\nI also note [the docs](https://json.nlohmann.me/api/basic_json/get_ref/#notes) say that \"Writing data to the referee of the result yields an undefined state.\", which isn't very clear. Does this mean we are not supposed to write a value to the object pointed to by the reference/pointer? The earlier wording (changed in https://github.com/nlohmann/json/commit/4e52277b70999ccf8858c7995dd72808a7e82c33#diff-b56a00981d8f3b87e3ce49a7eb27d36f4586d9c54c3fb628a88cfc000aa5fed4L2632) was \"The pointer becomes invalid if the underlying JSON object changes.\", which made more sense.\r\n\r\n### Reproduction steps\r\n\r\nSee code example below.\r\n\r\n### Expected vs. actual results\r\n\r\nExpected: type error exception.\r\nActual: no error, unsigned data is access as signed data (undefined behaviour).\r\n\r\n### Minimal code example\r\n\r\n```c++\r\n#include <nlohmann/json.hpp>\r\n#include <iostream>\r\n\r\nint main() {\r\n    using namespace nlohmann;\r\n\r\n    json j = json::number_unsigned_t{1u};\r\n    assert(j.is_number_unsigned());\r\n\r\n    j.get_ref<json::number_integer_t&>() = -1;\r\n    assert(j.is_number_unsigned());\r\n    \r\n    std::cout << j.get<json::number_unsigned_t>() << std::endl;\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nNone.\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nLinux x64, gcc 11\r\n\r\n### Library version\r\n\r\n3.11.3\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4475/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4475/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4463",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4463/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4463/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4463/events",
    "html_url": "https://github.com/nlohmann/json/issues/4463",
    "id": 2533498289,
    "node_id": "I_kwDOAKp23M6XAh2x",
    "number": 4463,
    "title": "Compiler error when using macro NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE",
    "user": {
      "login": "ramitrathore",
      "id": 17800500,
      "node_id": "MDQ6VXNlcjE3ODAwNTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/17800500?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ramitrathore",
      "html_url": "https://github.com/ramitrathore",
      "followers_url": "https://api.github.com/users/ramitrathore/followers",
      "following_url": "https://api.github.com/users/ramitrathore/following{/other_user}",
      "gists_url": "https://api.github.com/users/ramitrathore/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ramitrathore/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ramitrathore/subscriptions",
      "organizations_url": "https://api.github.com/users/ramitrathore/orgs",
      "repos_url": "https://api.github.com/users/ramitrathore/repos",
      "events_url": "https://api.github.com/users/ramitrathore/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ramitrathore/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374234,
        "node_id": "MDU6TGFiZWw0NjM3NDIzNA==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid",
        "name": "solution: invalid",
        "color": "e6e6e6",
        "default": false,
        "description": "the issue is not related to the library"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-09-18T11:40:18Z",
    "updated_at": "2024-09-18T12:01:30Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nstruct Contain\r\n{\r\n\tContain() = delete; //Enable the default constructor to make it work\r\n  explicit Contain(std::string contain) : m_Contain(std::move(contain)){}\r\n\tstd::string m_Contain;\r\n};\r\n\r\nNLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Contain, m_Contain);\r\n\r\nstruct Container\r\n{\r\n\tstd::string m_Name;\r\n\tstd::vector<Contain> m_Collection;\r\n};\r\n\r\nNLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Container, m_Name, m_Collection); //Compiler error\n\n### Reproduction steps\n\nCompiler error - can be easily reproduce since I have added snippet code\n\n### Expected vs. actual results\n\nCompiler error\n\n### Minimal code example\n\n```Shell\nstruct Contain\r\n{\r\n\tContain() = delete; //Enable the default constructor to make it work\r\n  explicit Contain(std::string contain) : m_Contain(std::move(contain)){}\r\n\tstd::string m_Contain;\r\n};\r\n\r\nNLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Contain, m_Contain);\r\n\r\nstruct Container\r\n{\r\n\tstd::string m_Name;\r\n\tstd::vector<Contain> m_Collection;\r\n};\r\n\r\nNLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Container, m_Name, m_Collection); //Compiler error\n```\n\n\n### Error messages\n\n```Shell\nCompiler error\n```\n\n\n### Compiler and operating system\n\nWindows 10\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4463/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4463/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4462",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4462/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4462/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4462/events",
    "html_url": "https://github.com/nlohmann/json/issues/4462",
    "id": 2533014753,
    "node_id": "I_kwDOAKp23M6W-rzh",
    "number": 4462,
    "title": "Issue when dumping a vector of derived classes",
    "user": {
      "login": "myermo",
      "id": 93035284,
      "node_id": "U_kgDOBYubFA",
      "avatar_url": "https://avatars.githubusercontent.com/u/93035284?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/myermo",
      "html_url": "https://github.com/myermo",
      "followers_url": "https://api.github.com/users/myermo/followers",
      "following_url": "https://api.github.com/users/myermo/following{/other_user}",
      "gists_url": "https://api.github.com/users/myermo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/myermo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/myermo/subscriptions",
      "organizations_url": "https://api.github.com/users/myermo/orgs",
      "repos_url": "https://api.github.com/users/myermo/repos",
      "events_url": "https://api.github.com/users/myermo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/myermo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374234,
        "node_id": "MDU6TGFiZWw0NjM3NDIzNA==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid",
        "name": "solution: invalid",
        "color": "e6e6e6",
        "default": false,
        "description": "the issue is not related to the library"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2024-09-18T08:01:46Z",
    "updated_at": "2024-09-18T13:52:10Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI need to serialize a vector composed by derived classes. I have a `Container` class which holds two variables, one of them being a `std::vector<Base>`. When dumping the contents of the vector, only the members of the `Base` class are detected, and the members of the Derived classes are omitted.\n\n### Reproduction steps\n\nJust execute the example provided.\r\n\r\nhttps://godbolt.org/z/KbxKs688Y\n\n### Expected vs. actual results\n\n**Actual Result**\r\n`{\r\n    \"Container\": {\r\n        \"a\": 2,\r\n        \"data\": [\r\n            {\r\n                \"b\": 3\r\n            },\r\n            {\r\n                \"b\": 5\r\n            }\r\n        ]\r\n    }\r\n}`\r\n\r\n**Expected Result**\r\n`{\r\n    \"Container\": {\r\n        \"a\": 2,\r\n        \"data\": [\r\n            {\r\n                \"b\": 3,\r\n                \"d\": 4\r\n            },\r\n            {\r\n                \"b\": 5,\r\n                \"d\": 6\r\n            }\r\n        ]\r\n    }\r\n}`\n\n### Minimal code example\n\n```Shell\n#include <iostream>\r\n#include \"nlohmann/json.hpp\"\r\n\r\nusing json = nlohmann::ordered_json;\r\n\r\n// Minimum example of the bug\r\nstruct Base\r\n{\r\n  int b{};\r\n\r\n  Base(int b) : b(b) {};\r\n};\r\n\r\nstruct Derived : public Base\r\n{\r\n  int d{};\r\n\r\n  Derived(int b, int d) : Base(b), d(d) {};\r\n};\r\n\r\nstruct Container\r\n{\r\n  int a{};\r\n  std::vector<std::shared_ptr<Base>> v{};\r\n\r\n  Container(int a, std::vector<std::shared_ptr<Base>> v) : a(a), v(v) {};\r\n};\r\n\r\nvoid to_json(json& j, const std::shared_ptr<Base>& b)\r\n{\r\n  j = json{{\"b\", b->b}};\r\n}\r\n\r\nvoid to_json(json& j, const std::shared_ptr<Derived>& d)\r\n{\r\n  j = json{{\"b\", d->b}};\r\n  j.update(\"d\", d->d);\r\n}\r\n\r\nvoid to_json(json& j, const std::shared_ptr<Container>& c)\r\n{\r\n  j = json{ { \"a\", c->a } , { \"data\", c->v } };\r\n}\r\n\r\nvoid createOutputJson()\r\n{\r\n  json j;\r\n\r\n  auto d1 = std::make_shared<Derived>(3, 4);\r\n  auto d2 = std::make_shared<Derived>(5, 6);\r\n\r\n  std::vector<std::shared_ptr<Base>> v2 = {d1, d2};\r\n\r\n  auto C = std::make_shared<Container>(2, v2);\r\n\r\n  j[\"Container\"] = C;\r\n\r\n  std::cout << j.dump(4) << std::endl;\r\n}\r\n\r\nint main() {\r\n    createOutputJson();\r\n}\r\n```\n```\n\n\n### Error messages\n\n```Shell\nN/A\n```\n\n\n### Compiler and operating system\n\nArch Linux, GCC 14.2.1 and CLANG 19.1.0\n\n### Library version\n\nb36f4c47\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4462/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4462/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4460",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4460/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4460/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4460/events",
    "html_url": "https://github.com/nlohmann/json/issues/4460",
    "id": 2532939179,
    "node_id": "I_kwDOAKp23M6W-ZWr",
    "number": 4460,
    "title": "whit std::wstring compile error",
    "user": {
      "login": "aSurgingRiver",
      "id": 93660218,
      "node_id": "U_kgDOBZUkOg",
      "avatar_url": "https://avatars.githubusercontent.com/u/93660218?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aSurgingRiver",
      "html_url": "https://github.com/aSurgingRiver",
      "followers_url": "https://api.github.com/users/aSurgingRiver/followers",
      "following_url": "https://api.github.com/users/aSurgingRiver/following{/other_user}",
      "gists_url": "https://api.github.com/users/aSurgingRiver/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aSurgingRiver/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aSurgingRiver/subscriptions",
      "organizations_url": "https://api.github.com/users/aSurgingRiver/orgs",
      "repos_url": "https://api.github.com/users/aSurgingRiver/repos",
      "events_url": "https://api.github.com/users/aSurgingRiver/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aSurgingRiver/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-09-18T07:24:33Z",
    "updated_at": "2024-10-13T12:26:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\n\r\nAn error occurs when using wstring to instantiate basic_json.\r\n\r\nusing wjson = basic_json<std::map, std::vector, std::wstring>;\r\n\r\nModify the json_value function in the json.hpp file.\r\nChange string = create<string_t>(\"\");\r\nto string = create<string_t>();\r\nCompile\r\n\r\n![image](https://github.com/user-attachments/assets/ee024b4e-88e6-4285-beb3-cdb5e9727268)\r\n\n\n### Reproduction steps\n\n![image](https://github.com/user-attachments/assets/ec58fd43-581f-4b58-a646-115f0ee94e91)\r\n\n\n### Expected vs. actual results\n\n![image](https://github.com/user-attachments/assets/c0706112-546c-4f21-b67c-7cef3d39a6f1)\r\n\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nWin64\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4460/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4458",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4458/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4458/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4458/events",
    "html_url": "https://github.com/nlohmann/json/issues/4458",
    "id": 2524692292,
    "node_id": "I_kwDOAKp23M6We79E",
    "number": 4458,
    "title": "Inconsisten operator[]",
    "user": {
      "login": "fekir",
      "id": 11912465,
      "node_id": "MDQ6VXNlcjExOTEyNDY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/11912465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fekir",
      "html_url": "https://github.com/fekir",
      "followers_url": "https://api.github.com/users/fekir/followers",
      "following_url": "https://api.github.com/users/fekir/following{/other_user}",
      "gists_url": "https://api.github.com/users/fekir/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fekir/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fekir/subscriptions",
      "organizations_url": "https://api.github.com/users/fekir/orgs",
      "repos_url": "https://api.github.com/users/fekir/repos",
      "events_url": "https://api.github.com/users/fekir/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fekir/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 46374236,
        "node_id": "MDU6TGFiZWw0NjM3NDIzNg==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20wontfix",
        "name": "solution: wontfix",
        "color": "000000",
        "default": false,
        "description": "the issue will not be fixed (either it is impossible or deemed out of scope)"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-09-13T12:13:37Z",
    "updated_at": "2024-09-13T15:14:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nOperator [] behaves inconsistentnly, depending if the `const` overloads is picked or not\r\n\r\nIt should be considered a bug because const/mutable overloads (especially for `operator[]`) changing the meaning of code is problematic.\r\n\r\nAs examples:\r\n * std::vector, array, std::array have overloads for operator[] that behaves the same for const and mutable; in all variants, access to the underlying object is provided (otherwise UB). member function at, which acts like a checked operator[] throws if there is no object.\r\n * std::map has mutable operator[], but no const operator[]. While it is not nice, at least it causes an inconsistency at compile-time, and not runtime\r\n\r\n\r\n\r\n### Reproduction steps\r\n\r\n~~~~\r\nvoid foo(nlohmann::json& j){\r\n  const auto& subobject = j[\"example\"]; // does not throw\r\n}\r\n~~~~\r\nvs\r\n~~~~\r\nvoid foo(const nlohmann::json& j){\r\n  const auto& subobject = j[\"example\"]; // throws if \"example\" not present\r\n}\r\n~~~~\r\n\r\n### Expected vs. actual results\r\n\r\nExpected result would that either both variants throw if the object does not exist or none throws.\r\n\r\nSince the  pattern\r\n\r\n~~~~\r\nnlohmann::json j = nlohmann::json::object();\r\nj[\"example\"] = ...;\r\n~~~~\r\n\r\nis common, it would be problematic for operator[] to throw if someone want to add an object.\r\n\r\nThus the most sensible approach would be to have operator[] not throwing in both cases.\r\n\r\nCurrently I'm using\r\n\r\n~~~~\r\nconst auto& j = json.contains( \"example\" ) ? json[\"example\"] : nlohmann::json::object();\r\n~~~~\r\n\r\nas workaround, this snippet behaves consistently with const and mutable objects.\r\nThe main drawbacks are \r\n\r\n * needs to remember to use this pattern (with ternary operator in order to take advantage of lifetime extension to avoid copies from operator[])\r\n * duplicate the objects it want to search (once for contains, and once for operator[])\r\n * create a local nlohmann::json::object()\r\n\r\n\r\nThis pattern could be integrate in the const version of operator[].\r\nIf the library defines a global const nlohmann::json::object(), then operator[] (const overload) could return the value in the object, or, if nothing found, the global object.\r\nSince it is constant, it should not be problematic that different json objects return a reference to the same object.\r\n\r\nWith this change, operator[] would provide a more consistent behavior.\r\n\r\n~~~~\r\nnlohmann::json j = nlohmann::json::object();\r\nj[\"example\"];\r\n~~~~\r\n\r\n`j[\"example\"]` returns an empty object for both the mutable and const overload.\r\n\r\n`j[\"example\"] = ...` compiles only for a mutable object (like currently)\r\n\r\nThe end-user of the library cannot distinguish (unless it compares the addresses) if the object already exists, has been created new, or is the global empty object.\r\n\r\n\r\n\r\n### Minimal code example\r\n\r\n\r\n~~~~\r\n// https://godbolt.org/z/cM8cdeGsq\r\n#include \"nlohmann/json.hpp\"\r\n\r\nint main(){\r\n    {\r\n        nlohmann::json j = nlohmann::json::object();\r\n        j[\"example\"]; // does not throw\r\n    }\r\n    {\r\n        const nlohmann::json j = nlohmann::json::object();\r\n        j[\"example\"]; // throws\r\n    }\r\n}\r\n~~~~\r\n\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\ngcc14.2 on linux and other systems\r\n\r\n### Library version\r\n\r\ntrunk, 3.11.1\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4458/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4453",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4453/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4453/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4453/events",
    "html_url": "https://github.com/nlohmann/json/issues/4453",
    "id": 2514896489,
    "node_id": "I_kwDOAKp23M6V5kZp",
    "number": 4453,
    "title": "json_pointer - a code example from doc's does not compile",
    "user": {
      "login": "jrockinl",
      "id": 44481899,
      "node_id": "MDQ6VXNlcjQ0NDgxODk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44481899?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jrockinl",
      "html_url": "https://github.com/jrockinl",
      "followers_url": "https://api.github.com/users/jrockinl/followers",
      "following_url": "https://api.github.com/users/jrockinl/following{/other_user}",
      "gists_url": "https://api.github.com/users/jrockinl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jrockinl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jrockinl/subscriptions",
      "organizations_url": "https://api.github.com/users/jrockinl/orgs",
      "repos_url": "https://api.github.com/users/jrockinl/repos",
      "events_url": "https://api.github.com/users/jrockinl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jrockinl/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-09-09T20:51:48Z",
    "updated_at": "2024-09-26T00:23:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nGnu C++ does not compile the code example below.  GCC 11.4.0, with -std=c++11 option  \r\n Example taken from https://json.nlohmann.me/features/json_pointer/#introduction\r\n`json::json_pointer p = \"/nested/one\";`\r\n\r\nmain.cpp code found in \"Minimal code example\" field.\r\n\r\nThe _json_pointer literal is the only line that compiles correctly.  \r\n\r\nnote: Clang compiler (clang++ v14.0.0) basically reports the same errors.\n\n### Reproduction steps\n\ng++ main.cpp --std=c++11\r\n\n\n### Expected vs. actual results\n\nJSON Pointer creation¶\r\nJSON Pointers can be created from a string:\r\n`json::json_pointer p = \"/nested/one\";`\n\n### Minimal code example\n\n```Shell\n#include <string>\r\n#include \"json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n    std::string ptrStr = \"/nested\";\r\n    ptrStr += \"/one\";\r\n\r\n    json::json_pointer ptr1 = \"/nested/one\";\r\n    auto               ptr2 = \"/nested/one\"_json_pointer;\r\n    json::json_pointer ptr3 = ptrStr;\r\n}\n```\n\n\n### Error messages\n\n```Shell\nGNU:\r\nmain.cpp: In function ‘int main()’:\r\nmain.cpp:11:31: error: conversion from ‘const char [12]’ to non-scalar type ‘nlohmann::json_abi_v3_11_3::basic_json<>::json_pointer’ {aka ‘nlohmann::json_abi_v3_11_3::json_pointer<std::__cxx11::basic_string<char> >’} requested\r\n   11 |     json::json_pointer ptr1 = \"/nested/one\";\r\n      |                               ^~~~~~~~~~~~~\r\nmain.cpp:13:31: error: conversion from ‘std::string’ {aka ‘std::__cxx11::basic_string<char>’} to non-scalar type ‘nlohmann::json_abi_v3_11_3::basic_json<>::json_pointer’ {aka ‘nlohmann::json_abi_v3_11_3::json_pointer<std::__cxx11::basic_string<char> >’} requested\r\n   13 |     json::json_pointer ptr3 = ptrStr;\r\n      |                               ^~~~~~\r\n\r\n\r\nClang:\r\nmain.cpp:11:24: error: no viable conversion from 'const char[12]' to 'json::json_pointer' (aka 'json_pointer<std::basic_string<char>>')\r\n    json::json_pointer ptr1 = \"/nested/one\";\r\n                       ^      ~~~~~~~~~~~~~\r\n./json.hpp:13841:7: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'const char[12]' to 'const nlohmann::json_pointer<std::basic_string<char>> &' for 1st argument\r\nclass json_pointer\r\n      ^\r\n./json.hpp:13841:7: note: candidate constructor (the implicit move constructor) not viable: no known conversion from 'const char[12]' to 'nlohmann::json_pointer<std::basic_string<char>> &&' for 1st argument\r\n./json.hpp:13868:14: note: explicit constructor is not a candidate\r\n    explicit json_pointer(const string_t& s = \"\")\r\n             ^\r\nmain.cpp:13:24: error: no viable conversion from 'std::string' (aka 'basic_string<char>') to 'json::json_pointer' (aka 'json_pointer<std::basic_string<char>>')\r\n    json::json_pointer ptr3 = ptrStr;\r\n                       ^      ~~~~~~\r\n./json.hpp:13841:7: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'std::string' (aka 'basic_string<char>') to 'const nlohmann::json_pointer<std::basic_string<char>> &' for 1st argument\r\nclass json_pointer\r\n      ^\r\n./json.hpp:13841:7: note: candidate constructor (the implicit move constructor) not viable: no known conversion from 'std::string' (aka 'basic_string<char>') to 'nlohmann::json_pointer<std::basic_string<char>> &&' for 1st argument\r\n./json.hpp:13868:14: note: explicit constructor is not a candidate\r\n    explicit json_pointer(const string_t& s = \"\")\r\n             ^\r\n2 errors generated.\n```\n\n\n### Compiler and operating system\n\nUbuntu 22.04\n\n### Library version\n\n3.11.1 and 3.11.3\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4453/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4450",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4450/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4450/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4450/events",
    "html_url": "https://github.com/nlohmann/json/issues/4450",
    "id": 2507070833,
    "node_id": "I_kwDOAKp23M6Vbt1x",
    "number": 4450,
    "title": "[bug] nlohmann::json constructor behaves improperly",
    "user": {
      "login": "cw118876",
      "id": 38389588,
      "node_id": "MDQ6VXNlcjM4Mzg5NTg4",
      "avatar_url": "https://avatars.githubusercontent.com/u/38389588?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cw118876",
      "html_url": "https://github.com/cw118876",
      "followers_url": "https://api.github.com/users/cw118876/followers",
      "following_url": "https://api.github.com/users/cw118876/following{/other_user}",
      "gists_url": "https://api.github.com/users/cw118876/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cw118876/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cw118876/subscriptions",
      "organizations_url": "https://api.github.com/users/cw118876/orgs",
      "repos_url": "https://api.github.com/users/cw118876/repos",
      "events_url": "https://api.github.com/users/cw118876/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cw118876/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-09-05T08:00:48Z",
    "updated_at": "2024-09-05T08:00:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\n\"Direct initialization with an rvalue works fine, but adding another constructor causes all key-value pairs to be represented as a single value with the key '0'.  This may cause problems in template programming.\n\n### Reproduction steps\n\ncompile the code snipper, then execute it.\n\n### Expected vs. actual results\n\n```\r\ndirect version\r\nid : \"a\"\r\nmessage : \"a\"\r\nrec : \"b\"\r\naddition constructor version\r\n0 : {\"id\":\"a\",\"message\":\"a\",\"rec\":\"b\"}\r\n```\r\n\"Direct initialization with an rvalue works fine, but adding another constructor causes all key-value pairs to be represented as a single value with the key '0'.  This may cause problems in template programming.\n\n### Minimal code example\n\n```Shell\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\nusing json = nlohmann::json;\r\n\r\nvoid dump(const json& data) {\r\n  for (auto& [key, value] : data.items()) {\r\n    std::cout << key << \" : \" << value << \"\\n\";\r\n  }\r\n}\r\n\r\nint main() {\r\n  // Malformed JSON data as a std::string\r\n  std::string json_string = R\"({\"id\": \"a\" , \"rec\" : \"b\" , \"message\" : \"a\"})\";\r\n  auto g = [&] { return nlohmann::json::parse(json_string); };\r\n  std::cout << \"direct version\\n\";\r\n\r\n  auto g3 = g();\r\n  dump(g3);\r\n\r\n  std::cout << \"addition constructor version\\n\";\r\n\r\n  auto g4 = json{g()};\r\n  dump(g4);\r\n\r\n  return 0;\r\n}\n```\n\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\ngcc (Debian 12.2.0-14) 12.2.0  on Debian 12 using conan + cmake\n\n### Library version\n\nnlohmann_json/3.11.3\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4450/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4440",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4440/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4440/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4440/events",
    "html_url": "https://github.com/nlohmann/json/issues/4440",
    "id": 2483490102,
    "node_id": "I_kwDOAKp23M6UBw02",
    "number": 4440,
    "title": "Assert when using std::views::filter and GCC 10",
    "user": {
      "login": "gwjo",
      "id": 403193,
      "node_id": "MDQ6VXNlcjQwMzE5Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/403193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gwjo",
      "html_url": "https://github.com/gwjo",
      "followers_url": "https://api.github.com/users/gwjo/followers",
      "following_url": "https://api.github.com/users/gwjo/following{/other_user}",
      "gists_url": "https://api.github.com/users/gwjo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gwjo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gwjo/subscriptions",
      "organizations_url": "https://api.github.com/users/gwjo/orgs",
      "repos_url": "https://api.github.com/users/gwjo/repos",
      "events_url": "https://api.github.com/users/gwjo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gwjo/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-08-23T16:35:57Z",
    "updated_at": "2024-08-23T16:36:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nAfter upgrading from `3.9.1` to `3.11.3` the code asserts when iterating over a json array that's been filtered using `std::views::filter` due to an uninitialized iterator.\r\n\r\nIn addition to my failure with 3.11.3 and GCC 10.2, I checked other combinations on Godbolt and observed the following (❌ represents the assert is seen)\r\n\r\n|                 | GCC 10.2 | GCC 10.5 | GCC 11.1 | GCC trunk | Clang 16 |\r\n| --------------- | -------- | -------- | -------- | --------- | -------- |\r\n| 3.9.1           | ✅ | ✅ | ✅ | ✅ | ✅ |\r\n| 3.10.5          |  ✅ | ✅ | ✅ | ✅ | ✅ |\r\n| 3.11.1          | ❌ |  ❌ |  ❌ |  ✅ | ✅ |\r\n| trunk           | ❌ |  ❌ |  ❌ |  ✅ | ✅ |\r\n\r\n\r\n### Reproduction steps\r\n\r\nhttps://godbolt.org/z/WbexYTqnf\r\n\r\n### Expected vs. actual results\r\n\r\n`std::views::filter` should allow you to filter a json array.\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\n#include <nlohmann/json.hpp>\r\n#include <iostream>\r\n#include <ranges>\r\n\r\nusing nlohmann::json;\r\n\r\nint main()\r\n{\r\n    auto noOpFilter = std::views::filter([](auto&&){ return true; });\r\n    json j = {1, 2, 3};\r\n    auto filtered = j | noOpFilter;\r\n    std::cout << *filtered.begin() << std::endl;\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\noutput.s: /opt/compiler-explorer/libs/nlohmann_json/trunk/single_include/nlohmann/json.hpp:13346: bool nlohmann::json_abi_v3_11_3::detail::iter_impl<BasicJsonType>::operator==(const IterImpl&) const [with IterImpl = nlohmann::json_abi_v3_11_3::detail::iter_impl<nlohmann::json_abi_v3_11_3::basic_json<> >; typename std::enable_if<(std::is_same<IterImpl, nlohmann::json_abi_v3_11_3::detail::iter_impl<BasicJsonType> >::value || std::is_same<IterImpl, nlohmann::json_abi_v3_11_3::detail::iter_impl<typename std::conditional<std::is_const<_Tp>::value, typename std::remove_const<_Tp>::type, const BasicJsonType>::type> >::value), std::nullptr_t>::type <anonymous> = nullptr; BasicJsonType = nlohmann::json_abi_v3_11_3::basic_json<>]: Assertion `m_object != nullptr' failed.\r\nProgram terminated with signal: SIGSEGV\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nGCC 10.2\r\n\r\n### Library version\r\n\r\n3.11.3\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4440/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4430",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4430/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4430/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4430/events",
    "html_url": "https://github.com/nlohmann/json/issues/4430",
    "id": 2439325889,
    "node_id": "I_kwDOAKp23M6RZSjB",
    "number": 4430,
    "title": "Coverity issues with Coverity 2024.6.0",
    "user": {
      "login": "alainsanguinetti",
      "id": 6588318,
      "node_id": "MDQ6VXNlcjY1ODgzMTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6588318?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alainsanguinetti",
      "html_url": "https://github.com/alainsanguinetti",
      "followers_url": "https://api.github.com/users/alainsanguinetti/followers",
      "following_url": "https://api.github.com/users/alainsanguinetti/following{/other_user}",
      "gists_url": "https://api.github.com/users/alainsanguinetti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alainsanguinetti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alainsanguinetti/subscriptions",
      "organizations_url": "https://api.github.com/users/alainsanguinetti/orgs",
      "repos_url": "https://api.github.com/users/alainsanguinetti/repos",
      "events_url": "https://api.github.com/users/alainsanguinetti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alainsanguinetti/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-07-31T07:20:24Z",
    "updated_at": "2024-07-31T07:20:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nHi,\r\n\r\nI am using the library at a place where Coverity scans the source code.\r\n\r\nRecently the scanner was upgraded to 2024.6.0\r\n\r\nSome new issues are popping up:\r\n\r\nFor example:\r\n\r\n![image](https://github.com/user-attachments/assets/1b4df1c9-1090-4683-a1fc-f67615574811)\r\n\r\nThere are around 17 reported issues as far as I can see. I can add the full list in the ticket if interested.\r\n\r\nThanks for this amazing library in any case!\r\n\n\n### Reproduction steps\n\nRun Coverity 2024.6.0 on json.hpp\n\n### Expected vs. actual results\n\nExpect: no errors\r\nResults: some errors are reported\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nLinux/ unknown\n\n### Library version\n\n960b763ecd144f156d05ec61f577b04107290137\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4430/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4430/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4399",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4399/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4399/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4399/events",
    "html_url": "https://github.com/nlohmann/json/issues/4399",
    "id": 2357099227,
    "node_id": "I_kwDOAKp23M6Mfnrb",
    "number": 4399,
    "title": "Unable to parse JSON string from snake case to camel case",
    "user": {
      "login": "daleeg",
      "id": 12060716,
      "node_id": "MDQ6VXNlcjEyMDYwNzE2",
      "avatar_url": "https://avatars.githubusercontent.com/u/12060716?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/daleeg",
      "html_url": "https://github.com/daleeg",
      "followers_url": "https://api.github.com/users/daleeg/followers",
      "following_url": "https://api.github.com/users/daleeg/following{/other_user}",
      "gists_url": "https://api.github.com/users/daleeg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/daleeg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/daleeg/subscriptions",
      "organizations_url": "https://api.github.com/users/daleeg/orgs",
      "repos_url": "https://api.github.com/users/daleeg/repos",
      "events_url": "https://api.github.com/users/daleeg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/daleeg/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-06-17T11:25:08Z",
    "updated_at": "2024-07-15T06:48:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nAs titled\r\n\r\n### Reproduction steps\r\n\r\nAs titled\r\n\r\n### Expected vs. actual results\r\n```Shell\r\nclass Test {\r\n    std::string nlohmannJson;\r\n    NLOHMANN_MAP_DEFINE_TYPE_INTRUSIVE(Test, nlohmannJson, nlohmann_json);\r\n};\r\n\r\nstd::string jStr = R\"({\"nlohmann_json\": \"test\"})\";\r\nTestJson r = nlohmann::json::parse(jStr);\r\nGTEST_ASSERT_EQ(r.nlohmannJson, \"test\");\r\n\r\n```\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\n#define NLOHMANN_MAP_JSON_TO(v1, v2) nlohmann_json_j[#v2] = nlohmann_json_t.v1;\r\n#define NLOHMANN_MAP_JSON_FROM(v1, v2) nlohmann_json_j.at(#v2).get_to(nlohmann_json_t.v1);\r\n#define NLOHMANN_MAP_JSON_FROM_WITH_DEFAULT(v1, v2) nlohmann_json_t.v1 = nlohmann_json_j.value(#v2, nlohmann_json_default_obj.v1);\r\n\r\n#define NLOHMANN_MAP_JSON_PASTE(...) NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_GET_MACRO(__VA_ARGS__, \\\r\n        NLOHMANN_MAP_JSON_PASTE64, \\\r\n        NLOHMANN_MAP_JSON_PASTE63, \\\r\n        NLOHMANN_MAP_JSON_PASTE62, \\\r\n        NLOHMANN_MAP_JSON_PASTE61, \\\r\n        NLOHMANN_MAP_JSON_PASTE60, \\\r\n        NLOHMANN_MAP_JSON_PASTE59, \\\r\n        NLOHMANN_MAP_JSON_PASTE58, \\\r\n        NLOHMANN_MAP_JSON_PASTE57, \\\r\n        NLOHMANN_MAP_JSON_PASTE56, \\\r\n        NLOHMANN_MAP_JSON_PASTE55, \\\r\n        NLOHMANN_MAP_JSON_PASTE54, \\\r\n        NLOHMANN_MAP_JSON_PASTE53, \\\r\n        NLOHMANN_MAP_JSON_PASTE52, \\\r\n        NLOHMANN_MAP_JSON_PASTE51, \\\r\n        NLOHMANN_MAP_JSON_PASTE50, \\\r\n        NLOHMANN_MAP_JSON_PASTE49, \\\r\n        NLOHMANN_MAP_JSON_PASTE48, \\\r\n        NLOHMANN_MAP_JSON_PASTE47, \\\r\n        NLOHMANN_MAP_JSON_PASTE46, \\\r\n        NLOHMANN_MAP_JSON_PASTE45, \\\r\n        NLOHMANN_MAP_JSON_PASTE44, \\\r\n        NLOHMANN_MAP_JSON_PASTE43, \\\r\n        NLOHMANN_MAP_JSON_PASTE42, \\\r\n        NLOHMANN_MAP_JSON_PASTE41, \\\r\n        NLOHMANN_MAP_JSON_PASTE40, \\\r\n        NLOHMANN_MAP_JSON_PASTE39, \\\r\n        NLOHMANN_MAP_JSON_PASTE38, \\\r\n        NLOHMANN_MAP_JSON_PASTE37, \\\r\n        NLOHMANN_MAP_JSON_PASTE36, \\\r\n        NLOHMANN_MAP_JSON_PASTE35, \\\r\n        NLOHMANN_MAP_JSON_PASTE34, \\\r\n        NLOHMANN_MAP_JSON_PASTE33, \\\r\n        NLOHMANN_MAP_JSON_PASTE32, \\\r\n        NLOHMANN_MAP_JSON_PASTE31, \\\r\n        NLOHMANN_MAP_JSON_PASTE30, \\\r\n        NLOHMANN_MAP_JSON_PASTE29, \\\r\n        NLOHMANN_MAP_JSON_PASTE28, \\\r\n        NLOHMANN_MAP_JSON_PASTE27, \\\r\n        NLOHMANN_MAP_JSON_PASTE26, \\\r\n        NLOHMANN_MAP_JSON_PASTE25, \\\r\n        NLOHMANN_MAP_JSON_PASTE24, \\\r\n        NLOHMANN_MAP_JSON_PASTE23, \\\r\n        NLOHMANN_MAP_JSON_PASTE22, \\\r\n        NLOHMANN_MAP_JSON_PASTE21, \\\r\n        NLOHMANN_MAP_JSON_PASTE20, \\\r\n        NLOHMANN_MAP_JSON_PASTE19, \\\r\n        NLOHMANN_MAP_JSON_PASTE18, \\\r\n        NLOHMANN_MAP_JSON_PASTE17, \\\r\n        NLOHMANN_MAP_JSON_PASTE16, \\\r\n        NLOHMANN_MAP_JSON_PASTE15, \\\r\n        NLOHMANN_MAP_JSON_PASTE14, \\\r\n        NLOHMANN_MAP_JSON_PASTE13, \\\r\n        NLOHMANN_MAP_JSON_PASTE12, \\\r\n        NLOHMANN_MAP_JSON_PASTE11, \\\r\n        NLOHMANN_MAP_JSON_PASTE10, \\\r\n        NLOHMANN_MAP_JSON_PASTE9, \\\r\n        NLOHMANN_MAP_JSON_PASTE8, \\\r\n        NLOHMANN_MAP_JSON_PASTE7, \\\r\n        NLOHMANN_MAP_JSON_PASTE6, \\\r\n        NLOHMANN_MAP_JSON_PASTE5, \\\r\n        NLOHMANN_MAP_JSON_PASTE4, \\\r\n        NLOHMANN_MAP_JSON_PASTE3, \\\r\n        NLOHMANN_MAP_JSON_PASTE2, \\\r\n        NLOHMANN_MAP_JSON_PASTE1)(__VA_ARGS__))\r\n\r\n#define NLOHMANN_MAP_JSON_PASTE3(func1, func2, v1) func2(v1)\r\n#define NLOHMANN_MAP_JSON_PASTE4(func1, func2, v1, v2) func1(v1, v2)\r\n#define NLOHMANN_MAP_JSON_PASTE5(func1, func2, v1, v2, v3) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v3) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v1, v2)\r\n#define NLOHMANN_MAP_JSON_PASTE6(func1, func2, v1, v2, v3, v4) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v3, v4) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v1, v2)\r\n#define NLOHMANN_MAP_JSON_PASTE7(func1, func2, v1, v2, v3, v4, v5) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v5) NLOHMANN_MAP_JSON_PASTE6(func1, func2, v1, v2, v3, v4)\r\n#define NLOHMANN_MAP_JSON_PASTE8(func1, func2, v1, v2, v3, v4, v5, v6) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v5, v6) NLOHMANN_MAP_JSON_PASTE6(func1, func2, v1, v2, v3, v4)\r\n#define NLOHMANN_MAP_JSON_PASTE9(func1, func2, v1, v2, v3, v4, v5, v6, v7 )NLOHMANN_MAP_JSON_PASTE3(func1, func2, v7) NLOHMANN_MAP_JSON_PASTE8(func1, func2, v1, v2, v3, v4, v5, v6)\r\n#define NLOHMANN_MAP_JSON_PASTE10(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v7, v8) NLOHMANN_MAP_JSON_PASTE8(func1, func2, v1, v2, v3, v4, v5, v6)\r\n#define NLOHMANN_MAP_JSON_PASTE11(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v9) NLOHMANN_MAP_JSON_PASTE10(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8)\r\n#define NLOHMANN_MAP_JSON_PASTE12(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v9, v10) NLOHMANN_MAP_JSON_PASTE10(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8)\r\n#define NLOHMANN_MAP_JSON_PASTE13(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v11) NLOHMANN_MAP_JSON_PASTE12(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10))\r\n#define NLOHMANN_MAP_JSON_PASTE14(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v11, v12) NLOHMANN_MAP_JSON_PASTE12(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)\r\n#define NLOHMANN_MAP_JSON_PASTE15(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v13) NLOHMANN_MAP_JSON_PASTE14(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12))\r\n#define NLOHMANN_MAP_JSON_PASTE16(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v13, v14) NLOHMANN_MAP_JSON_PASTE14(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)\r\n#define NLOHMANN_MAP_JSON_PASTE17(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v15) NLOHMANN_MAP_JSON_PASTE16(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14))\r\n#define NLOHMANN_MAP_JSON_PASTE18(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v15, v16) NLOHMANN_MAP_JSON_PASTE16(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)\r\n#define NLOHMANN_MAP_JSON_PASTE19(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v17) NLOHMANN_MAP_JSON_PASTE18(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16))\r\n#define NLOHMANN_MAP_JSON_PASTE20(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v17, v18) NLOHMANN_MAP_JSON_PASTE18(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)\r\n#define NLOHMANN_MAP_JSON_PASTE21(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v19) NLOHMANN_MAP_JSON_PASTE20(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18))\r\n#define NLOHMANN_MAP_JSON_PASTE22(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v19, v20) NLOHMANN_MAP_JSON_PASTE20(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18)\r\n#define NLOHMANN_MAP_JSON_PASTE23(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v21) NLOHMANN_MAP_JSON_PASTE22(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20))\r\n#define NLOHMANN_MAP_JSON_PASTE24(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v21, v22) NLOHMANN_MAP_JSON_PASTE22(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20)\r\n#define NLOHMANN_MAP_JSON_PASTE25(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v23) NLOHMANN_MAP_JSON_PASTE24(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22))\r\n#define NLOHMANN_MAP_JSON_PASTE26(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v23, v24) NLOHMANN_MAP_JSON_PASTE24(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22)\r\n#define NLOHMANN_MAP_JSON_PASTE27(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v25) NLOHMANN_MAP_JSON_PASTE26(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24))\r\n#define NLOHMANN_MAP_JSON_PASTE28(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v25, v26) NLOHMANN_MAP_JSON_PASTE26(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24)\r\n#define NLOHMANN_MAP_JSON_PASTE29(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v27) NLOHMANN_MAP_JSON_PASTE28(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26))\r\n#define NLOHMANN_MAP_JSON_PASTE30(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v27, v28) NLOHMANN_MAP_JSON_PASTE28(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26)\r\n#define NLOHMANN_MAP_JSON_PASTE31(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v29) NLOHMANN_MAP_JSON_PASTE30(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28))\r\n#define NLOHMANN_MAP_JSON_PASTE32(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v29, v30) NLOHMANN_MAP_JSON_PASTE30(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28)\r\n#define NLOHMANN_MAP_JSON_PASTE33(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v31) NLOHMANN_MAP_JSON_PASTE32(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30))\r\n#define NLOHMANN_MAP_JSON_PASTE34(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v31, v32) NLOHMANN_MAP_JSON_PASTE32(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30)\r\n#define NLOHMANN_MAP_JSON_PASTE35(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v33) NLOHMANN_MAP_JSON_PASTE34(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32))\r\n#define NLOHMANN_MAP_JSON_PASTE36(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v33, v34) NLOHMANN_MAP_JSON_PASTE34(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32)\r\n#define NLOHMANN_MAP_JSON_PASTE37(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v35) NLOHMANN_MAP_JSON_PASTE36(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34))\r\n#define NLOHMANN_MAP_JSON_PASTE38(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v35, v36) NLOHMANN_MAP_JSON_PASTE36(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34)\r\n#define NLOHMANN_MAP_JSON_PASTE39(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v37) NLOHMANN_MAP_JSON_PASTE38(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36))\r\n#define NLOHMANN_MAP_JSON_PASTE40(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v37, v38) NLOHMANN_MAP_JSON_PASTE38(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36)\r\n#define NLOHMANN_MAP_JSON_PASTE41(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v39) NLOHMANN_MAP_JSON_PASTE40(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38))\r\n#define NLOHMANN_MAP_JSON_PASTE42(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v39, v40) NLOHMANN_MAP_JSON_PASTE40(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38)\r\n#define NLOHMANN_MAP_JSON_PASTE43(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v41) NLOHMANN_MAP_JSON_PASTE42(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40))\r\n#define NLOHMANN_MAP_JSON_PASTE44(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v41, v42) NLOHMANN_MAP_JSON_PASTE42(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40)\r\n#define NLOHMANN_MAP_JSON_PASTE45(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v43) NLOHMANN_MAP_JSON_PASTE44(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42))\r\n#define NLOHMANN_MAP_JSON_PASTE46(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v43, v44) NLOHMANN_MAP_JSON_PASTE44(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42)\r\n#define NLOHMANN_MAP_JSON_PASTE47(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v45) NLOHMANN_MAP_JSON_PASTE46(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44))\r\n#define NLOHMANN_MAP_JSON_PASTE48(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v45, v46) NLOHMANN_MAP_JSON_PASTE46(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44)\r\n#define NLOHMANN_MAP_JSON_PASTE49(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v47) NLOHMANN_MAP_JSON_PASTE48(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46))\r\n#define NLOHMANN_MAP_JSON_PASTE50(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v47, v48) NLOHMANN_MAP_JSON_PASTE48(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46)\r\n#define NLOHMANN_MAP_JSON_PASTE51(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v49) NLOHMANN_MAP_JSON_PASTE50(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48))\r\n#define NLOHMANN_MAP_JSON_PASTE52(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v49, v50) NLOHMANN_MAP_JSON_PASTE50(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48)\r\n#define NLOHMANN_MAP_JSON_PASTE53(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v51) NLOHMANN_MAP_JSON_PASTE52(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50))\r\n#define NLOHMANN_MAP_JSON_PASTE54(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v51, v52) NLOHMANN_MAP_JSON_PASTE52(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50)\r\n#define NLOHMANN_MAP_JSON_PASTE55(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v53) NLOHMANN_MAP_JSON_PASTE54(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52))\r\n#define NLOHMANN_MAP_JSON_PASTE56(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v53, v54) NLOHMANN_MAP_JSON_PASTE54(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52)\r\n#define NLOHMANN_MAP_JSON_PASTE57(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v55) NLOHMANN_MAP_JSON_PASTE56(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54))\r\n#define NLOHMANN_MAP_JSON_PASTE58(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v55, v56) NLOHMANN_MAP_JSON_PASTE56(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54)\r\n#define NLOHMANN_MAP_JSON_PASTE59(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v57) NLOHMANN_MAP_JSON_PASTE58(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56))\r\n#define NLOHMANN_MAP_JSON_PASTE60(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v57, v58) NLOHMANN_MAP_JSON_PASTE58(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56)\r\n#define NLOHMANN_MAP_JSON_PASTE61(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v59) NLOHMANN_MAP_JSON_PASTE60(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58))\r\n#define NLOHMANN_MAP_JSON_PASTE62(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v59, v60) NLOHMANN_MAP_JSON_PASTE60(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58)\r\n#define NLOHMANN_MAP_JSON_PASTE63(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61) NLOHMANN_MAP_JSON_PASTE3(func1, func2, v61) NLOHMANN_MAP_JSON_PASTE62(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60))\r\n#define NLOHMANN_MAP_JSON_PASTE64(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62) NLOHMANN_MAP_JSON_PASTE4(func1, func2, v61, v62) NLOHMANN_MAP_JSON_PASTE62(func1, func2, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60)\r\n#define NLOHMANN_MAP_DEFINE_TYPE_INTRUSIVE(Type, ...)  \\\r\n    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_MAP_JSON_PASTE(NLOHMANN_MAP_JSON_TO, NLOHMANN_JSON_TO, __VA_ARGS__)) } \\\r\n    friend void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_MAP_JSON_PASTE(NLOHMANN_MAP_JSON_FROM, NLOHMANN_JSON_FROM, __VA_ARGS__)) }\r\n\r\n#define NLOHMANN_MAP_DEFINE_TYPE_INTRUSIVE_WITH_DEFAULT(Type, ...)  \\\r\n    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_MAP_JSON_PASTE(NLOHMANN_MAP_JSON_TO, NLOHMANN_JSON_TO, __VA_ARGS__)) } \\\r\n    friend void from_json(const nlohmann::json& nlohmann_json_j, Type& nlohmann_json_t) { const Type nlohmann_json_default_obj{}; NLOHMANN_JSON_EXPAND(NLOHMANN_MAP_JSON_PASTE(NLOHMANN_MAP_JSON_FROM_WITH_DEFAULT, NLOHMANN_JSON_FROM_WITH_DEFAULT, __VA_ARGS__)) }\r\n#define NLOHMANN_MAP_DEFINE_TYPE_INTRUSIVE_ONLY_SERIALIZE(Type, ...)  \\\r\n    friend void to_json(nlohmann::json& nlohmann_json_j, const Type& nlohmann_json_t) { NLOHMANN_JSON_EXPAND(NLOHMANN_MAP_JSON_PASTE(NLOHMANN_MAP_JSON_TO, NLOHMANN_JSON_TO, __VA_ARGS__)) }\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\nx64-osx\r\n\r\n### Library version\r\n\r\n3.11.3\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4399/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4399/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4386",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4386/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4386/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4386/events",
    "html_url": "https://github.com/nlohmann/json/issues/4386",
    "id": 2329620554,
    "node_id": "I_kwDOAKp23M6K2zBK",
    "number": 4386,
    "title": "VS 2022 latest version on win 10 latest version don't compile any recent version of JSON...",
    "user": {
      "login": "ArnaudNRoses",
      "id": 92106896,
      "node_id": "U_kgDOBX1wkA",
      "avatar_url": "https://avatars.githubusercontent.com/u/92106896?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ArnaudNRoses",
      "html_url": "https://github.com/ArnaudNRoses",
      "followers_url": "https://api.github.com/users/ArnaudNRoses/followers",
      "following_url": "https://api.github.com/users/ArnaudNRoses/following{/other_user}",
      "gists_url": "https://api.github.com/users/ArnaudNRoses/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ArnaudNRoses/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ArnaudNRoses/subscriptions",
      "organizations_url": "https://api.github.com/users/ArnaudNRoses/orgs",
      "repos_url": "https://api.github.com/users/ArnaudNRoses/repos",
      "events_url": "https://api.github.com/users/ArnaudNRoses/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ArnaudNRoses/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-06-02T12:07:50Z",
    "updated_at": "2024-06-03T01:31:20Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nVS 2022 latest version on win 10 latest version don't compile any recent version of JSON ( I'm a recent user of this classes )\r\n![Sans titre](https://github.com/nlohmann/json/assets/92106896/6942f7e6-a93d-4016-bbca-6a37fdd0a7c8)\r\n\n\n### Reproduction steps\n\nDon't compile...\n\n### Expected vs. actual results\n\nDon't compile... error number on image sent\n\n### Minimal code example\n\n```Shell\nDon't compile...\n```\n\n\n### Error messages\n\n```Shell\nlook image sent...\n```\n\n\n### Compiler and operating system\n\nVS 2022 latest version win 10 latest version\n\n### Library version\n\n3.11.x \n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4386/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4386/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4384",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4384/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4384/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4384/events",
    "html_url": "https://github.com/nlohmann/json/issues/4384",
    "id": 2323991491,
    "node_id": "I_kwDOAKp23M6KhUvD",
    "number": 4384,
    "title": "JSON_BuildTests fail when JSON_DisableEnumSerialization is set to ON",
    "user": {
      "login": "madamsrc",
      "id": 171164907,
      "node_id": "U_kgDOCjPE6w",
      "avatar_url": "https://avatars.githubusercontent.com/u/171164907?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/madamsrc",
      "html_url": "https://github.com/madamsrc",
      "followers_url": "https://api.github.com/users/madamsrc/followers",
      "following_url": "https://api.github.com/users/madamsrc/following{/other_user}",
      "gists_url": "https://api.github.com/users/madamsrc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/madamsrc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/madamsrc/subscriptions",
      "organizations_url": "https://api.github.com/users/madamsrc/orgs",
      "repos_url": "https://api.github.com/users/madamsrc/repos",
      "events_url": "https://api.github.com/users/madamsrc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/madamsrc/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-29T18:34:13Z",
    "updated_at": "2024-05-29T18:34:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nSetting `JSON_DisableEnumSerialization` to `ON` when building _JSON for Modern C++_ with testing enabled (`JSON_BuildTests` set also set to `ON`), the tests do not build and the build fails. Tests that rely on that setting should not be built for library clients who do not want EnumSerialization and the build should succeed.\n\n### Reproduction steps\n\nFrom a fresh clone of _nlohmann/json_, I ran the following commands to configure and build the library using CMake:\r\n```\r\n/usr/bin/cmake -DJSON_DisableEnumSerialization=ON -DJSON_BuildTests=On -DJSON_Install=ON -DJSON_SystemInclude=ON -DCMAKE_INSTALL_PREFIX=/workspaces/json/install/gcc12-release -DCMAKE_EXPORT_COMPILE_COMMANDS=true -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/g++-12 -S/workspaces/json -B/workspaces/json/build/gcc12-release -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_C_COMPILER:FILEPATH=/usr/bin/gcc-12 -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/g++-12 -DCMAKE_CXX_STANDARD:STRING=20 -DCMAKE_CXX_STANDARD_REQUIRED:BOOL=ON -DCMAKE_CXX_EXTENSIONS:BOOL=OFF -DCMAKE_CXX_FLAGS_INIT:STRING='-fPIC -O3 -mavx2 -mavx'\r\n/usr/bin/cmake --build /workspaces/json/build/gcc12-release --parallel 17 --target all\r\n```\n\n### Expected vs. actual results\n\nI expect successful building and linking of all executable tests with no errors or warnings. In practice, the compiler produces errors and warnings as detailed below in the _Error messages_ field in this form.\n\n### Minimal code example\n\n```Shell\nN/A - just building the tests of the library\n```\n\n\n### Error messages\n\n```Shell\n/workspaces/json/tests/src/unit-conversions.cpp:1272:53: error: expected primary-expression before ‘)’ token\r\n 1272 |         CHECK(json(cpp_enum::value_1).get<cpp_enum>() == cpp_enum::value_1);\r\n      |                                                     ^\r\n/workspaces/json/tests/thirdparty/doctest/doctest.h:2427:24: note: in definition of macro ‘DOCTEST_ASSERT_IMPLEMENT_1’\r\n 2427 |                     << __VA_ARGS__) DOCTEST_CLANG_SUPPRESS_WARNING_POP\r\n      |                        ^~~~~~~~~~~\r\n/workspaces/json/tests/thirdparty/doctest/doctest.h:2969:20: note: in expansion of macro ‘DOCTEST_CHECK’\r\n 2969 | #define CHECK(...) DOCTEST_CHECK(__VA_ARGS__)\r\n      |                    ^~~~~~~~~~~~~\r\n/workspaces/json/tests/src/unit-conversions.cpp:1272:9: note: in expansion of macro ‘CHECK’\r\n 1272 |         CHECK(json(cpp_enum::value_1).get<cpp_enum>() == cpp_enum::value_1);\r\n      |         ^~~~~\r\ngmake[2]: *** [tests/CMakeFiles/test-conversions_cpp11.dir/build.make:76: tests/CMakeFiles/test-conversions_cpp11.dir/src/unit-conversions.cpp.o] Error 1\r\ngmake[1]: *** [CMakeFiles/Makefile2:1763: tests/CMakeFiles/test-conversions_cpp11.dir/all] Error 2\r\ngmake: *** [Makefile:146: all] Error\n```\n\n\n### Compiler and operating system\n\ngcc12, Ubuntu 22.04.1 x86_64\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4384/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4384/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4378",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4378/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4378/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4378/events",
    "html_url": "https://github.com/nlohmann/json/issues/4378",
    "id": 2310830977,
    "node_id": "I_kwDOAKp23M6JvHuB",
    "number": 4378,
    "title": "when enum is used as key in a map the json format is not an expected format",
    "user": {
      "login": "ordit1985",
      "id": 143713456,
      "node_id": "U_kgDOCJDksA",
      "avatar_url": "https://avatars.githubusercontent.com/u/143713456?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ordit1985",
      "html_url": "https://github.com/ordit1985",
      "followers_url": "https://api.github.com/users/ordit1985/followers",
      "following_url": "https://api.github.com/users/ordit1985/following{/other_user}",
      "gists_url": "https://api.github.com/users/ordit1985/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ordit1985/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ordit1985/subscriptions",
      "organizations_url": "https://api.github.com/users/ordit1985/orgs",
      "repos_url": "https://api.github.com/users/ordit1985/repos",
      "events_url": "https://api.github.com/users/ordit1985/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ordit1985/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-05-22T15:22:50Z",
    "updated_at": "2024-06-06T22:01:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nI would expect map to be parsed as json objects eg.\r\n{\"aa\":\"completed\",\"bb\":\"running\"}\r\n\r\nIn fact this json format is dependent on the key type. When the key type is string, the json is created as expected.\r\nWhen the key type is an enum, the map is parsed as json array eg.\r\n[[\"stopped\",\"aa\"],[\"completed\",\"bb\"]]\r\n\r\n\r\n### Reproduction steps\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <string>\r\n#include <map>\r\n#include \"common/include/json/json.h\"\r\n\r\nusing njson = nlohmann::json;\r\n\r\n// example enum type declaration\r\nenum TaskState {\r\n    TS_STOPPED,\r\n    TS_RUNNING,\r\n    TS_COMPLETED,\r\n    TS_INVALID=-1,\r\n};\r\n\r\n// map TaskState values to JSON as strings\r\nNLOHMANN_JSON_SERIALIZE_ENUM( TaskState, {\r\n    {TS_INVALID, nullptr},\r\n    {TS_STOPPED, \"stopped\"},\r\n    {TS_RUNNING, \"running\"},\r\n    {TS_COMPLETED, \"completed\"},\r\n})\r\n\r\nint main(int argc, char ** argv) {\r\n\r\n\tstd::map<TaskState, std::string> t1 = {{TS_STOPPED, \"aa\"}, {TS_COMPLETED, \"bb\"}};\r\n\tstd::map<std::string, TaskState> t2 = {{\"aa\", TS_COMPLETED}, {\"bb\", TS_RUNNING}};\r\n\r\n\tprintf(\"enum_in_key_nohlman: %s\\n\", njson(t1).dump().c_str());\r\n\tprintf(\"enum_in_val_nohlman: %s\\n\", njson(t2).dump().c_str());\r\n\r\n\r\n// when enum is in key the json format changes to unexpected json format.\r\n// enum_in_key_nohlman: [[\"stopped\",\"aa\"],[\"completed\",\"bb\"]]\r\n// enum_in_val_nohlman: {\"aa\":\"completed\",\"bb\":\"running\"}\r\n}\r\n```\r\n\r\n\r\n### Expected vs. actual results\r\n\r\nI would expect both cases to look in same format:\r\nenum_in_key_nohlman: {\"stopped\",\"aa\",\"completed\",\"bb\"}\r\nenum_in_val_nohlman: {\"aa\":\"completed\",\"bb\":\"running\"}\r\n\r\n### Minimal code example\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <string>\r\n#include <map>\r\n#include \"common/include/json/json.h\"\r\n\r\nusing njson = nlohmann::json;\r\n\r\n// example enum type declaration\r\nenum TaskState {\r\n    TS_STOPPED,\r\n    TS_RUNNING,\r\n    TS_COMPLETED,\r\n    TS_INVALID=-1,\r\n};\r\n\r\n// map TaskState values to JSON as strings\r\nNLOHMANN_JSON_SERIALIZE_ENUM( TaskState, {\r\n    {TS_INVALID, nullptr},\r\n    {TS_STOPPED, \"stopped\"},\r\n    {TS_RUNNING, \"running\"},\r\n    {TS_COMPLETED, \"completed\"},\r\n})\r\n\r\nint main(int argc, char ** argv) {\r\n\r\n\tstd::map<TaskState, std::string> t1 = {{TS_STOPPED, \"aa\"}, {TS_COMPLETED, \"bb\"}};\r\n\tstd::map<std::string, TaskState> t2 = {{\"aa\", TS_COMPLETED}, {\"bb\", TS_RUNNING}};\r\n\r\n\tprintf(\"enum_in_key_nohlman: %s\\n\", njson(t1).dump().c_str());\r\n\tprintf(\"enum_in_val_nohlman: %s\\n\", njson(t2).dump().c_str());\r\n\r\n\r\n// when enum is in key the json format changes to unexpected json format.\r\n// enum_in_key_nohlman: [[\"stopped\",\"aa\"],[\"completed\",\"bb\"]]\r\n// enum_in_val_nohlman: {\"aa\":\"completed\",\"bb\":\"running\"}\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nunexpected format\r\nenum_in_key_nohlman: [[\"stopped\",\"aa\"],[\"completed\",\"bb\"]]\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nlinux \r\n\r\n### Library version\r\n\r\n3.6.1\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4378/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4377",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4377/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4377/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4377/events",
    "html_url": "https://github.com/nlohmann/json/issues/4377",
    "id": 2309996063,
    "node_id": "I_kwDOAKp23M6Jr74f",
    "number": 4377,
    "title": "nlohmann::ordered_json: not compatible with NLOHMANN_DEFINE_TYPE_INTRUSIVE",
    "user": {
      "login": "17steen",
      "id": 43650869,
      "node_id": "MDQ6VXNlcjQzNjUwODY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/43650869?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/17steen",
      "html_url": "https://github.com/17steen",
      "followers_url": "https://api.github.com/users/17steen/followers",
      "following_url": "https://api.github.com/users/17steen/following{/other_user}",
      "gists_url": "https://api.github.com/users/17steen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/17steen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/17steen/subscriptions",
      "organizations_url": "https://api.github.com/users/17steen/orgs",
      "repos_url": "https://api.github.com/users/17steen/repos",
      "events_url": "https://api.github.com/users/17steen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/17steen/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-05-22T09:09:51Z",
    "updated_at": "2024-08-24T19:55:28Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nIf a type is defined with `NLOHMANN_DEFINE_TYPE_INTRUSIVE`, it cannot directly be used with `ordered_json`.\n\n### Reproduction steps\n\n\r\n```c++\r\n#include <nlohmann/json.hpp>\r\n\r\nstruct my_type_t {\r\n       std::string key;\r\n\r\n       NLOHMANN_DEFINE_TYPE_INTRUSIVE(my_type_t, key)\r\n};\r\n\r\nint main()\r\n{\r\n    auto thing = my_type_t{};\r\n\r\n    nlohmann::json my_json = thing;\r\n    // doesn't compile\r\n    nlohmann::ordered_json my_ordered_json = thing;\r\n\r\n    return 0;\r\n}\r\n```\n\n### Expected vs. actual results\n\nI would expect `nlohmann::ordered_json my_ordered_json = custom_type`; to compile\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\ngcc 13.1\n\n### Library version\n\ntrunk on godbolt\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4377/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4377/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4374",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4374/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4374/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4374/events",
    "html_url": "https://github.com/nlohmann/json/issues/4374",
    "id": 2304581427,
    "node_id": "I_kwDOAKp23M6JXR8z",
    "number": 4374,
    "title": "Error 302: type must be number, but is it number",
    "user": {
      "login": "askraskr",
      "id": 143619332,
      "node_id": "U_kgDOCI91BA",
      "avatar_url": "https://avatars.githubusercontent.com/u/143619332?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/askraskr",
      "html_url": "https://github.com/askraskr",
      "followers_url": "https://api.github.com/users/askraskr/followers",
      "following_url": "https://api.github.com/users/askraskr/following{/other_user}",
      "gists_url": "https://api.github.com/users/askraskr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/askraskr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/askraskr/subscriptions",
      "organizations_url": "https://api.github.com/users/askraskr/orgs",
      "repos_url": "https://api.github.com/users/askraskr/repos",
      "events_url": "https://api.github.com/users/askraskr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/askraskr/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2024-05-19T12:11:46Z",
    "updated_at": "2024-08-28T19:05:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nJust compiled and installed the last version of nlohmann_json library with CMake.\r\nI was reading JSON documents from Mongo. Converted Mongo documents to `nlohmann_json::json`s. \r\n\r\nafter compiling and running it, I got this error: `type must be number, but is it number`.\r\n\r\n![number](https://github.com/nlohmann/json/assets/143619332/55055ffe-6c49-40c5-a9f8-4c246951a04e)\r\n\n\n### Reproduction steps\n\n```c++\r\nstd::vector<nlohmann::json> jsonv;\r\nfor (auto cursor = client[db][cl].find(make_document(kvp(\"_id\", make_document(kvp(\"$gt\", bsoncxx::oid(some_id)))))); const auto &doc: cursor) {\r\n        json = std::move(nlohmann::json::parse(bsoncxx::to_json(doc)));\r\n        jsonv.push_back(std::move(json));\r\n    }\r\n```\n\n### Expected vs. actual results\n\nI expected an integer to be printed. As simple as that.\n\n### Minimal code example\n\n```Shell\nsample json document from Mongo without _id:\r\n{\r\n    \"Latitude\": 0,\r\n    \"Longitude\": 0,\r\n    \"PassedTime\": 1715948646000,\r\n    \"post_timeout_ms\": 15000,\r\n    \"redirect_count\": 0,\r\n}\r\n\r\nstd::cout << record[\"PassedTime\"].template get<long>() << std::endl;\n```\n\n\n### Error messages\n\n```Shell\nterminate called after throwing an instance of 'nlohmann::json_abi_v3_11_3::detail::type_error'\r\n  what():  [json.exception.type_error.302] type must be number, but is number\n```\n\n\n### Compiler and operating system\n\nDebian with g++-11\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [x] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4374/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4374/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4371",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4371/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4371/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4371/events",
    "html_url": "https://github.com/nlohmann/json/issues/4371",
    "id": 2290442270,
    "node_id": "I_kwDOAKp23M6IhWAe",
    "number": 4371,
    "title": "iteration_proxy has limited usefulness in C++20 range views",
    "user": {
      "login": "captaincrutches",
      "id": 6391858,
      "node_id": "MDQ6VXNlcjYzOTE4NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6391858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/captaincrutches",
      "html_url": "https://github.com/captaincrutches",
      "followers_url": "https://api.github.com/users/captaincrutches/followers",
      "following_url": "https://api.github.com/users/captaincrutches/following{/other_user}",
      "gists_url": "https://api.github.com/users/captaincrutches/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/captaincrutches/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/captaincrutches/subscriptions",
      "organizations_url": "https://api.github.com/users/captaincrutches/orgs",
      "repos_url": "https://api.github.com/users/captaincrutches/repos",
      "events_url": "https://api.github.com/users/captaincrutches/events{/privacy}",
      "received_events_url": "https://api.github.com/users/captaincrutches/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-05-10T21:36:16Z",
    "updated_at": "2024-05-11T04:19:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nThis is a sort-of continuation, sort-of reopening of #3130 - it's not _exactly_ the same use case, but certain applications of `items()` on a json object still don't play nicely with C++20 `std::ranges`.\r\n\r\nIn particular, while `items()` can be used as an input for views like `std::views::transform`, that result isn't usable in situations that require a `forward_iterator`, such as constructing a container from the output range's iterators.  See the code below for what I mean.\r\n\r\nThe compilation error suggests the view iterator's `iterator_category` is not defined, which [is the case](https://en.cppreference.com/w/cpp/ranges/transform_view/iterator) if the base range doesn't model `forward_range`.\r\n\r\nI did some debugging using `static_assert`s, and found that while `iteration_proxy_value` _does_ meet [all the requirements](https://en.cppreference.com/w/cpp/iterator/forward_iterator) for a `forward_iterator`, its `iterator_category` is explicitly exposed as only `std::input_iterator_tag`.  Simply changing that to `std::forward_iterator_tag` (or removing it and letting `iterator_traits` deduce it) in my testing makes it fully model `forward_iterator`, so that `items()` models `forward_range` and the view is usable in this case.\r\n\r\n### Reproduction steps\r\n\r\n- Crate a `json` object\r\n- Run its `items()` through an `std::views::transform`\r\n- Try to construct a container via that result's iterators, e.g. `std::vector<std::string> s{view.begin(), view.end()};`\r\n\r\n### Expected vs. actual results\r\n\r\n`iteration_proxy` is just a wrapper around the actual iterator of `json` itself, which _does_ satisfy `forward_iterator`, so I expect `iteration_proxy_value` to also satisfy `forward_iterator`.  Instead, it only satisfies `input_iterator`.\r\n\r\n### Minimal code example\r\n\r\n```cpp\r\n#include <nlohmann/json.hpp>\r\n\r\n#include <ranges>\r\n#include <string>\r\n#include <vector>\r\n\r\nint main()\r\n{\r\n    // This works\r\n    nlohmann::json arr { 1, 2, 3 };\r\n    auto arrTransform = std::views::transform([](auto&& element){ return element.template get<int>() * 2; });\r\n    auto arrView = arr | arrTransform;\r\n    std::vector<int> arrVec{arrView.begin(), arrView.end()};\r\n\r\n    // This doesn't work\r\n    nlohmann::json obj {\r\n        { \"one\", 1 },\r\n        { \"two\", 2 },\r\n        { \"three\", 3 }\r\n    };\r\n    auto objItems = obj.items();\r\n    auto objTransform = std::views::transform([](auto&& element){ return element.key(); });\r\n    auto objView = objItems | objTransform;\r\n    std::vector<std::string> keys{objView.begin(), objView.end()};  // Fails to compile\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```\r\njson-range.cpp: In function ‘int main()’:\r\njson-range.cpp:24:65: error: no matching function for call to ‘std::vector<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char> > >::vector(<brace-enclosed initializer list>)’\r\n   23 |     std::vector<std::string> keys{objView.begin(), objView.end()};  // Fails to compile\r\n      |                                                                 ^\r\nIn file included from /usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/vector:66,\r\n                 from /usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/functional:64,\r\n                 from /usr/include/nlohmann/json.hpp:23,\r\n                 from json-range.cpp:1:\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/bits/stl_vector.h:707:9: note: candidate: ‘template<class _InputIterator, class> constexpr std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with <template-parameter-2-2> = _InputIterator; _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char> >]’\r\n  707 |         vector(_InputIterator __first, _InputIterator __last,\r\n      |         ^~~~~~\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/bits/stl_vector.h:707:9: note:   template argument deduction/substitution failed:\r\nIn file included from /usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/bits/stl_algobase.h:65,\r\n                 from /usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/algorithm:60,\r\n                 from /usr/include/nlohmann/json.hpp:21:\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/bits/stl_iterator_base_types.h: In substitution of ‘template<class _InIter> using std::_RequireInputIter = std::__enable_if_t<std::is_convertible<typename std::iterator_traits< <template-parameter-1-1> >::iterator_category, std::input_iterator_tag>::value> [with _InIter = std::ranges::transform_view<std::ranges::ref_view<nlohmann::json_abi_v3_11_3::detail::iteration_proxy<nlohmann::json_abi_v3_11_3::detail::iter_impl<nlohmann::json_abi_v3_11_3::basic_json<> > > >, main()::<lambda(auto:24&&)> >::_Iterator<false>]’:\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/bits/stl_vector.h:705:9:   required from here\r\n/usr/lib/gcc/x86_64-pc-linux-gnu/13/include/g++-v13/bits/stl_iterator_base_types.h:250:11: error: no type named ‘iterator_category’ in ‘struct std::iterator_traits<std::ranges::transform_view<std::ranges::ref_view<nlohmann::json_abi_v3_11_3::detail::iteration_proxy<nlohmann::json_abi_v3_11_3::detail::iter_impl<nlohmann::json_abi_v3_11_3::basic_json<> > > >, main()::<lambda(auto:24&&)> >::_Iterator<false> >’\r\n  250 |     using _RequireInputIter =\r\n      |           ^~~~~~~~~~~~~~~~~\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nGentoo, GCC 13.2\r\n\r\n### Library version\r\n\r\n3.11.3\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4371/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4371/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4361",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4361/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4361/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4361/events",
    "html_url": "https://github.com/nlohmann/json/issues/4361",
    "id": 2269577199,
    "node_id": "I_kwDOAKp23M6HRv_v",
    "number": 4361,
    "title": "CodeQL suppressions lack justification",
    "user": {
      "login": "TheJCAB",
      "id": 22421744,
      "node_id": "MDQ6VXNlcjIyNDIxNzQ0",
      "avatar_url": "https://avatars.githubusercontent.com/u/22421744?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheJCAB",
      "html_url": "https://github.com/TheJCAB",
      "followers_url": "https://api.github.com/users/TheJCAB/followers",
      "following_url": "https://api.github.com/users/TheJCAB/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheJCAB/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheJCAB/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheJCAB/subscriptions",
      "organizations_url": "https://api.github.com/users/TheJCAB/orgs",
      "repos_url": "https://api.github.com/users/TheJCAB/repos",
      "events_url": "https://api.github.com/users/TheJCAB/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheJCAB/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "nlohmann",
        "id": 159488,
        "node_id": "MDQ6VXNlcjE1OTQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nlohmann",
        "html_url": "https://github.com/nlohmann",
        "followers_url": "https://api.github.com/users/nlohmann/followers",
        "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
        "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
        "organizations_url": "https://api.github.com/users/nlohmann/orgs",
        "repos_url": "https://api.github.com/users/nlohmann/repos",
        "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nlohmann/received_events",
        "type": "User",
        "user_view_type": "public",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-04-29T17:30:02Z",
    "updated_at": "2024-05-01T16:11:29Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Description\n\nIn this repo there are a handful of old-style \"lgtm\" suppressions for issues raised by CodeQL. As we use it at Microsoft in internal tooling for Time Travel Debugging, this code goes through internal security scanning, and this issue was raised up with these suppressions.\r\n\r\nThe policy that was violated requires having a justification on all such suppressions. This justification needs to use the new format `\\\\ CodeQL[id] Justification goes here` which needs to be in its own line just above the line that had the issue. And the justification needs to be at least 25 characters long.\r\n\r\nThe issue we're having is specifically with lexer.hpp:\r\n\r\n```C++\r\n    token_type scan_number()  // lgtm [cpp/use-of-goto]\r\n```\r\n\r\nA possible solution (untested as I write this - I can't run the policy scan locally):\r\n\r\n```C++\r\n    // CodeQL [cpp/use-of-goto] `goto` is used here safely to implement a simple lexer's winding control flow\r\n    token_type scan_number()\r\n```\r\n\r\nThat might not be the best justification. Ideally this would be provided by the person who wrote the `scan_number` function.\r\n\r\nNote that I failed to find any actual documentation for the format of CodeQL suppressions. I opened an issue there too: https://github.com/microsoft/codeql/issues/63\n\n### Reproduction steps\n\nThis seems to be a new internal security policy over here, so I don't particularly have repro steps to give.\n\n### Expected vs. actual results\n\nExpected: we can use this wonderful library without triggering security policies.\r\nActual: we trigger a security policy.\r\n\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nMicrosoft Visual C++, Visual Studio 2022 17.10, C++20\n\n### Library version\n\nUsed via vcpkg, with commit 0ca0fe433eb70cea0d5761079c0c5b47b736565b\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4361/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4361/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4358",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4358/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4358/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4358/events",
    "html_url": "https://github.com/nlohmann/json/issues/4358",
    "id": 2261750697,
    "node_id": "I_kwDOAKp23M6Gz5Op",
    "number": 4358,
    "title": "Unexpected conversion from 'true'/'false' to some integer  types",
    "user": {
      "login": "jboelterintc",
      "id": 56665699,
      "node_id": "MDQ6VXNlcjU2NjY1Njk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56665699?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jboelterintc",
      "html_url": "https://github.com/jboelterintc",
      "followers_url": "https://api.github.com/users/jboelterintc/followers",
      "following_url": "https://api.github.com/users/jboelterintc/following{/other_user}",
      "gists_url": "https://api.github.com/users/jboelterintc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jboelterintc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jboelterintc/subscriptions",
      "organizations_url": "https://api.github.com/users/jboelterintc/orgs",
      "repos_url": "https://api.github.com/users/jboelterintc/repos",
      "events_url": "https://api.github.com/users/jboelterintc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jboelterintc/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-04-24T16:52:16Z",
    "updated_at": "2024-06-06T14:53:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nConverting from `\"value\": true` or `\"value\": false` behaves unexpectedly and differently for certain integer types.\r\n\r\nI was expecting all conversions from a boolean true/false to integer value to fail, however it is stored as a 1 or 0.\r\n\r\n### Reproduction steps\r\n\r\nGiven:\r\n```cpp \r\ntemplate<typename T>\r\nclass Value {\r\npublic:\r\n    T value;\r\nprivate:\r\n    NLOHMANN_DEFINE_TYPE_INTRUSIVE(Value<T>, value);\r\n};\r\n```\r\n\r\nThis will result in a `1` in `value`.\r\n\r\n```cpp\r\nauto v = R\"({\r\n    \"value\" : true\r\n})\"_json.get<Value<int>>();\r\n```\r\n\r\nUsing `uint64_t` will throw a `type_error`.\r\n\r\n```cpp\r\nauto v = R\"({\r\n    \"value\" : true\r\n})\"_json.get<Value<uint64_t>>();\r\n```\r\n\r\n\r\n### Expected vs. actual results\r\n\r\nI expected all boolean to integer conversions to fail.  Instead a `true` -> `1` and `false` -> `0` for certain integer values.\r\n\r\nVarious integer conversions - https://godbolt.org/z/7Wrh6EanW\r\n\r\n\r\nThe `uint64_t` case is taking the path through `get_arithmetic_value`\r\n\r\n```cpp\r\ntemplate<typename BasicJsonType>\r\ninline void from_json(const BasicJsonType& j, typename BasicJsonType::number_unsigned_t& val)\r\n{\r\n    get_arithmetic_value(j, val);\r\n}\r\n```\r\n\r\nThe `int` case is taking the path through \r\n\r\n```cpp\r\n\r\nstruct from_json_fn\r\n{\r\n    template<typename BasicJsonType, typename T>\r\n    auto operator()(const BasicJsonType& j, T&& val) const\r\n    noexcept(noexcept(from_json(j, std::forward<T>(val))))\r\n    -> decltype(from_json(j, std::forward<T>(val)))\r\n    {\r\n        return from_json(j, std::forward<T>(val));\r\n    }\r\n};\r\n\r\n// which calls\r\n\r\ntemplate < typename BasicJsonType, typename ArithmeticType,\r\n           enable_if_t <\r\n               std::is_arithmetic<ArithmeticType>::value&&\r\n               !std::is_same<ArithmeticType, typename BasicJsonType::number_unsigned_t>::value&&\r\n               !std::is_same<ArithmeticType, typename BasicJsonType::number_integer_t>::value&&\r\n               !std::is_same<ArithmeticType, typename BasicJsonType::number_float_t>::value&&\r\n               !std::is_same<ArithmeticType, typename BasicJsonType::boolean_t>::value,\r\n               int > = 0 >\r\ninline void from_json(const BasicJsonType& j, ArithmeticType& val)\r\n{\r\n//...\r\n\r\n        case value_t::boolean:\r\n        {\r\n            val = static_cast<ArithmeticType>(*j.template get_ptr<const typename BasicJsonType::boolean_t*>());\r\n            break;\r\n        }\r\n//...\r\n}\r\n```\r\n\r\n### Minimal code example\r\n\r\nhttps://godbolt.org/z/fs4frqz7G\r\n\r\n```cpp\r\n#include <cassert>\r\n#include <iostream>\r\n\r\n#include <nlohmann/json.hpp>\r\n\r\ntemplate<typename T>\r\nclass Value {\r\npublic:\r\n    T value;\r\nprivate:\r\n    NLOHMANN_DEFINE_TYPE_INTRUSIVE(Value<T>, value);\r\n};\r\n\r\nint main() {\r\n    try {\r\n        std::cout << \"uint64_t\" << std::endl;\r\n        auto v = R\"({\r\n            \"value\" : true\r\n        })\"_json.get<Value<uint64_t>>();\r\n\r\n        assert(false);\r\n    } catch (const nlohmann::detail::type_error& e) {\r\n        std::cout << e.what() << std::endl;\r\n        std::cout << \"ok - exception expected\" << std::endl;\r\n    }\r\n\r\n    try {\r\n        std::cout << \"int\" << std::endl;\r\n        auto v = R\"({\r\n            \"value\" : true\r\n        })\"_json.get<Value<int>>();\r\n\r\n        assert(false);\r\n    } catch (const nlohmann::detail::type_error& e) {\r\n        std::cout << e.what() << std::endl;\r\n        std::cout << \"ok - exception expected\" << std::endl;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\nLatest MSVC & Clang\r\n\r\n### Library version\r\n\r\n3.11.3\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4358/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4354",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4354/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4354/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4354/events",
    "html_url": "https://github.com/nlohmann/json/issues/4354",
    "id": 2254669692,
    "node_id": "I_kwDOAKp23M6GY4d8",
    "number": 4354,
    "title": "(official) example for parsing \"custom data source\" (implementing input iterator) does not compile",
    "user": {
      "login": "dhebbeker",
      "id": 1594340,
      "node_id": "MDQ6VXNlcjE1OTQzNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1594340?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dhebbeker",
      "html_url": "https://github.com/dhebbeker",
      "followers_url": "https://api.github.com/users/dhebbeker/followers",
      "following_url": "https://api.github.com/users/dhebbeker/following{/other_user}",
      "gists_url": "https://api.github.com/users/dhebbeker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dhebbeker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dhebbeker/subscriptions",
      "organizations_url": "https://api.github.com/users/dhebbeker/orgs",
      "repos_url": "https://api.github.com/users/dhebbeker/repos",
      "events_url": "https://api.github.com/users/dhebbeker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dhebbeker/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-04-20T18:38:52Z",
    "updated_at": "2024-04-20T19:40:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nThe example in [the current section \"Custom data source\"](https://github.com/nlohmann/json/blob/8c391e04fe4195d8be862c97f38cfe10e2a3472e/README.md#custom-data-source) does not compile with [the current header](https://github.com/nlohmann/json/blob/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp). I don't know if the example or the library is erroneous (I suspect the former). But even if it is just an example I would expect it to compile - or to have an explanation of the necessary steps to make it work.\r\n\r\n<sup>Current refers to the [current `develop`](https://github.com/nlohmann/json/tree/8c391e04fe4195d8be862c97f38cfe10e2a3472e) branch.</sup>\r\n\r\n### Reproduction steps\r\n\r\nTo reproduce:\r\n\r\n1. Copy the code into a source file.\r\n2. Add the missing `#include` and `using namespace`.\r\n3. Optionally add dummy definition for `MyContainer::advance()` and `MyContainer::get_current()` (does not make any difference at this stage)\r\n4. Try to compile.\r\n\r\nSee [result on Compiler Explorer with clang 15.0.0](https://godbolt.org/z/PKTGj9Mox).\r\n\r\n### Expected vs. actual results\r\n\r\nI would expect the code to compile (without linking) without errors.\r\n\r\nNote: It compiles (not linking) if this call to the parser is used instead:\r\n\r\n```diff\r\n-    json j = json::parse(c);\r\n+    json j = json::parse(begin(c), end(c));\r\n```\r\n\r\nBut the example is about using a container.\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\n++\r\n#include <nlohmann/json.hpp>\r\n\r\nusing namespace nlohmann;\r\n\r\nstruct MyContainer {\r\n  void advance();\r\n  const char& get_current();\r\n};\r\n\r\nstruct MyIterator {\r\n    using difference_type = std::ptrdiff_t;\r\n    using value_type = char;\r\n    using pointer = const char*;\r\n    using reference = const char&;\r\n    using iterator_category = std::input_iterator_tag;\r\n\r\n    MyIterator& operator++() {\r\n        target->advance();\r\n        return *this;\r\n    }\r\n\r\n    bool operator!=(const MyIterator& rhs) const {\r\n        return rhs.target != target;\r\n    }\r\n\r\n    reference operator*() const {\r\n        return target->get_current();\r\n    }\r\n\r\n    MyContainer* target = nullptr;\r\n};\r\n\r\nMyIterator begin(MyContainer& tgt) {\r\n    return MyIterator{&tgt};\r\n}\r\n\r\nMyIterator end(const MyContainer&) {\r\n    return {};\r\n}\r\n\r\nvoid foo() {\r\n    MyContainer c;\r\n    json j = json::parse(c);\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nIn file included from <source>:1:\r\n/app/raw.githubusercontent.com/nlohmann/json/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp:23324:16: error: no matching function for call to 'input_adapter'\r\n        parser(detail::input_adapter(std::forward<InputType>(i)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n               ^~~~~~~~~~~~~~~~~~~~~\r\n<source>:43:20: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<MyContainer &>' requested here\r\n    json j = json::parse(c);\r\n                   ^\r\n/app/raw.githubusercontent.com/nlohmann/json/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp:6563:27: note: candidate function not viable: no known conversion from 'MyContainer' to 'std::FILE *' (aka '_IO_FILE *') for 1st argument\r\ninline file_input_adapter input_adapter(std::FILE* file)\r\n                          ^\r\n/app/raw.githubusercontent.com/nlohmann/json/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp:6568:29: note: candidate function not viable: no known conversion from 'MyContainer' to 'std::istream &' (aka 'basic_istream<char> &') for 1st argument\r\ninline input_stream_adapter input_adapter(std::istream& stream)\r\n                            ^\r\n/app/raw.githubusercontent.com/nlohmann/json/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp:6573:29: note: candidate function not viable: no known conversion from 'MyContainer' to 'std::istream' (aka 'basic_istream<char>') for 1st argument\r\ninline input_stream_adapter input_adapter(std::istream&& stream)\r\n                            ^\r\n/app/raw.githubusercontent.com/nlohmann/json/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp:6556:109: note: candidate template ignored: substitution failure [with ContainerType = MyContainer]: no type named 'adapter_type' in 'nlohmann::detail::container_input_adapter_factory_impl::container_input_adapter_factory<MyContainer>'\r\ntypename container_input_adapter_factory_impl::container_input_adapter_factory<ContainerType>::adapter_type input_adapter(const ContainerType& container)\r\n                                                                                               ~~~~~~~~~~~~ ^\r\n/app/raw.githubusercontent.com/nlohmann/json/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp:6589:32: note: candidate template ignored: requirement 'std::is_pointer<MyContainer>::value' was not satisfied [with CharT = MyContainer]\r\ncontiguous_bytes_input_adapter input_adapter(CharT b)\r\n                               ^\r\n/app/raw.githubusercontent.com/nlohmann/json/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp:6597:6: note: candidate template ignored: could not match 'T[N]' against 'MyContainer'\r\nauto input_adapter(T (&array)[N]) -> decltype(input_adapter(array, array + N)) // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\r\n     ^\r\n/app/raw.githubusercontent.com/nlohmann/json/8c391e04fe4195d8be862c97f38cfe10e2a3472e/single_include/nlohmann/json.hpp:6522:69: note: candidate function template not viable: requires 2 arguments, but 1 was provided\r\ntypename iterator_input_adapter_factory<IteratorType>::adapter_type input_adapter(IteratorType first, IteratorType last)\r\n                                                                    ^\r\n1 error generated.\r\nCompiler returned: 1\r\n```\r\n\r\n### Compiler and operating system\r\n\r\nx86-64 clang 15.0.0\r\n\r\n### Library version\r\n\r\n8c391e04fe4195d8be862c97f38cfe10e2a3472e\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4354/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4349",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4349/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4349/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4349/events",
    "html_url": "https://github.com/nlohmann/json/issues/4349",
    "id": 2243720413,
    "node_id": "I_kwDOAKp23M6FvHTd",
    "number": 4349,
    "title": "Cannot unflatten json object",
    "user": {
      "login": "aka-mj",
      "id": 318919,
      "node_id": "MDQ6VXNlcjMxODkxOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/318919?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aka-mj",
      "html_url": "https://github.com/aka-mj",
      "followers_url": "https://api.github.com/users/aka-mj/followers",
      "following_url": "https://api.github.com/users/aka-mj/following{/other_user}",
      "gists_url": "https://api.github.com/users/aka-mj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aka-mj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aka-mj/subscriptions",
      "organizations_url": "https://api.github.com/users/aka-mj/orgs",
      "repos_url": "https://api.github.com/users/aka-mj/repos",
      "events_url": "https://api.github.com/users/aka-mj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aka-mj/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374234,
        "node_id": "MDU6TGFiZWw0NjM3NDIzNA==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid",
        "name": "solution: invalid",
        "color": "e6e6e6",
        "default": false,
        "description": "the issue is not related to the library"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-04-15T13:40:30Z",
    "updated_at": "2024-04-15T20:24:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI have a flattened object that I then want to unflatten but get the following error instead:\r\n\r\nlibc++abi: terminating with uncaught exception of type nlohmann::json_abi_v3_11_3::detail::type_error: [json.exception.type_error.315] values in object must be primitive\n\n### Reproduction steps\n\ncall unflatten() on a flatten json object.\n\n### Expected vs. actual results\n\n```\r\n{\"SettingsRequest\":{\r\n    \"ApplicationError\":[\"1\",\"No ACK\",\"2\",\"No ACK\",\"3\",\"No ACK\",\"4\",\"No ACK\"],\r\n    \"DateAppliedOnDevice\":\"2024-04-15T09:29:25Z\",\r\n    \"DateToExecuteOnDevice\":\"2022-08-04T17:01:39.645090001Z\",\r\n    \"DeviceId\":\"12345\",\r\n    \"SettingsPayloadId\":34,\r\n    \"SettingsValues\":null\r\n}}   \r\n```\r\n\r\n```\r\nlibc++abi: terminating with uncaught exception of type nlohmann::json_abi_v3_11_3::detail::type_error: [json.exception.type_error.315] values in object must be primitive\r\n```\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nclang 13, linux\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4349/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4338",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4338/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4338/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4338/events",
    "html_url": "https://github.com/nlohmann/json/issues/4338",
    "id": 2231908819,
    "node_id": "I_kwDOAKp23M6FCDnT",
    "number": 4338,
    "title": "confused of paresr callback's behavior of null object: remove or discarded?",
    "user": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 232252782,
        "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed",
        "name": "confirmed",
        "color": "e11d21",
        "default": false,
        "description": null
      },
      {
        "id": 304694104,
        "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss",
        "name": "state: please discuss",
        "color": "fbca04",
        "default": false,
        "description": "please discuss the issue or vote for your favorite option"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2024-04-08T19:07:42Z",
    "updated_at": "2024-04-08T19:08:30Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "### Discussed in https://github.com/nlohmann/json/discussions/4336\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **gino0717** April  8, 2024</sup>\r\nhi sir,\r\n\r\nI'm studying the document of [Parser Callbacks](https://json.nlohmann.me/features/parsing/parser_callbacks/)\r\n\r\nI replace some of the values to null of the example , then expect the parser would remove the object if the value is null.\r\n\r\nthe input goes like : \r\n```\r\n{\r\n        \"Image\": {\r\n            \"Width\":  null,\r\n            \"Height\": 600,\r\n            \"Title\":  \"View from 15th Floor\",\r\n            \"Thumbnail\": {\r\n                \"Url\":    \"http://www.example.com/image/481989943\",\r\n                \"Height\": 125,\r\n                \"Width\":  null\r\n            },\r\n            \"Animated\" : false,\r\n            \"IDs\": [116, 943, 234, 38793]\r\n        }\r\n}\r\n```\r\n\r\nBoth \"Width\" under \"Image\" and \"Thumbnail\" are null. \r\n\r\nin version 2.1.1 which directly installed from apt-get gives the result just as I expected, both the \"Width\" disappear due to the null value:\r\n\r\n```\r\n{\r\n    \"Image\": {\r\n        \"Animated\": false,\r\n        \"Height\": 600,\r\n        \"IDs\": [\r\n            116,\r\n            943,\r\n            234,\r\n            38793\r\n        ],\r\n        \"Thumbnail\": {\r\n            \"Height\": 125,\r\n            \"Url\": \"http://www.example.com/image/481989943\"\r\n        },\r\n        \"Title\": \"View from 15th Floor\"\r\n    }\r\n}\r\n```\r\n\r\n\r\nbut in version 3.10.5 it gives the result like:\r\n\r\n\r\n```\r\n{\r\n    \"Image\": {\r\n        \"Animated\": false,\r\n        \"Height\": 600,\r\n        \"IDs\": [\r\n            116,\r\n            943,\r\n            234,\r\n            38793\r\n        ],\r\n        \"Thumbnail\": {\r\n            \"Height\": 125,\r\n            \"Url\": \"http://www.example.com/image/481989943\",\r\n            \"Width\": <discarded>\r\n        },\r\n        \"Title\": \"View from 15th Floor\"\r\n    }\r\n}\r\n```\r\n\r\n\r\nthe second \"Width\" in Thumbnail becomes \"discarded\" , and the \"discarded\" itself cannot be parsed if I feed the filtered json back to parser by : \r\n`\r\n json parse_again=json::parse(j_filtered.dump());`\r\n\r\nit gives\r\n\r\n> terminate called after throwing an instance of 'nlohmann::detail::parse_error'\r\n>   what():  [json.exception.parse_error.101] parse error at line 1, column 148: syntax error while parsing value - invalid literal; last read: '\"Width\":<'\r\n\r\n\r\n\r\nWhen does the parser give the null object a \"discarded\" value or just remove the object if filtered by the parser callback? Could I chose which behavior it acts?\r\n\r\nhere's my original code:\r\n\r\n```\r\n#include <iostream>\r\n#include <iomanip>\r\n#include <nlohmann/json.hpp>\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n    // a JSON text\r\n    auto text = R\"(\r\n    {\r\n        \"Image\": {\r\n            \"Width\":  null,\r\n            \"Height\": 600,\r\n            \"Title\":  \"View from 15th Floor\",\r\n            \"Thumbnail\": {\r\n                \"Url\":    \"http://www.example.com/image/481989943\",\r\n                \"Height\": 125,\r\n                \"Width\":  null\r\n            },\r\n            \"Animated\" : false,\r\n            \"IDs\": [116, 943, 234, 38793]\r\n        }\r\n    }\r\n    )\";\r\n\r\n    // parse and serialize JSON\r\n    json j_complete = json::parse(text);\r\n    std::cout << std::setw(4) << j_complete << \"\\n\\n\";\r\n\r\n    // define parser callback\r\n    json::parser_callback_t cb = [](int depth, json::parse_event_t event, json & parsed)\r\n    {\r\n        // skip object elements with key \"Thumbnail\"\r\n       // if (event == json::parse_event_t::key and parsed == json(\"Thumbnail\"))\r\n         if (event == nlohmann::json::parse_event_t::value and parsed.is_null())\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    };\r\n\r\n    // parse (with callback) and serialize JSON\r\n    json j_filtered = json::parse(text, cb);\r\n    std::cout << std::setw(4) << j_filtered << '\\n';\r\n    \r\n    json parse_again=json::parse(j_filtered.dump());\r\n}\r\n```\r\n</div>",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4338/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4320",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4320/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4320/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4320/events",
    "html_url": "https://github.com/nlohmann/json/issues/4320",
    "id": 2201794658,
    "node_id": "I_kwDOAKp23M6DPLhi",
    "number": 4320,
    "title": "Behavioral change of serializers in 3.11.3. Name lookup related.",
    "user": {
      "login": "TobiSchluter",
      "id": 11887541,
      "node_id": "MDQ6VXNlcjExODg3NTQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TobiSchluter",
      "html_url": "https://github.com/TobiSchluter",
      "followers_url": "https://api.github.com/users/TobiSchluter/followers",
      "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}",
      "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions",
      "organizations_url": "https://api.github.com/users/TobiSchluter/orgs",
      "repos_url": "https://api.github.com/users/TobiSchluter/repos",
      "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TobiSchluter/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-03-22T06:30:28Z",
    "updated_at": "2024-07-24T02:55:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nThis is a behavioral change in nlohmann::json 3.11.3 compared to previous versions. Old code of mine started behaving differently.\r\n\r\nOutput of the test program changed from:\r\nnlohmann::json 3.11.2 (and older versions)\r\n{\"x\":1.0,\"y\":2.0,\"z\":3.0}\r\n{\"x\":1.0,\"y\":2.0,\"z\":3.0}\r\n\r\nTo:\r\nnlohmann::json 3.11.3\r\n[1.0,2.0,3.0]\r\n{\"x\":1.0,\"y\":2.0,\"z\":3.0}\r\n\r\nThe issue appears to be related to the lookup of to_json converters. Notice that the old behavior can be triggered by adding the namespace prefix to the `to_json` call in `N::to_json`.\r\n\r\n### Reproduction steps\r\n\r\nRun the code reproduced below. Results will differ between 3.11.2 and 3.11.3.\r\n\r\nIt needs the Eigen library, version 3.4.0. What appears to happen is that the custom vector type is recognized as \"array compatible\" and then output as such.\r\n\r\n### Expected vs. actual results\r\n\r\nThe output should be as in older versions of nlohmann::json:\r\n{\"x\":1.0,\"y\":2.0,\"z\":3.0}\r\n{\"x\":1.0,\"y\":2.0,\"z\":3.0}\r\ninstead we get\r\n[1.0,2.0,3.0]\r\n{\"x\":1.0,\"y\":2.0,\"z\":3.0}\r\ni.e. my serializer is bypassed.\r\n\r\n### Minimal code example\r\n\r\n```C++\r\n#include <Eigen/Dense>\r\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\n// Types for data exchange.\r\nnamespace N {\r\n    struct Vector {\r\n        double x, y, z;\r\n    };\r\n}\r\n\r\nnamespace L {\r\n    using Vec3d = Eigen::Vector3d;\r\n}\r\n\r\nnamespace N {\r\n    // I don't recall why my code goes through this intermediate type, but this is likely related to the change in behavior.\r\n    class Vec3d : public L::Vec3d {\r\n    public:\r\n        explicit Vec3d(const L::Vec3d& v) noexcept\r\n            : L::Vec3d(v)\r\n        {}\r\n        Vec3d(const Vector& v) noexcept\r\n            : L::Vec3d(v.x, v.y, v.z)\r\n        {}\r\n        using L::Vec3d::Vec3d;\r\n    };\r\n    inline Vec3d vToEigen(const Vector& v) noexcept { return Vec3d(v); }\r\n}\r\n\r\nnamespace Eigen {\r\n    inline void to_json(nlohmann::json& j, const L::Vec3d& v) noexcept\r\n    {\r\n        j = { { \"x\", v.x() },{ \"y\", v.y() },{ \"z\", v.z() } };\r\n    }\r\n}\r\n\r\nnamespace N {\r\n    // Lookup of to_json changed.  Previously this function behaved the same as ...\r\n    inline void to_json(nlohmann::json& j, const Vector& v) noexcept {\r\n        to_json(j, vToEigen(v));\r\n    }\r\n    // ... this function\r\n    inline void to_json_force(nlohmann::json& j, const Vector& v) noexcept {\r\n        Eigen::to_json(j, vToEigen(v));\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    N::Vector vec{ 1.0, 2.0, 3.0 };\r\n\r\n    // Both outputs were the same until and including nlohmann::json 3.11.2\r\n    nlohmann::json json;\r\n    N::to_json(json, vec);\r\n    std::cout << json.dump() << \"\\n\";\r\n\r\n    nlohmann::json json_forced;\r\n    N::to_json_force(json_forced, vec);\r\n    std::cout << json_forced.dump() << \"\\n\";\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\nmsvc  2022 (latest) on Windows x86-64 and gcc 13 on Linux-x64\r\n\r\n### Library version\r\n\r\n3.11.3\r\n\r\n### Validation\r\n\r\n- [x] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [x] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4320/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4316",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4316/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4316/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4316/events",
    "html_url": "https://github.com/nlohmann/json/issues/4316",
    "id": 2193188740,
    "node_id": "I_kwDOAKp23M6CuWeE",
    "number": 4316,
    "title": "Derived classes from json class",
    "user": {
      "login": "bradacsa",
      "id": 11284339,
      "node_id": "MDQ6VXNlcjExMjg0MzM5",
      "avatar_url": "https://avatars.githubusercontent.com/u/11284339?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bradacsa",
      "html_url": "https://github.com/bradacsa",
      "followers_url": "https://api.github.com/users/bradacsa/followers",
      "following_url": "https://api.github.com/users/bradacsa/following{/other_user}",
      "gists_url": "https://api.github.com/users/bradacsa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bradacsa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bradacsa/subscriptions",
      "organizations_url": "https://api.github.com/users/bradacsa/orgs",
      "repos_url": "https://api.github.com/users/bradacsa/repos",
      "events_url": "https://api.github.com/users/bradacsa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bradacsa/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 19,
    "created_at": "2024-03-18T20:10:07Z",
    "updated_at": "2024-03-23T12:14:53Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nEqual operator won't work with derived classes.\r\n\r\n### Reproduction steps\r\n\r\n`class Cookie : public nlohmann::json` <- this can handle cookies, chops up cookie strings from headers, etc...\r\n`class JsonFile : public nlohmann::json` <- this is nothing else but the json class joined up with a fstream to make easier to load and save json from file.\r\n\r\n`Cookie A1(\"A1=d=AQABBN3h6GUCECMYqmLClG1pK2uiuaCh0xoFEgABCAEq6mUTZutMb2UBAiAAAAcI3OHoZXSoivI&S=AQAAAqvfHaGFJkLfQ07HNDr2tH0;Expires=Thu, 6 Mar 2025 213629 GMT;\");` <- this will create a json object\r\n\r\nPass it to `JsonFile`\r\n`FileHandlers::JsonFile cJsonFile(cookieJson);`\r\n`cJsonFile[\"Cookies\"][\"A1\"] = A1;` <- this drops error: \"terminate called after throwing an instance of 'nlohmann::json_abi_v3_11_2::detail::type_error' what(): [json.exception.type_error.302] type must be string, but is object\"\r\n\r\n`nlohmann::json::parse(A1.dump())` <- this works, but it seems like a not ideal workaroud\r\n\r\n### Expected vs. actual results\r\n\r\nI expect that as an nlohmann::json derived object it should be passed as\r\n`nlohmann::json x = { {\"one\", 1}, {\"two\", 2} };`\r\n`nlohmann::json y;`\r\n`y[\"thingy\"] = x;`\r\n\r\n### Minimal code example\r\n\r\nIn reproduction steps.\r\n\r\n### Error messages\r\n\r\n```Shell\r\n\"terminate called after throwing an instance of 'nlohmann::json_abi_v3_11_2::detail::type_error' what(): [json.exception.type_error.302] type must be string, but is object\"\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nGCC, Ubuntu\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4316/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4292",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4292/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4292/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4292/events",
    "html_url": "https://github.com/nlohmann/json/issues/4292",
    "id": 2133212623,
    "node_id": "I_kwDOAKp23M5_Jj3P",
    "number": 4292,
    "title": "Rel 3.11.2 -- patch method throw exception which use to work fine in Rel 3.9.1",
    "user": {
      "login": "sujayran",
      "id": 42414820,
      "node_id": "MDQ6VXNlcjQyNDE0ODIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/42414820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sujayran",
      "html_url": "https://github.com/sujayran",
      "followers_url": "https://api.github.com/users/sujayran/followers",
      "following_url": "https://api.github.com/users/sujayran/following{/other_user}",
      "gists_url": "https://api.github.com/users/sujayran/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sujayran/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sujayran/subscriptions",
      "organizations_url": "https://api.github.com/users/sujayran/orgs",
      "repos_url": "https://api.github.com/users/sujayran/repos",
      "events_url": "https://api.github.com/users/sujayran/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sujayran/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2024-02-13T22:14:11Z",
    "updated_at": "2024-02-16T16:30:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nCode sample          std::string valStr = jsonvalprofile.serialize();\r\n                                nlohmann::json profileval = nlohmann::json::parse(valStr);\r\n\r\n                                 std::string valStr1 = jsonvalpatch.serialize();\r\n                                nlohmann::json patchval = nlohmann::json::parse(valStr1);\r\n\r\n                               // patch the original json value with patch object\r\n                               result = profileval.patch(patchval);\r\n\r\n### Reproduction steps\r\n\r\nsample json\r\n`{\r\n    \"capacity\": 50,\r\n    \"locality\": \"test\",\r\n    \"id\": \"94f250ab-f6f5-46fa-8d38-765b5ce9ab6c\",\r\n    \"xyz\": [\r\n        {\r\n            \"lmn\": \"214\",\r\n            \"nnp\": \"001\"\r\n        }\r\n    ],\r\n    \"priority\": 1\r\n}`\r\n\r\n\r\npatch sample`[ {\r\n  \"op\" : \"add\",\r\n  \"path\" : \"/xyz/1/lmn\",\r\n  \"value\" : \"214\"\r\n}, {\r\n  \"op\" : \"add\",\r\n  \"path\" : \"/xyz/1/nnp\",\r\n  \"value\" : \"002\"\r\n} ]`\r\n\r\n\r\nThe patch operation fails with \r\n [json.exception.out_of_range.401] array index 1 is out of range \r\n\r\n\r\n### Expected vs. actual results\r\n\r\nExapected:\r\n\r\npatch to be successful as it use to happen in v3.9.1\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\nstd::string valStr = jsonvalprofile.serialize();\r\n                                nlohmann::json profileval = nlohmann::json::parse(valStr);\r\n\r\n                                 std::string valStr1 = jsonvalpatch.serialize();\r\n                                nlohmann::json patchval = nlohmann::json::parse(valStr1);\r\n\r\n                               // patch the original json value with patch object\r\n                               result = profileval.patch(patchval);\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nThe patch operation fails with \r\n [json.exception.out_of_range.401] array index 1 is out of range\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nclang --version clang version 15.0.7 (Fedora 15.0.7-2.fc37)\r\n\r\n### Library version\r\n\r\nv3.11.2\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4292/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4292/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4289",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4289/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4289/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4289/events",
    "html_url": "https://github.com/nlohmann/json/issues/4289",
    "id": 2123852661,
    "node_id": "I_kwDOAKp23M5-l2t1",
    "number": 4289,
    "title": "ordered json pointer corruption",
    "user": {
      "login": "mishase",
      "id": 43600912,
      "node_id": "MDQ6VXNlcjQzNjAwOTEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/43600912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mishase",
      "html_url": "https://github.com/mishase",
      "followers_url": "https://api.github.com/users/mishase/followers",
      "following_url": "https://api.github.com/users/mishase/following{/other_user}",
      "gists_url": "https://api.github.com/users/mishase/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mishase/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mishase/subscriptions",
      "organizations_url": "https://api.github.com/users/mishase/orgs",
      "repos_url": "https://api.github.com/users/mishase/repos",
      "events_url": "https://api.github.com/users/mishase/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mishase/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374232,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMg==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate",
        "name": "solution: duplicate",
        "color": "cccccc",
        "default": false,
        "description": "the issue is a duplicate; refer to the linked issue instead"
      },
      {
        "id": 395133926,
        "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/documentation",
        "name": "documentation",
        "color": "0e8a16",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2024-02-07T20:44:52Z",
    "updated_at": "2024-02-09T08:41:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nWhen using ordered json with `push_back` call, pointer to previous structure gets corrupted\n\n### Reproduction steps\n\nUse the code bellow with `nlohmann::ordered_json` to get corrupted pointer\n\n### Expected vs. actual results\n\nExpected output (same code, without ordered json):\r\n```\r\nstring\r\nstring\r\n{\"a\":{\"b\":\"test\"},\"c\":[1]}\r\n```\r\n\r\nActual output (corrupted pointer):\r\n```\r\nstring\r\nnumber\r\n{\"a\":{\"b\":\"test\"},\"c\":[1]}\r\n```\n\n### Minimal code example\n\n```Shell\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\nusing json = nlohmann::ordered_json; // use nlohmann::json to get correct result\r\n\r\nint main()\r\n{\r\n\tauto obj = json::parse(\"{\\\"a\\\": {\\\"b\\\": \\\"test\\\"}}\");\r\n\t\t\r\n\tauto& ref = obj[\"a\"][\"b\"];\r\n\tstd::cout << ref.type_name() << '\\n'; // string\r\n\r\n\tobj[\"c\"] = json::array();\r\n\tobj[\"c\"].push_back(1);\r\n\r\n\tstd::cout << ref.type_name() << '\\n'; // expected string, got number\r\n\r\n\tstd::cout << obj.dump(); // valid result, {\"a\":{\"b\":\"test\"},\"c\":[1]}\r\n}\n```\n\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nTested on ARM Windows and X64 Windows in Debug and Release modes\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4289/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4289/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4285",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4285/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4285/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4285/events",
    "html_url": "https://github.com/nlohmann/json/issues/4285",
    "id": 2116256416,
    "node_id": "I_kwDOAKp23M5-I4Kg",
    "number": 4285,
    "title": "Incorrect floating point parsing",
    "user": {
      "login": "riasat",
      "id": 4945422,
      "node_id": "MDQ6VXNlcjQ5NDU0MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4945422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/riasat",
      "html_url": "https://github.com/riasat",
      "followers_url": "https://api.github.com/users/riasat/followers",
      "following_url": "https://api.github.com/users/riasat/following{/other_user}",
      "gists_url": "https://api.github.com/users/riasat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/riasat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/riasat/subscriptions",
      "organizations_url": "https://api.github.com/users/riasat/orgs",
      "repos_url": "https://api.github.com/users/riasat/repos",
      "events_url": "https://api.github.com/users/riasat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/riasat/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2024-02-03T05:35:35Z",
    "updated_at": "2024-02-03T07:26:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI have a sample json file which has an array of array of array of float weights.\r\n`{\"input_size\": 3, \"layer_sizes\": [2, 2], \"weights\": [[[0.50, 0.50, 0.50], [0.30, 0.30, 0.30]],[[0.40, 0.40, 0.40], [0.20, 0.20, 0.20]]]}`\r\nWhen I parse json the some of the floating points value show with less precision such as 0.30 is parsed as 0.299999999999\n\n### Reproduction steps\n\n`        std::ifstream file(fileName);\r\n        nlohmann::json data = nlohmann::json::parse(file);\r\n\r\n        int inputSize = data[\"input_size\"];\r\n        std::vector<int> layerSizes = data[\"layer_sizes\"];\r\n        auto weights = data[\"weights\"];`\n\n### Expected vs. actual results\n\nexpected is to have .30 instead of parsing floating point as .29999999999.\n\n### Minimal code example\n\n```Shell\n`       std::ifstream file(fileName);\r\n        nlohmann::json data = nlohmann::json::parse(file);\r\n\r\n        int inputSize = data[\"input_size\"];\r\n        std::vector<int> layerSizes = data[\"layer_sizes\"];\r\n        auto weights = data[\"weights\"];`\r\njson file:\r\n`{\"input_size\": 3, \"layer_sizes\": [2, 2], \"weights\": [[[0.50, 0.50, 0.50], [0.30, 0.30, 0.30]],[[0.40, 0.40, 0.40], [0.20, 0.20, 0.20]]]}`\n```\n\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nVS2017\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4285/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4285/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4279",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4279/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4279/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4279/events",
    "html_url": "https://github.com/nlohmann/json/issues/4279",
    "id": 2105745613,
    "node_id": "I_kwDOAKp23M59gyDN",
    "number": 4279,
    "title": "Program crashes with ordered_json, but works fine with json",
    "user": {
      "login": "vircon32",
      "id": 34624915,
      "node_id": "MDQ6VXNlcjM0NjI0OTE1",
      "avatar_url": "https://avatars.githubusercontent.com/u/34624915?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vircon32",
      "html_url": "https://github.com/vircon32",
      "followers_url": "https://api.github.com/users/vircon32/followers",
      "following_url": "https://api.github.com/users/vircon32/following{/other_user}",
      "gists_url": "https://api.github.com/users/vircon32/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vircon32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vircon32/subscriptions",
      "organizations_url": "https://api.github.com/users/vircon32/orgs",
      "repos_url": "https://api.github.com/users/vircon32/repos",
      "events_url": "https://api.github.com/users/vircon32/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vircon32/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 395133926,
        "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/documentation",
        "name": "documentation",
        "color": "0e8a16",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2024-01-29T15:23:07Z",
    "updated_at": "2024-01-29T17:00:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nThe same program (code in case 1) produces the expected result using regular nlohmann::json, but crashes using nlohmann::ordered_json. A simple variant of this program (code in case 2) produces the expected result using json, but a different result with ordered_json.\r\n\r\n### Reproduction steps\r\n\r\nConsider this input json file (\"test.json\"):\r\n```\r\n{\r\n  \"number\": 14,\r\n  \"structure\": {\r\n    \"field1\": 1,\r\n    \"field2\": 2\r\n  }\r\n}\r\n```\r\n\r\nThe 2 small programs listed into \"Minimal code example\" will work fine and produce the expected results when using my_json = nlohmann::json. However, if we change the type to nlohmann::ordered_json, the first program will crash and the second program will not add new_field as expected.\r\n\r\n### Expected vs. actual results\r\n\r\nExpected result for case 1:\r\n```\r\n{\r\n  \"number\": 14,\r\n  \"my_structures\": {\r\n    \"structure\": {\r\n      \"field1\": 1\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nExpected result for case 2:\r\n```\r\n{\r\n  \"number\": 14,\r\n  \"my_structures\": {\r\n    \"structure\": {\r\n      \"field1\": 1,\r\n      \"field2\": 2,\r\n      \"new_field\": \"new\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\n// CASE 1: removing an old field\r\nusing my_json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n    std::ifstream InputStream( \"test.json\" );\r\n    my_json Root = my_json::parse( InputStream );\r\n\r\n    // create new level at root\r\n    my_json& MyStructures = Root[ \"my_structures\" ];\r\n        \r\n    // move structure into that new level\r\n    MyStructures[ \"structure\" ] = Root[ \"structure\" ];\r\n    Root.erase( \"structure\" );\r\n\r\n    // add new structure field\r\n    MyStructures[ \"structure\" ].erase( \"field2\" );\r\n    \r\n    std::ofstream OutputStream( \"converted.json\" );\r\n    OutputStream << std::setw( 2 ) << Root << std::endl;    \r\n}\r\n\r\n// CASE 2: adding a new field\r\nusing my_json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n    std::ifstream InputStream( \"test.json\" );\r\n    my_json Root = my_json::parse( InputStream );\r\n\r\n    // create new level at root\r\n    my_json& MyStructures = Root[ \"my_structures\" ];\r\n        \r\n    // move structure into that new level\r\n    MyStructures[ \"structure\" ] = Root[ \"structure\" ];\r\n    Root.erase( \"structure\" );\r\n\r\n    // add new structure field\r\n    MyStructures[ \"structure\" ][ \"new_field\" ] = \"new\";\r\n    \r\n    std::ofstream OutputStream( \"converted.json\" );\r\n    OutputStream << std::setw( 2 ) << Root << std::endl;    \r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nI am using the library as a single include, and for the crashing case an exception is being thrown at this point (line 21878):\r\n\r\n  private:\r\n    template < typename KeyType, detail::enable_if_t <\r\n                   detail::has_erase_with_key_type<basic_json_t, KeyType>::value, int > = 0 >\r\n    size_type erase_internal(KeyType && key)\r\n    {\r\n        // this erase only works for objects\r\n        if (JSON_HEDLEY_UNLIKELY(!is_object()))\r\n        {\r\n    ----->   JSON_THROW(type_error::create(307, detail::concat(\"cannot use erase() with \", type_name()), this));\r\n        }\r\n\r\n        return m_data.m_value.object->erase(std::forward<KeyType>(key));\r\n    }\r\n\r\nThe exception message is: [json.exception.type_error.307] cannot use erase() with null\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nWindows 10, Microsoft Visual Studio Professional 2019 Version 16.11.24\r\n\r\n### Library version\r\n\r\nGithub at commit 7efe875495a3ed7d805ddbb01af0c7725f50c88b\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4279/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4279/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4272",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4272/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4272/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4272/events",
    "html_url": "https://github.com/nlohmann/json/issues/4272",
    "id": 2095319157,
    "node_id": "I_kwDOAKp23M585Ah1",
    "number": 4272,
    "title": "Parsing the unicode string got the wrong result",
    "user": {
      "login": "pigLoveRabbit520",
      "id": 16663435,
      "node_id": "MDQ6VXNlcjE2NjYzNDM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/16663435?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pigLoveRabbit520",
      "html_url": "https://github.com/pigLoveRabbit520",
      "followers_url": "https://api.github.com/users/pigLoveRabbit520/followers",
      "following_url": "https://api.github.com/users/pigLoveRabbit520/following{/other_user}",
      "gists_url": "https://api.github.com/users/pigLoveRabbit520/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pigLoveRabbit520/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pigLoveRabbit520/subscriptions",
      "organizations_url": "https://api.github.com/users/pigLoveRabbit520/orgs",
      "repos_url": "https://api.github.com/users/pigLoveRabbit520/repos",
      "events_url": "https://api.github.com/users/pigLoveRabbit520/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pigLoveRabbit520/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374234,
        "node_id": "MDU6TGFiZWw0NjM3NDIzNA==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20invalid",
        "name": "solution: invalid",
        "color": "e6e6e6",
        "default": false,
        "description": "the issue is not related to the library"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2024-01-23T06:17:57Z",
    "updated_at": "2024-01-29T17:01:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nunicode string \"\\u7ec4\" should get \"组\" but got \"缁\"\n\n### Reproduction steps\n\ncopy latest `json.hpp` to vs C++ project and write the code below.\n\n### Expected vs. actual results\n\nshould get `组` but got\r\n`缁`\r\n![image](https://github.com/nlohmann/json/assets/16663435/dac292bb-ec2d-4988-8b2a-8f5d7c8c8b67)\r\n\n\n### Minimal code example\n\n```Shell\n#include <fstream>\r\n#include <iostream>\r\n#include \"json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nint main()\r\n{\r\n\tstd::ifstream f(\"data.json\");\r\n\tjson data = json::parse(f);\r\n\tstd::string name = data.at(\"name\");\r\n\tstd::cout << name << std::endl;\r\n\treturn 0;\r\n}\r\n```\r\n\r\njson data\r\n```\r\n{\r\n  \"name\" : \"\\u7ec4\"\r\n}\r\n```\n```\n\n\n### Error messages\n\n```Shell\nno error\n```\n\n\n### Compiler and operating system\n\nvs 2022 and windows 11 \n\n### Library version\n\nversion 3.11.3\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4272/timeline",
    "performed_via_github_app": null,
    "state_reason": "reopened"
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4271",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4271/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4271/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4271/events",
    "html_url": "https://github.com/nlohmann/json/issues/4271",
    "id": 2091536652,
    "node_id": "I_kwDOAKp23M58qlEM",
    "number": 4271,
    "title": "to_json(std::filesystem::path) can create invalid UTF-8 chars on windows",
    "user": {
      "login": "MHebes",
      "id": 8306042,
      "node_id": "MDQ6VXNlcjgzMDYwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8306042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MHebes",
      "html_url": "https://github.com/MHebes",
      "followers_url": "https://api.github.com/users/MHebes/followers",
      "following_url": "https://api.github.com/users/MHebes/following{/other_user}",
      "gists_url": "https://api.github.com/users/MHebes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MHebes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MHebes/subscriptions",
      "organizations_url": "https://api.github.com/users/MHebes/orgs",
      "repos_url": "https://api.github.com/users/MHebes/repos",
      "events_url": "https://api.github.com/users/MHebes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MHebes/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2024-01-19T22:30:05Z",
    "updated_at": "2024-06-01T04:33:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nThis conversion function:\r\n\r\nhttps://github.com/nlohmann/json/blob/7efe875495a3ed7d805ddbb01af0c7725f50c88b/include/nlohmann/detail/conversions/to_json.hpp#L416C1-L420C2\r\n\r\n```c++\r\ntemplate<typename BasicJsonType>\r\ninline void to_json(BasicJsonType& j, const std_fs::path& p)\r\n{\r\n    j = p.string();\r\n}\r\n```\r\n\r\nuses `p.string()`, which does not give a UTF-8-encoded string on windows (in some cases, maybe?). Trying to `dump()` the resultant JSON throws a \"invalid UTF-8 byte\" exception.\r\n\r\n### Reproduction steps\r\n\r\nConvert a `std::filesystem::path`, which contains a unicode \"Right Single Quotation Mark\" character (U+2019), to a `json` implicitly or with `to_json`.\r\n\r\nInspect the new `json (string_t)`'s bytes, either by `dump()`ing, or converting to BSON.\r\n\r\n### Expected vs. actual results\r\n\r\nExpected: \"Strings are stored in UTF-8 encoding.\" per https://json.nlohmann.me/api/basic_json/string_t/\r\n\r\nActual: The string gets converted by `std::filesystem::path::string()`, which appears to convert it to [Windows-1252 encoding](https://en.wikipedia.org/wiki/Windows-1252). Its bytes end up as `\\x92` rather than `\\xe2\\x80\\x99`.\r\n\r\n### Minimal code example\r\n\r\n```c++\r\n#include <filesystem>\r\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\nint main() {\r\n  try {\r\n    wchar_t wide_unicode_right_quote[2] = {0x2019, 0};  // came from a directory_iterator in reality\r\n    nlohmann::json apost = std::filesystem::path(wide_unicode_right_quote);\r\n    std::cout << apost << std::endl;\r\n    return 0;\r\n  } catch (const std::exception& e) {\r\n    std::cerr << e.what() << std::endl;\r\n    return 1;\r\n  }\r\n}\r\n```\r\n\r\nWorkaround I'm using is to use `WideCharToMultiByte` + `.native()` to get the string in UTF-8 before passing to nlohmann:\r\n\r\n```c++\r\ninline std::string Narrow(std::wstring_view wstr) {\r\n  if (wstr.empty()) return {};\r\n  int len = ::WideCharToMultiByte(CP_UTF8, 0, &wstr[0], wstr.size(), nullptr, 0, nullptr, nullptr);\r\n  std::string out(len, 0);\r\n  ::WideCharToMultiByte(CP_UTF8, 0, &wstr[0], wstr.size(), &out[0], len, nullptr, nullptr);\r\n  return out;\r\n}\r\n\r\nint main() {\r\n  try {\r\n    wchar_t wide_unicode_right_quote[2] = {0x2019, 0};  // came from a directory_iterator in reality\r\n    nlohmann::json apost = Narrow(std::filesystem::path(wide_unicode_right_quote).native());\r\n    std::cout << apost << std::endl;\r\n    return 0;\r\n  } catch (const std::exception& e) {\r\n    std::cerr << e.what() << std::endl;\r\n    return 1;\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\n\"[json.exception.type_error.316] invalid UTF-8 byte at index 0: 0x92\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nMSVC 2022 Professional, C++ 20\r\n\r\n### Library version\r\n\r\ndevelop - a259ecc\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4271/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4261",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4261/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4261/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4261/events",
    "html_url": "https://github.com/nlohmann/json/issues/4261",
    "id": 2066213076,
    "node_id": "I_kwDOAKp23M57J-jU",
    "number": 4261,
    "title": "Cannot use std::format on nholman::json objects",
    "user": {
      "login": "AA1999",
      "id": 14325650,
      "node_id": "MDQ6VXNlcjE0MzI1NjUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/14325650?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AA1999",
      "html_url": "https://github.com/AA1999",
      "followers_url": "https://api.github.com/users/AA1999/followers",
      "following_url": "https://api.github.com/users/AA1999/following{/other_user}",
      "gists_url": "https://api.github.com/users/AA1999/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AA1999/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AA1999/subscriptions",
      "organizations_url": "https://api.github.com/users/AA1999/orgs",
      "repos_url": "https://api.github.com/users/AA1999/repos",
      "events_url": "https://api.github.com/users/AA1999/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AA1999/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2024-01-04T19:24:18Z",
    "updated_at": "2024-03-07T13:58:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI've opened a json file and parsed it with this library and I wrote this:\r\n\r\n```cpp\r\nstd::string connection_config = std::format(\"host={} port={} dbname={} user={} password='{}'\", db_config.at(\"host\"),\r\n\t\t\t\t\t\t\t\t\t\t\t\tdb_config.at(\"port\"), db_config.at(\"dbname\"), db_config.at(\"user\"),\r\n\t\t\t\t\t\t\t\t\t\t\t\tdb_config.at(\"password\"));\r\n```\r\nHowever I get this error:\r\n```cpp\r\nIn template: call to deleted constructor of 'typename format_context::formatter_type<basic_json<std::map, std::vector, string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer, vector<unsigned char, allocator<unsigned char>>>>' (aka 'formatter<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char>>>, char>')\r\n```\r\n\r\nNote of interest: **this only happens with std::format, fmt::format is fine**\n\n### Reproduction steps\n\nOpen a file with std::ifstream\r\nPass the file object to nlohmann::json\r\nParse the json file\r\nTry to format it using std::format\n\n### Expected vs. actual results\n\nExpected result: The json array being formatted properly\r\nActual result: error\n\n### Minimal code example\n\n```Shell\nauto db_config_file = std::ifstream {\"~/.reacatio/database.json\"};\r\n\r\n\tjson db_config = json::parse(db_config_file);\r\n\tdb_config_file.close();\r\n\r\n\tstd::string connection_config = std::format(\"host={} port={} dbname={} user={} password='{}'\", db_config.at(\"host\"),\r\n\t\t\t\t\t\t\t\t\t\t\t\tdb_config.at(\"port\"), db_config.at(\"dbname\"), db_config.at(\"user\"),\r\n\t\t\t\t\t\t\t\t\t\t\t\tdb_config.at(\"password\"));\n```\n\n\n### Error messages\n\n```Shell\nIn template: call to deleted constructor of 'typename format_context::formatter_type<basic_json<std::map, std::vector, string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer, vector<unsigned char, allocator<unsigned char>>>>' (aka 'formatter<nlohmann::basic_json<std::map, std::vector, std::string, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char>>>, char>')\n```\n\n\n### Compiler and operating system\n\nclang 17, linux\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4261/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4260",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4260/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4260/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4260/events",
    "html_url": "https://github.com/nlohmann/json/issues/4260",
    "id": 2066161769,
    "node_id": "I_kwDOAKp23M57JyBp",
    "number": 4260,
    "title": "Newer serialization macros not listed in README",
    "user": {
      "login": "gregmarr",
      "id": 8569738,
      "node_id": "MDQ6VXNlcjg1Njk3Mzg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8569738?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gregmarr",
      "html_url": "https://github.com/gregmarr",
      "followers_url": "https://api.github.com/users/gregmarr/followers",
      "following_url": "https://api.github.com/users/gregmarr/following{/other_user}",
      "gists_url": "https://api.github.com/users/gregmarr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gregmarr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gregmarr/subscriptions",
      "organizations_url": "https://api.github.com/users/gregmarr/orgs",
      "repos_url": "https://api.github.com/users/gregmarr/repos",
      "events_url": "https://api.github.com/users/gregmarr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gregmarr/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-01-04T18:43:20Z",
    "updated_at": "2024-01-04T18:43:33Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nAs described in [#4235 ](https://github.com/nlohmann/json/discussions/4235#discussioncomment-7777297), the [README](https://github.com/nlohmann/json/blob/a259ecc51e1951e12f757ce17db958e9881e9c6c/README.md?plain=1#L818) only lists `NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE` and `NLOHMANN_DEFINE_TYPE_INTRUSIVE`.  There are now [6 macros](https://github.com/nlohmann/json/blob/a259ecc51e1951e12f757ce17db958e9881e9c6c/include/nlohmann/detail/macro_scope.hpp#L398).\r\n\r\nThere is documentation for these other 4, so it could just link to the documentation for more info on the other 4, rather than expanding the examples to cover all of them.\r\n\r\nAlso, only the two mentioned in the readme have `@brief macro` tags, rather than all 6, and the order of the intrusive versions doesn't match the order of the non-intrusive versions.\r\n\r\n\r\n### Reproduction steps\r\n\r\nn/a\r\n\r\n### Expected vs. actual results\r\n\r\nn/a\r\n\r\n### Minimal code example\r\n\r\n_No response_\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\nn/a\r\n\r\n### Library version\r\n\r\na259ecc51e1951e12f757ce17db958e9881e9c6c\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4260/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4260/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4253",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4253/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4253/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4253/events",
    "html_url": "https://github.com/nlohmann/json/issues/4253",
    "id": 2060306764,
    "node_id": "I_kwDOAKp23M56zclM",
    "number": 4253,
    "title": "Parsing simple zeroes throws type exception",
    "user": {
      "login": "tksharpless",
      "id": 8539366,
      "node_id": "MDQ6VXNlcjg1MzkzNjY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8539366?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tksharpless",
      "html_url": "https://github.com/tksharpless",
      "followers_url": "https://api.github.com/users/tksharpless/followers",
      "following_url": "https://api.github.com/users/tksharpless/following{/other_user}",
      "gists_url": "https://api.github.com/users/tksharpless/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tksharpless/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tksharpless/subscriptions",
      "organizations_url": "https://api.github.com/users/tksharpless/orgs",
      "repos_url": "https://api.github.com/users/tksharpless/repos",
      "events_url": "https://api.github.com/users/tksharpless/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tksharpless/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-12-29T18:16:50Z",
    "updated_at": "2024-01-01T20:15:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nNot strictly a bug, but not ideal.  Many apps print a simple '0' for all zero numbers, regardless of type.  nlohmann-json parses those as unsigned int and throws an exception, for example in value(var, 0.0).  There should be an option to promote 0 to float in this case; perhaps even for other numbers that look like an int.  Or maybe there is such an option and I don't know it?\n\n### Reproduction steps\n\nparse a Json file (not written by nlohmann, of course) that contains simple integer strings as values that you know should be float, using value(var, 0.0).\n\n### Expected vs. actual results\n\nexpect automatic promotion to double or whatever I assign the value to\r\nget an exception complaining of incompatible types\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nMSVCC 2022 Win10\n\n### Library version\n\n3.9.1\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4253/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4253/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4247",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4247/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4247/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4247/events",
    "html_url": "https://github.com/nlohmann/json/issues/4247",
    "id": 2052131497,
    "node_id": "I_kwDOAKp23M56UQqp",
    "number": 4247,
    "title": "NLOHMANN_JSON_FROM* macros not comptaible with non-default-constructible types",
    "user": {
      "login": "RAnders00",
      "id": 1629196,
      "node_id": "MDQ6VXNlcjE2MjkxOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1629196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RAnders00",
      "html_url": "https://github.com/RAnders00",
      "followers_url": "https://api.github.com/users/RAnders00/followers",
      "following_url": "https://api.github.com/users/RAnders00/following{/other_user}",
      "gists_url": "https://api.github.com/users/RAnders00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RAnders00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RAnders00/subscriptions",
      "organizations_url": "https://api.github.com/users/RAnders00/orgs",
      "repos_url": "https://api.github.com/users/RAnders00/repos",
      "events_url": "https://api.github.com/users/RAnders00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RAnders00/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2023-12-21T10:14:53Z",
    "updated_at": "2023-12-29T22:39:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nThe family of `NLOHMANN_JSON_FROM*` macros all seem to be incompatible with any kind of type that does/cannot have a default constructor.\r\n\r\n### Reproduction steps\r\n\r\nSee code example below, including Godbolt link.\r\n\r\n### Expected vs. actual results\r\n\r\nExpected result: There is a macro available that can generate a `from_json` function that compiles successfully.\r\nActual result: Template compile error.\r\n\r\n### Minimal code example\r\n\r\nGiven the following simple class:\r\n\r\n```cpp\r\nclass NonDefaultConstructible {\r\npublic:\r\n  explicit NonDefaultConstructible(std::string inner_value)\r\n      : inner_value{std::move(inner_value)} {\r\n            // e.g. validate the value, or it could be transformed in the\r\n            // initializer list above\r\n        };\r\n\r\n  [[nodiscard]] std::string get_inner_value() const {\r\n    return this->inner_value;\r\n  }\r\n\r\nprivate:\r\n  std::string inner_value;\r\n};\r\n```\r\n\r\nFrom the documentation I gather that the only way to json-convert this type is to specialize `adl_serializer` for it:\r\n\r\n```cpp\r\nNLOHMANN_JSON_NAMESPACE_BEGIN\r\ntemplate <> struct adl_serializer<NonDefaultConstructible> {\r\n  static void to_json(json &json_value, const NonDefaultConstructible &data) {\r\n    json_value = data.get_inner_value();\r\n  }\r\n\r\n  static NonDefaultConstructible from_json(const json &json_value) {\r\n    return NonDefaultConstructible{json_value.template get<std::string>()};\r\n  }\r\n};\r\nNLOHMANN_JSON_NAMESPACE_END\r\n```\r\n\r\nThis works just fine, but now structs containing this type cannot be json-converted using the macros anymore:\r\n\r\n```cpp\r\nstruct SimpleStruct {\r\n  uint64_t first_value;\r\n  NonDefaultConstructible second_value;\r\n  std::string third_value;\r\n};\r\n\r\nNLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(SimpleStruct, first_value, second_value,\r\n                                   third_value)\r\n```\r\n\r\nGodbolt link: https://godbolt.org/z/q8oxq61sx (gcc trunk, nlohmann_json trunk)\r\n\r\n### Error messages\r\n\r\n```\r\nIn file included from <source>:1:\r\n<source>: In function 'void from_json(const nlohmann::json_v3_11_1::json&, SimpleStruct&)':\r\n<source>:37:1: error: no matching function for call to 'nlohmann::json_v3_11_1::basic_json<>::get_to(NonDefaultConstructible&) const'\r\n   37 | NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(SimpleStruct, first_value, second_value,\r\n      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:20754:17: note: candidate: 'template<class ValueType, typename std::enable_if<((! nlohmann::json_v3_11_1::detail::is_basic_json<BasicJsonType>::value) && nlohmann::json_v3_11_1::detail::has_from_json<nlohmann::json_v3_11_1::basic_json<>, ValueType, void>::value), int>::type <anonymous> > ValueType& nlohmann::json_v3_11_1::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::get_to(ValueType&) const [with typename std::enable_if<((! nlohmann::json_v3_11_1::detail::is_basic_json<BasicJsonType>::value) && nlohmann::json_v3_11_1::detail::has_from_json<nlohmann::json_v3_11_1::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, ValueType>::value), int>::type <anonymous> = ValueType; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_v3_11_1::adl_serializer; BinaryType = std::vector<unsigned char>]'\r\n20754 |     ValueType & get_to(ValueType& v) const noexcept(noexcept(\r\n      |                 ^~~~~~\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:20754:17: note:   template argument deduction/substitution failed:\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:20753:28: error: no type named 'type' in 'struct std::enable_if<false, int>'\r\n20753 |                    int > = 0 >\r\n      |                            ^\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:20767:17: note: candidate: 'template<class ValueType, typename std::enable_if<nlohmann::json_v3_11_1::detail::is_basic_json<BasicJsonType>::value, int>::type <anonymous> > ValueType& nlohmann::json_v3_11_1::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::get_to(ValueType&) const [with typename std::enable_if<nlohmann::json_v3_11_1::detail::is_basic_json<BasicJsonType>::value, int>::type <anonymous> = ValueType; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_v3_11_1::adl_serializer; BinaryType = std::vector<unsigned char>]'\r\n20767 |     ValueType & get_to(ValueType& v) const\r\n      |                 ^~~~~~\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:20767:17: note:   template argument deduction/substitution failed:\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:20766:25: error: no type named 'type' in 'struct std::enable_if<false, int>'\r\n20766 |                  int> = 0>\r\n      |                         ^\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:20778:11: note: candidate: 'template<class T, long unsigned int N, class Array, typename std::enable_if<nlohmann::json_v3_11_1::detail::has_from_json<nlohmann::json_v3_11_1::basic_json<>, Array, void>::value, int>::type <anonymous> > Array nlohmann::json_v3_11_1::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::get_to(T (&)[N]) const [with long unsigned int N = T; Array = N; typename std::enable_if<nlohmann::json_v3_11_1::detail::has_from_json<nlohmann::json_v3_11_1::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, Array>::value, int>::type <anonymous> = Array; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_v3_11_1::adl_serializer; BinaryType = std::vector<unsigned char>]'\r\n20778 |     Array get_to(T (&v)[N]) const // NOLINT(cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays)\r\n      |           ^~~~~~\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:20778:11: note:   template argument deduction/substitution failed:\r\n<source>:37:1: note:   mismatched types 'T [N]' and 'NonDefaultConstructible'\r\n   37 | NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(SimpleStruct, first_value, second_value,\r\n      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n```\r\n\r\n### Compiler and operating system\r\n\r\ng++ 11.4, g++ trunk, clang++ 11.0.1, clang trunk, OS: ubuntu 22.04/godbolt\r\n\r\n### Library version\r\n\r\n3.11.3\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4247/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4247/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4242",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4242/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4242/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4242/events",
    "html_url": "https://github.com/nlohmann/json/issues/4242",
    "id": 2037139990,
    "node_id": "I_kwDOAKp23M55bEoW",
    "number": 4242,
    "title": "stack overflow while fuzzing parse-cbor-fuzzer",
    "user": {
      "login": "3iang",
      "id": 153499189,
      "node_id": "U_kgDOCSY2NQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/153499189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/3iang",
      "html_url": "https://github.com/3iang",
      "followers_url": "https://api.github.com/users/3iang/followers",
      "following_url": "https://api.github.com/users/3iang/following{/other_user}",
      "gists_url": "https://api.github.com/users/3iang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/3iang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/3iang/subscriptions",
      "organizations_url": "https://api.github.com/users/3iang/orgs",
      "repos_url": "https://api.github.com/users/3iang/repos",
      "events_url": "https://api.github.com/users/3iang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/3iang/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-12-12T07:22:01Z",
    "updated_at": "2023-12-12T21:48:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\n\r\n[poc.json](https://github.com/nlohmann/json/files/13644931/poc.json)\r\n~~~\r\n(venv) [AFL++ 5e685e9c5417] /src/json # cat ./dup-co-2-7qye3d1b/jsoncxx2/crashes/id:000000,sig:11,src:002057,time:815305,execs:11664684,op:havoc,rep:12 | ./json-3.11.3/tests/parse_cbor_fuzzer clear\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==66107==ERROR: AddressSanitizer: stack-overflow on address 0x7ffd3b5277f8 (pc 0x563deef9c22a bp 0x7ffd3b528020 sp 0x7ffd3b5277f0 T0)\r\n    #0 0x563deef9c22a in operator new(unsigned long) (/src/json/json-3.11.3/tests/parse_cbor_fuzzer+0xe322a) (BuildId: ec0a1fe618cefe6fec0b3f9581932abdb6706b8b)\r\n    #1 0x563deefb2d07 in __gnu_cxx::new_allocator<nlohmann::json_abi_v3_11_3::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::json_abi_v3_11_3::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char> >, void> >::allocate(unsigned long, void const*) /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/ext/new_allocator.h:127:27\r\n    #2 0x563deefb2d07 in std::allocator_traits<std::allocator<nlohmann::json_abi_v3_11_3::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::json_abi_v3_11_3::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char> >, void> > >::allocate(std::allocator<nlohmann::json_abi_v3_11_3::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::json_abi_v3_11_3::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char> >, void> >&, unsigned long) /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/alloc_traits.h:464:20\r\n    #3 0x563deefb2d07 in std::_Vector_base<nlohmann::json_abi_v3_11_3::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::json_abi_v3_11_3::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char> >, void>, std::allocator<nlohmann::json_abi_v3_11_3::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::json_abi_v3_11_3::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char> >, void> > >::_M_allocate(unsigned long) /usr/lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:346:20\r\n...\r\n~~~\n\n### Reproduction steps\n\ncat poc.json | ./parse_cbor_fuzzer\n\n### Expected vs. actual results\n\nExpected no stack overflow.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nafl-clang-fast++\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4242/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4242/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4239",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4239/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4239/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4239/events",
    "html_url": "https://github.com/nlohmann/json/issues/4239",
    "id": 2034632709,
    "node_id": "I_kwDOAKp23M55RggF",
    "number": 4239,
    "title": "Exception when trying to insert my json object inside json file",
    "user": {
      "login": "hern0s-dev",
      "id": 52481203,
      "node_id": "MDQ6VXNlcjUyNDgxMjAz",
      "avatar_url": "https://avatars.githubusercontent.com/u/52481203?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hern0s-dev",
      "html_url": "https://github.com/hern0s-dev",
      "followers_url": "https://api.github.com/users/hern0s-dev/followers",
      "following_url": "https://api.github.com/users/hern0s-dev/following{/other_user}",
      "gists_url": "https://api.github.com/users/hern0s-dev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hern0s-dev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hern0s-dev/subscriptions",
      "organizations_url": "https://api.github.com/users/hern0s-dev/orgs",
      "repos_url": "https://api.github.com/users/hern0s-dev/repos",
      "events_url": "https://api.github.com/users/hern0s-dev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hern0s-dev/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 558418062,
        "node_id": "MDU6TGFiZWw1NTg0MTgwNjI=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20proposed%20fix",
        "name": "solution: proposed fix",
        "color": "00bb00",
        "default": false,
        "description": "a fix for the issue has been proposed and waits for confirmation"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2023-12-11T00:58:21Z",
    "updated_at": "2023-12-14T08:26:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nI'm trying to append my json object to inside a json file.\r\n\r\n### Reproduction steps\r\n\r\nBug occurs when trying to .insert()\r\n\r\n### Expected vs. actual results\r\n\r\nThis is how my json file looks like\r\n\r\n`{\r\n    \"Base3\": [\r\n        {\r\n            \"Name\": \"Base3\",\r\n            \"X\": 69,\r\n            \"Y\": 999,\r\n            \"Z\": 999\r\n        }\r\n    ],\r\n    \"Base4\": [\r\n        {\r\n            \"Name\": \"Base4\",\r\n            \"X\": 69,\r\n            \"Y\": 999,\r\n            \"Z\": 999\r\n        }\r\n    ],\r\n    \"Base5\": [\r\n        {\r\n            \"Name\": \"Base5\",\r\n            \"X\": 69,\r\n            \"Y\": 999,\r\n            \"Z\": 999\r\n        }\r\n    ]\r\n}`\r\n\r\nWhat I expected ;\r\n\r\n`{\r\n    \"Base3\": [\r\n        {\r\n            \"Name\": \"Base3\",\r\n            \"X\": 69,\r\n            \"Y\": 999,\r\n            \"Z\": 999\r\n        }\r\n    ],\r\n    \"Base4\": [\r\n        {\r\n            \"Name\": \"Base4\",\r\n            \"X\": 69,\r\n            \"Y\": 999,\r\n            \"Z\": 999\r\n        }\r\n    ],\r\n    \"Base5\": [\r\n        {\r\n            \"Name\": \"Base5\",\r\n            \"X\": 69,\r\n            \"Y\": 999,\r\n            \"Z\": 999\r\n        }\r\n    ],\r\n    \"Base6\": [\r\n        {\r\n            \"Name\": \"Base6\",\r\n            \"X\": 22,\r\n            \"Y\": 33,\r\n            \"Z\": 11\r\n        }\r\n    ]\r\n}`\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\nusing Json = nlohmann::json;\r\nint main()\r\n{\r\n\r\n\tJson Data;\r\n\tstd::string Name = \"Base6\";\r\n\tfloat xx = 22;\r\n\tfloat yy = 33;\r\n\tfloat zz = 11;\r\n\r\n\t\r\n\tData[Name][\"Name\"] = Name;\r\n\tData[Name][\"X\"] = xx;\r\n\tData[Name][\"Y\"] = yy;\r\n\tData[Name][\"Z\"] = zz;\r\n\r\n\tstd::fstream filewrite;\r\n\tfilewrite.open(\"coords.json\", std::ios::out | std::ios::in);\r\n\t\r\n\tJson existingjson = Json::parse(filewrite);\r\n\tfilewrite.seekg(0, filewrite.beg);\r\n\texistingjson.insert(existingjson.begin(), Data);\r\n\tfilewrite << existingjson;\r\n\t\r\n\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nUnhandled exception at 0x00007FF8101F565C in JSON.exe: Microsoft C++ exception: nlohmann::json_abi_v3_11_2::detail::type_error at memory location 0x000000000014FC80.\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nMSVC 14.38 / WINDOWS11\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4239/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4234",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4234/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4234/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4234/events",
    "html_url": "https://github.com/nlohmann/json/issues/4234",
    "id": 2027865714,
    "node_id": "I_kwDOAKp23M543sZy",
    "number": 4234,
    "title": "very accidental: SIGABRT when parsing json string with allow_exceptions=false ",
    "user": {
      "login": "Johnny-Martin",
      "id": 13740871,
      "node_id": "MDQ6VXNlcjEzNzQwODcx",
      "avatar_url": "https://avatars.githubusercontent.com/u/13740871?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Johnny-Martin",
      "html_url": "https://github.com/Johnny-Martin",
      "followers_url": "https://api.github.com/users/Johnny-Martin/followers",
      "following_url": "https://api.github.com/users/Johnny-Martin/following{/other_user}",
      "gists_url": "https://api.github.com/users/Johnny-Martin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Johnny-Martin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Johnny-Martin/subscriptions",
      "organizations_url": "https://api.github.com/users/Johnny-Martin/orgs",
      "repos_url": "https://api.github.com/users/Johnny-Martin/repos",
      "events_url": "https://api.github.com/users/Johnny-Martin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Johnny-Martin/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2023-12-06T07:34:13Z",
    "updated_at": "2023-12-07T06:15:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nHi guys, we are useing nlohmann for json processing with version 3.7.3.\r\n\r\nThis library works perfect for most of the time.  We alway disable the exceptions when parsing:\r\n```\r\nauto json = nlohmann::json::parse(str, nullptr, false);\r\n```\r\nThis works perfect but we received a few crash report and the dump shows that nlohmann::json::parse crashed for SIGABRT.\r\n\r\n```\r\n/apex/com.android.runtime/lib64/bionic/libc.so pc 0000000000037c94 (abort+180) [arm64-v8a]\r\n/apex/com.android.runtime/lib64/bionic/libc.so pc 0000000000001000 (free+96) [arm64-v8a]\r\nlibCrashSight.so pc 00000000000388c0 (std::logic_error::~logic_error()+48) [arm64-v8a] [4.2.7(424)]\r\ninclude/json.hpp:1864\r\nnlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, long, unsigned long, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(bool, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, long, unsigned long, double, std::__ndk1::allocator, nlohmann::adl_serializer>&)\r\nld-temp.o:?\r\nnlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, long, unsigned long, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse(nlohmann::detail::input_adapter&&, std::__ndk1::function<bool (int, nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, long, unsigned long, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_event_t, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, long, unsigned long, double, std::__ndk1::allocator, nlohmann::adl_serializer>&)>, bool)\r\ninclude/json.hpp:20750\r\n```\r\n![image](https://github.com/nlohmann/json/assets/13740871/c090a706-64ba-4e1a-a59d-27a1ac8694e3)\r\n\r\n![image](https://github.com/nlohmann/json/assets/13740871/3de78cf9-f9bd-495a-b371-4685d0973e61)\r\n\r\nUnfortunatelly, we can't get more information from the user because of some security policy. \r\n\r\n\n\n### Reproduction steps\n\nThe probability of this crash is very low and we tried to reproduce it for many times but all failed.\n\n### Expected vs. actual results\n\nSince we have disabled the exceptions with allow_exceptions=false, so just do not crash the application when parsing json string.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nAndroid application packed by Unreal Engine 4.27\n\n### Library version\n\n3.7.3\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4234/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4234/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4227",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4227/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4227/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4227/events",
    "html_url": "https://github.com/nlohmann/json/issues/4227",
    "id": 2017290370,
    "node_id": "I_kwDOAKp23M54PWiC",
    "number": 4227,
    "title": "Deprecation warning on save action in check-amalgamation CI step",
    "user": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 4394282871,
        "node_id": "LA_kwDOAKp23M8AAAABBetvdw",
        "url": "https://api.github.com/repos/nlohmann/json/labels/CI",
        "name": "CI",
        "color": "93E0B0",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-11-29T19:34:28Z",
    "updated_at": "2023-11-29T19:39:53Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "### Description\n\nThe `save` step of `check-amalgamation.yml` shows a deprecation warning.\r\n\r\n> The following actions uses node12 which is deprecated and will be forced to run on node16: actions/upload-artifact@v2. For more info: https://github.blog/changelog/2023-06-13-github-actions-all-actions-will-run-on-node16-instead-of-node12-by-default/\r\n\r\n<img width=\"1081\" alt=\"image\" src=\"https://github.com/nlohmann/json/assets/159488/fcda3279-e658-4002-a899-6f03310f8f04\">\r\n\n\n### Reproduction steps\n\nRun CI.\n\n### Expected vs. actual results\n\nExpected: no message\r\n\r\nActual: deprecation message\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n```Shell\nThe following actions uses node12 which is deprecated and will be forced to run on node16: actions/upload-artifact@v2. For more info: https://github.blog/changelog/2023-06-13-github-actions-all-actions-will-run-on-node16-instead-of-node12-by-default/\n```\n\n\n### Compiler and operating system\n\nCI\n\n### Library version\n\n3.11.3\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4227/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4227/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4197",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4197/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4197/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4197/events",
    "html_url": "https://github.com/nlohmann/json/issues/4197",
    "id": 1971143887,
    "node_id": "I_kwDOAKp23M51fUTP",
    "number": 4197,
    "title": "use of overloaded operator '<=>' is ambiguous",
    "user": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2023-10-31T19:12:51Z",
    "updated_at": "2024-01-06T19:06:26Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "### Description\n\nI want to prepare the next release, but compiling the example file `docs/examples/operator_spaceship__const_reference.c++20.cpp` fails.\n\n### Reproduction steps\n\nCompile file `docs/examples/operator_spaceship__const_reference.c++20.cpp`.\r\n\r\n- Delete `docs/examples/operator_spaceship__const_reference.c++20.output`\r\n- Call `make -Cdocs create_output`\n\n### Expected vs. actual results\n\nExpected: No error.\r\n\r\nActual: Compilation error.\n\n### Minimal code example\n\n```Shell\n#include <compare>\r\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\nusing json = nlohmann::json;\r\n\r\nconst char* to_string(const std::partial_ordering& po)\r\n{\r\n    if (std::is_lt(po))\r\n    {\r\n        return \"less\";\r\n    }\r\n    else if (std::is_gt(po))\r\n    {\r\n        return \"greater\";\r\n    }\r\n    else if (std::is_eq(po))\r\n    {\r\n        return \"equivalent\";\r\n    }\r\n    return \"unordered\";\r\n}\r\n\r\nint main()\r\n{\r\n    // create several JSON values\r\n    json array_1 = {1, 2, 3};\r\n    json array_2 = {1, 2, 4};\r\n    json object_1 = {{\"A\", \"a\"}, {\"B\", \"b\"}};\r\n    json object_2 = {{\"B\", \"b\"}, {\"A\", \"a\"}};\r\n    json number = 17;\r\n    json string = \"foo\";\r\n    json discarded = json(json::value_t::discarded);\r\n\r\n    // output values and comparisons\r\n    std::cout << array_1 << \" <=> \" << array_2 << \" := \" << to_string(array_1 <=> array_2) << '\\n'; // *NOPAD*\r\n    std::cout << object_1 << \" <=> \" << object_2 << \" := \" << to_string(object_1 <=> object_2) << '\\n'; // *NOPAD*\r\n    std::cout << string << \" <=> \" << number << \" := \" << to_string(string <=> number) << '\\n'; // *NOPAD*\r\n    std::cout << string << \" <=> \" << discarded << \" := \" << to_string(string <=> discarded) << '\\n'; // *NOPAD*\r\n}\n```\n\n\n### Error messages\n\n```Shell\nmake create_output\r\nstandard\r\n/Library/Developer/CommandLineTools/usr/bin/make examples/operator_spaceship__const_reference.c++20 \\\r\n\t\tCPPFLAGS=\"-I ../single_include -DJSON_USE_GLOBAL_UDLS=0\" \\\r\n\t\tCXXFLAGS=\"-std=c++20 -Wno-deprecated-declarations\"\r\nc++ -std=c++20 -Wno-deprecated-declarations -I ../single_include -DJSON_USE_GLOBAL_UDLS=0   examples/operator_spaceship__const_reference.c++20.cpp   -o examples/operator_spaceship__const_reference.c++20\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: error: use of overloaded operator '<=>' is ambiguous (with operand types 'json' (aka 'basic_json<>') and 'json')\r\n    std::cout << array_1 << \" <=> \" << array_2 << \" := \" << to_string(array_1 <=> array_2) << '\\n'; // *NOPAD*\r\n                                                                      ~~~~~~~ ^   ~~~~~~~\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(enum nlohmann::detail::value_t, enum nlohmann::detail::value_t)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(float, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(double, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long double, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(int, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(long long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(__int128, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned int, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned long long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:36:79: note: built-in candidate operator<=>(unsigned __int128, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: error: use of overloaded operator '<=>' is ambiguous (with operand types 'json' (aka 'basic_json<>') and 'json')\r\n    std::cout << object_1 << \" <=> \" << object_2 << \" := \" << to_string(object_1 <=> object_2) << '\\n'; // *NOPAD*\r\n                                                                        ~~~~~~~~ ^   ~~~~~~~~\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(enum nlohmann::detail::value_t, enum nlohmann::detail::value_t)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(float, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(double, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long double, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(int, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(long long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(__int128, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned int, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned long long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:37:82: note: built-in candidate operator<=>(unsigned __int128, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: error: use of overloaded operator '<=>' is ambiguous (with operand types 'json' (aka 'basic_json<>') and 'json')\r\n    std::cout << string << \" <=> \" << number << \" := \" << to_string(string <=> number) << '\\n'; // *NOPAD*\r\n                                                                    ~~~~~~ ^   ~~~~~~\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(enum nlohmann::detail::value_t, enum nlohmann::detail::value_t)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(float, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(double, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long double, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(int, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(long long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(__int128, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned int, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned long long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:38:76: note: built-in candidate operator<=>(unsigned __int128, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: error: use of overloaded operator '<=>' is ambiguous (with operand types 'json' (aka 'basic_json<>') and 'json')\r\n    std::cout << string << \" <=> \" << discarded << \" := \" << to_string(string <=> discarded) << '\\n'; // *NOPAD*\r\n                                                                       ~~~~~~ ^   ~~~~~~~~~\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(enum nlohmann::detail::value_t, enum nlohmann::detail::value_t)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(float, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(double, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long double, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(int, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(long long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(__int128, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned int, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned long long, unsigned __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, float)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, long double)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, __int128)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, unsigned int)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, unsigned long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, unsigned long long)\r\nexamples/operator_spaceship__const_reference.c++20.cpp:39:79: note: built-in candidate operator<=>(unsigned __int128, unsigned __int128)\r\n4 errors generated.\r\nmake[1]: *** [examples/operator_spaceship__const_reference.c++20] Error 1\r\nmake: *** [examples/operator_spaceship__const_reference.c++20.output] Error 2\n```\n\n\n### Compiler and operating system\n\nApple clang version 15.0.0 (clang-1500.0.40.1)\n\n### Library version\n\ndevelop\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4197/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4165",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4165/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4165/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4165/events",
    "html_url": "https://github.com/nlohmann/json/issues/4165",
    "id": 1913244679,
    "node_id": "I_kwDOAKp23M5yCcwH",
    "number": 4165,
    "title": "gcc13.2 compile fail when using std::string to compare the json object",
    "user": {
      "login": "zhangjian3032",
      "id": 100556176,
      "node_id": "U_kgDOBf5dkA",
      "avatar_url": "https://avatars.githubusercontent.com/u/100556176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zhangjian3032",
      "html_url": "https://github.com/zhangjian3032",
      "followers_url": "https://api.github.com/users/zhangjian3032/followers",
      "following_url": "https://api.github.com/users/zhangjian3032/following{/other_user}",
      "gists_url": "https://api.github.com/users/zhangjian3032/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zhangjian3032/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zhangjian3032/subscriptions",
      "organizations_url": "https://api.github.com/users/zhangjian3032/orgs",
      "repos_url": "https://api.github.com/users/zhangjian3032/repos",
      "events_url": "https://api.github.com/users/zhangjian3032/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zhangjian3032/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 232252782,
        "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed",
        "name": "confirmed",
        "color": "e11d21",
        "default": false,
        "description": null
      },
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2023-09-26T10:54:40Z",
    "updated_at": "2023-10-17T07:00:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nKindly refer to this link: `https://godbolt.org/z/c3fzjnqzG`,\r\nokay with gcc 12.3 \r\nfailed with gcc 13.1 and 13.2\r\n\n\n### Reproduction steps\n\nrefer to description\n\n### Expected vs. actual results\n\nexpect using gcc13.2 can be compiled successfully\r\n```\r\n    if (std::string(\"bar\") == j[\"xxx\"])\r\n    {\r\n       \r\n    }\r\n ```\r\n\n\n### Minimal code example\n\n```Shell\n#include <iostream>\r\n#include <string>\r\n#include <nlohmann/json.hpp>\r\n\r\nint main()\r\n{\r\n    nlohmann::json j;\r\n\r\n\r\n    if (std::string(\"bar\") == j[\"xxx\"])\r\n    {\r\n       \r\n    }\r\n    \r\n    return 0;\r\n}\r\n```\n```\n\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\ngcc12.3 and gcc13.1\n\n### Library version\n\n3.11.1\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4165/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4165/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4164",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4164/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4164/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4164/events",
    "html_url": "https://github.com/nlohmann/json/issues/4164",
    "id": 1910780528,
    "node_id": "I_kwDOAKp23M5x5DJw",
    "number": 4164,
    "title": "Copying ctor and moving ctor null ordered_json corrupts it (mingw 8)",
    "user": {
      "login": "matejk",
      "id": 699334,
      "node_id": "MDQ6VXNlcjY5OTMzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/699334?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/matejk",
      "html_url": "https://github.com/matejk",
      "followers_url": "https://api.github.com/users/matejk/followers",
      "following_url": "https://api.github.com/users/matejk/following{/other_user}",
      "gists_url": "https://api.github.com/users/matejk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/matejk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/matejk/subscriptions",
      "organizations_url": "https://api.github.com/users/matejk/orgs",
      "repos_url": "https://api.github.com/users/matejk/repos",
      "events_url": "https://api.github.com/users/matejk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/matejk/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374232,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMg==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate",
        "name": "solution: duplicate",
        "color": "cccccc",
        "default": false,
        "description": "the issue is a duplicate; refer to the linked issue instead"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-09-25T06:39:12Z",
    "updated_at": "2023-09-25T07:29:56Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nCreating a copy of null JSON with copy ctor or moving it with move ctor corrupts it.\r\n\r\nType turns into array and that array contains one null element.\r\n\r\nNull JSON is properly copied when using assignment operator.\r\n\r\nI use the library from \"include.zip\".\r\n\r\n### Reproduction steps\r\n\r\nSee example below.\r\n\r\n### Expected vs. actual results\r\n\r\nCopied null JSON shall still be null JSON and does not turn into something different.\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\n// A google test function demonstrating the problem.\r\nTEST(Parameters, JsonCopyCtor)\r\n{\r\n    nlohmann::ordered_json null_json;\r\n\r\n    std::cout << null_json.dump() << std::endl;\r\n    EXPECT_TRUE(null_json.is_null());\r\n\r\n    const auto json_copy { null_json };\r\n\r\n    std::cout << json_copy.dump() << std::endl;\r\n    EXPECT_TRUE(json_copy.is_null());\r\n    EXPECT_FALSE(json_copy.is_array());\r\n\r\n    const auto json_copy_2 = null_json ;\r\n\r\n    std::cout << json_copy_2.dump() << std::endl;\r\n    EXPECT_TRUE(json_copy_2.is_null());\r\n    EXPECT_FALSE(json_copy_2.is_array());\r\n\r\n    const auto json_copy_3 { std::move(null_json) } ;\r\n\r\n    std::cout << json_copy_3.dump() << std::endl;\r\n    EXPECT_TRUE(json_copy_3.is_null());\r\n    EXPECT_FALSE(json_copy_3.is_array());\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nOutput from Google test:\r\n\r\n[ RUN      ] Parameters.JsonCopyCtor\r\nnull\r\n[null]\r\nC:/Users/m.kenda/workspace/ConfigSerializer.cpp:78: Failure\r\nValue of: json_copy.is_null()\r\n  Actual: false\r\nExpected: true\r\nC:/Users/m.kenda/workspace/ConfigSerializer.cpp:79: Failure\r\nValue of: json_copy.is_array()\r\n  Actual: true\r\nExpected: false\r\nnull\r\n[null]\r\nC:/Users/m.kenda/workspace/ConfigSerializer.cpp:90: Failure\r\nValue of: json_copy_3.is_null()\r\n  Actual: false\r\nExpected: true\r\nC:/Users/m.kenda/workspace/ConfigSerializer.cpp:91: Failure\r\nValue of: json_copy_3.is_array()\r\n  Actual: true\r\nExpected: false\r\n[  FAILED  ] Parameters.JsonCopyCtor (0 ms)\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nMinGW 8.1, Windows 10\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4164/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4134",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4134/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4134/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4134/events",
    "html_url": "https://github.com/nlohmann/json/issues/4134",
    "id": 1881850821,
    "node_id": "I_kwDOAKp23M5wKsPF",
    "number": 4134,
    "title": "patch_inplace assumes StringType is std::string",
    "user": {
      "login": "tomalakgeretkal",
      "id": 5039800,
      "node_id": "MDQ6VXNlcjUwMzk4MDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5039800?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomalakgeretkal",
      "html_url": "https://github.com/tomalakgeretkal",
      "followers_url": "https://api.github.com/users/tomalakgeretkal/followers",
      "following_url": "https://api.github.com/users/tomalakgeretkal/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomalakgeretkal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomalakgeretkal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomalakgeretkal/subscriptions",
      "organizations_url": "https://api.github.com/users/tomalakgeretkal/orgs",
      "repos_url": "https://api.github.com/users/tomalakgeretkal/repos",
      "events_url": "https://api.github.com/users/tomalakgeretkal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomalakgeretkal/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-09-05T12:10:52Z",
    "updated_at": "2023-09-06T02:35:18Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\n`patch_inplace` has several instances of `get<std::string>`, which breaks the build if you're using a custom string.\r\n\r\n### Reproduction steps\r\n\r\n- Instantiate a nlohmann::basic_json<> with a custom string type\r\n- Attempt to call nlohmann:basic_json<>::patch\r\n\r\n### Expected vs. actual results\r\n\r\nCompilation fails.\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\nstruct MyString;  // some compatible impl\r\n\r\nusing Value = nlohmann::basic_json<\r\n\t\tstd::map,\r\n\t\tstd::vector,\r\n\t\tMyString,\r\n\t\tbool,\r\n\t\tstd::int64_t,\r\n\t\tstd::uint64_t,\r\n\t\tdouble,\r\n\t\t\r\n\t\tstd::allocator,\r\n\t\tnlohmann::adl_serializer,\r\n\t\tstd::vector<std::uint8_t>\r\n>;\r\n\r\nValue base, patch;\r\nbase.patch(patch);\r\n```\r\n\r\n### Error messages\r\n\r\n```Shell\r\nNo matching constructor for initialization of 'nlohmann::basic_json<std::map, std::vector, MyString >::json_pointer' (aka 'json_pointer< MyString >')\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nApple clang version 14.0.3 (clang-1403.0.22.14.1), macOS Ventura 13.5.1\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4134/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4134/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4104",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4104/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4104/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4104/events",
    "html_url": "https://github.com/nlohmann/json/issues/4104",
    "id": 1846694604,
    "node_id": "I_kwDOAKp23M5uElLM",
    "number": 4104,
    "title": "NLOHMANN_DEFINE_TYPE_INTRUSIVE with nlohmann::json::json_pointer",
    "user": {
      "login": "risa2000",
      "id": 1336835,
      "node_id": "MDQ6VXNlcjEzMzY4MzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1336835?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/risa2000",
      "html_url": "https://github.com/risa2000",
      "followers_url": "https://api.github.com/users/risa2000/followers",
      "following_url": "https://api.github.com/users/risa2000/following{/other_user}",
      "gists_url": "https://api.github.com/users/risa2000/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/risa2000/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/risa2000/subscriptions",
      "organizations_url": "https://api.github.com/users/risa2000/orgs",
      "repos_url": "https://api.github.com/users/risa2000/repos",
      "events_url": "https://api.github.com/users/risa2000/events{/privacy}",
      "received_events_url": "https://api.github.com/users/risa2000/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-08-11T11:54:29Z",
    "updated_at": "2023-08-11T11:54:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nUsing `NLOHMANN_DEFINE_TYPE_INTRUSIVE` (or non-intrusive) macro to define conversions for struct with `nlohmann::json::json_pointer` member fails to compile (MSVC v19.3 - VS 2022), with or without explicit conversion.\r\n\n\n### Reproduction steps\n\nCompile the sample code.\r\nHere is a Godbolt link https://godbolt.org/z/fdrPrcT7T\n\n### Expected vs. actual results\n\nExpecting it will compile.\n\n### Minimal code example\n\n```Shell\n#include <nlohmann/json.hpp>\r\n#include <fmt/format.h>\r\n#include <string>\r\n\r\ninline void to_json(nlohmann::json& j, const nlohmann::json::json_pointer& crj)\r\n{\r\n    j = nlohmann::json(crj.to_string());\r\n}\r\n\r\ninline void from_json(const nlohmann::json& cj, nlohmann::json::json_pointer& rj)\r\n{\r\n    rj = nlohmann::json::json_pointer(cj.get<std::string>());\r\n}\r\n\r\nstruct Test {\r\n    nlohmann::json::json_pointer ptr;\r\n//    std::string ptr;\r\n    nlohmann::json value;\r\n    NLOHMANN_DEFINE_TYPE_INTRUSIVE(Test, ptr, value);\r\n};\r\n\r\n// Type your code here, or load an example.\r\nint main() {\r\n    Test test{nlohmann::json::json_pointer(\"/test\"), 10};\r\n    nlohmann::json jtest = test;\r\n    fmt::print(\"jtest={}\\n\", jtest.dump());\r\n}\n```\n\n\n### Error messages\n\n```Shell\nexample.cpp\r\n<source>(19): error C2672: 'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to': no matching overloaded function found\r\nC:/data/libraries/installed/x64-windows/include\\nlohmann/json.hpp(1809): note: could be 'Array nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to(T (&)[N]) noexcept(<expr>) const'\r\n<source>(19): note: 'Array nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to(T (&)[N]) noexcept(<expr>) const': could not deduce template argument for 'T (&)[N]' from 'nlohmann::json_abi_v3_11_2::json_pointer<StringType>'\r\n        with\r\n        [\r\n            StringType=std::string\r\n        ]\r\nC:/data/libraries/installed/x64-windows/include\\nlohmann/json.hpp(1809): note: see declaration of 'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to'\r\nC:/data/libraries/installed/x64-windows/include\\nlohmann/json.hpp(1798): note: or       'ValueType &nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to(ValueType &) const'\r\n<source>(19): note: 'ValueType &nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to(ValueType &) const': could not deduce template argument for '__formal'\r\nC:/data/libraries/installed/x64-windows/include\\nlohmann/json.hpp(1798): note: see declaration of 'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to'\r\nC:/data/libraries/installed/x64-windows/include\\nlohmann/json.hpp(1785): note: or       'ValueType &nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to(ValueType &) noexcept(<expr>) const'\r\n<source>(19): note: 'ValueType &nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to(ValueType &) noexcept(<expr>) const': could not deduce template argument for '__formal'\r\nC:/data/libraries/installed/x64-windows/include\\nlohmann/json.hpp(1785): note: see declaration of 'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::get_to'\r\nCompiler returned: 2\n```\n\n\n### Compiler and operating system\n\nMSVC v19.3 - VS 2022\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4104/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4104/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4103",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4103/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4103/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4103/events",
    "html_url": "https://github.com/nlohmann/json/issues/4103",
    "id": 1842879037,
    "node_id": "I_kwDOAKp23M5t2Bo9",
    "number": 4103,
    "title": "warning on at(nlohmann::json_pointer)",
    "user": {
      "login": "manifolds",
      "id": 18109450,
      "node_id": "MDQ6VXNlcjE4MTA5NDUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/18109450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/manifolds",
      "html_url": "https://github.com/manifolds",
      "followers_url": "https://api.github.com/users/manifolds/followers",
      "following_url": "https://api.github.com/users/manifolds/following{/other_user}",
      "gists_url": "https://api.github.com/users/manifolds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/manifolds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/manifolds/subscriptions",
      "organizations_url": "https://api.github.com/users/manifolds/orgs",
      "repos_url": "https://api.github.com/users/manifolds/repos",
      "events_url": "https://api.github.com/users/manifolds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/manifolds/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-08-09T09:50:54Z",
    "updated_at": "2023-08-09T09:57:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nwarning on at(nlohmann::json_pointer)\r\n\r\n_warning: ‘nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::operator nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::string_t() const [with RefStringType = std::basic_string<char>; nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::string_t = std::basic_string<char>]’ is deprecated (declared at /home/tty2099/Workspace/AutoTradingSystem/third_party/nlohmann_json/include/nlohmann/detail/json_pointer.hpp:81): Since 3.11.0; use to_string() [-Wdeprecated-declarations]_\r\n\r\nIt's warning when compiling the code, but It can find the node correctly. When I call with at(nlohmann::json_pointer::to_string()), it cannot find the json node.\r\n\r\nI cannot understand the purpose of the find function with json_pointer parameter, it will not find the node when I call it with the json_pointer paramter or with the json_pointer::to_string() paramter. \r\n\r\n### Reproduction steps\r\n\r\n```C++\r\n\r\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\nint main(int argc, char** argv)\r\n{\r\n    nlohmann::json j2 = {\r\n      {\"pi\", 3.141},\r\n      {\"happy\", true},\r\n      {\"name\", \"Niels\"},\r\n      {\"nothing\", nullptr},\r\n      {\"answer\", {\r\n        {\"everything\", 42}\r\n      }},\r\n      {\"list\", {1, 0, 2}},\r\n      {\"object\", {\r\n        {\"currency\", \"USD\"},\r\n        {\"value\", 42.99}\r\n      }}\r\n    };\r\n\r\n    nlohmann::json_pointer<std::string> ptr;\r\n    ptr.push_back(\"object\");\r\n    ptr.push_back(\"value\");\r\n    std::cout<<\"pointer value: \"<< j2.at(ptr).get<double>()<<std::endl;\r\n    std::cout<<\"pointer value: \"<< j2.at(ptr.to_string()).get<double>()<<std::endl;\r\n    auto itr = j2.find(ptr);\r\n    if(itr!=j2.cend()) std::cout<<\"find --- 0\"<<std::endl;\r\n    itr = j2.find(ptr.to_string());\r\n    if(itr!=j2.cend()) std::cout<<\"find --- 1\"<<std::endl;\r\n    return EXIT_SUCCESS;\r\n}\r\n\r\n```\r\n\r\n### Expected vs. actual results\r\n\r\nI think at(nlohmann::json_pointer<std::string>) and at(nlohmann::json_pointer<std::string>::to_string()) calls return the same result,  nlohmann::json should find the node according the path that nlohmann::json_pointer<std::string> supplied.\r\n\r\nI think the find function should also be work in this way.\r\n\r\n### Minimal code example\r\n\r\n_No response_\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\nCentOS7\r\n\r\n### Library version\r\n\r\n3.11.0\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4103/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4103/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4087",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4087/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4087/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4087/events",
    "html_url": "https://github.com/nlohmann/json/issues/4087",
    "id": 1822811638,
    "node_id": "I_kwDOAKp23M5speX2",
    "number": 4087,
    "title": "Getting a weak-vtables warning with clang on ubuntu 22.04",
    "user": {
      "login": "tanja84dk",
      "id": 1285458,
      "node_id": "MDQ6VXNlcjEyODU0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1285458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tanja84dk",
      "html_url": "https://github.com/tanja84dk",
      "followers_url": "https://api.github.com/users/tanja84dk/followers",
      "following_url": "https://api.github.com/users/tanja84dk/following{/other_user}",
      "gists_url": "https://api.github.com/users/tanja84dk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tanja84dk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tanja84dk/subscriptions",
      "organizations_url": "https://api.github.com/users/tanja84dk/orgs",
      "repos_url": "https://api.github.com/users/tanja84dk/repos",
      "events_url": "https://api.github.com/users/tanja84dk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tanja84dk/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-07-26T16:56:15Z",
    "updated_at": "2024-08-08T12:23:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI noticed that when ever I try to compile with clang ( 11 - 15 as I have installed) on with my normal warning flags on linux then I always ends up with a warning from the exceptions header about weak-vtables, I do know that some would say I have alot of warning flags activated but that is because that is what I saw some time ago that fmtlib uses and chose to use it myself also to catch errors and posible bad practices from my side\r\n\r\nI do use CPM-cmake to pull in libraries purely because that is able to store them in a local cache so I don't have to pull the libraries over and over for each project and it does use the github release\n\n### Reproduction steps\n\nTested with clang 11, 12, 13, 14, 15 on ubuntu jammy (22.04)\r\n\r\nThe shell command is taken from cmake log\r\n```shell\r\n/usr/bin/clang++-15  -I/home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include -g -Werror -Wall -Wextra -pedantic -Wconversion -Wundef -Wdeprecated -Wweak-vtables -Wshadow -Wno-gnu-zero-variadic-macro-arguments -Wzero-as-null-pointer-constant -std=gnu++17 -MD -MT CMakeFiles/tanja84dk_testproject.dir/src/main.cpp.o -MF CMakeFiles/tanja84dk_testproject.dir/src/main.cpp.o.d -o CMakeFiles/tanja84dk_testproject.dir/src/main.cpp.o -c /buildtest/Cpp-Tanja84dk-DockerClient/src/main.cpp\r\n```\r\n\r\nI'm using [CPM-cmake](https://github.com/cpm-cmake/CPM.cmake) to pull in libraries and in essence its just pulling the 3.11.2 release from the release tab by tag\r\n\r\n```CMakeList\r\ncmake_minimum_required(VERSION 3.16)\r\nproject(tanja84dk_testproject LANGUAGES CXX VERSION 0.1.0\r\n)\r\n\r\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\r\n\r\ninclude(cmake/CPM.cmake)\r\n\r\ninclude(CheckCXXCompilerFlag)\r\n\r\nif (CMAKE_CXX_COMPILER_ID MATCHES \"GNU\")\r\n  set(PEDANTIC_COMPILE_FLAGS -pedantic-errors -Wall -Wextra -pedantic\r\n      -Wold-style-cast -Wundef\r\n      -Wredundant-decls -Wwrite-strings -Wpointer-arith\r\n      -Wcast-qual -Wformat=2 -Wmissing-include-dirs\r\n      -Wcast-align\r\n      -Wctor-dtor-privacy -Wdisabled-optimization\r\n      -Winvalid-pch -Woverloaded-virtual\r\n      -Wconversion -Wundef\r\n      -Wno-ctor-dtor-privacy -Wno-format-nonliteral)\r\n  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.6)\r\n      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS}\r\n         -Wno-dangling-else -Wno-unused-local-typedefs)\r\n  endif ()\r\n  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 5.0)\r\n      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wdouble-promotion\r\n          -Wtrampolines -Wzero-as-null-pointer-constant -Wuseless-cast\r\n          -Wvector-operation-performance -Wsized-deallocation -Wshadow)\r\n  endif ()\r\n  if (NOT CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)\r\n      set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wshift-overflow=2\r\n          -Wnull-dereference -Wduplicated-cond)\r\n  endif ()\r\n  set(WERROR_FLAG -Werror)\r\nendif ()\r\n\r\nif (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\r\n  set(PEDANTIC_COMPILE_FLAGS -Wall -Wextra -pedantic -Wconversion -Wundef\r\n    -Wdeprecated -Wweak-vtables -Wshadow\r\n    -Wno-gnu-zero-variadic-macro-arguments)\r\n  check_cxx_compiler_flag(-Wzero-as-null-pointer-constant HAS_NULLPTR_WARNING)\r\n  if (HAS_NULLPTR_WARNING)\r\n    set(PEDANTIC_COMPILE_FLAGS ${PEDANTIC_COMPILE_FLAGS} -Wzero-as-null-pointer-constant)\r\n  endif ()\r\n  set(WERROR_FLAG -Werror)\r\nendif ()\r\n\r\nif (MSVC)\r\n  set(PEDANTIC_COMPILE_FLAGS /W4)\r\n  set(WERROR_FLAG /WX)\r\nendif ()\r\n\r\nset(tanja84dk_testproject_SOURCES\r\n    src/main.cpp\r\n)\r\n\r\nset(tanja84dk_testproject_LIBRARIES\r\n    nlohmann_json\r\n)\r\n\r\nCPMAddPackage(\r\n    NAME            nlohmann_json\r\n    GIT_REPOSITORY  https://github.com/nlohmann/json\r\n    VERSION         3.11.2\r\n    GIT_TAG         v3.11.2\r\n)\r\n\r\nadd_executable(tanja84dk_testproject ${tanja84dk_testproject_SOURCES})\r\n\r\nset_target_properties(tanja84dk_testproject\r\n    PROPERTIES\r\n        ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\"\r\n        LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/lib\"\r\n        RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\"\r\n        CXX_STANDARD 17\r\n    FOLDER\r\n        Application\r\n)\r\n\r\ntarget_link_libraries(tanja84dk_testproject PRIVATE ${tanja84dk_testproject_LIBRARIES})\r\n\r\ntarget_compile_options(tanja84dk_testproject\r\n    PRIVATE\r\n        ${WERROR_FLAG}\r\n        ${PEDANTIC_COMPILE_FLAGS})\r\n\r\ntarget_compile_features(tanja84dk_testproject\r\n    PRIVATE\r\n        cxx_std_17\r\n)\n\n### Expected vs. actual results\n\nExpected it to build successfully specially because I didn't do anything specially in the small test but it warned/errored with the weak-vtables in the include/nlohmann/detail/exceptions.hpp\n\n### Minimal code example\n\n```Shell\n#include <iostream>\r\n#include <nlohmann/json.hpp>\r\n\r\nint main() { return 0; }\n```\n\n\n### Error messages\n\n```Shell\n[main] Building folder: Cpp-Tanja84dk-DockerClient \r\n[build] Starting build\r\n[proc] Executing command: /usr/bin/cmake --build /buildtest/Cpp-Tanja84dk-DockerClient/build --config Debug --target all --\r\n[build] [1/2  50% :: 2.195] Building CXX object CMakeFiles/tanja84dk_testproject.dir/src/main.cpp.o\r\n[build] FAILED: CMakeFiles/tanja84dk_testproject.dir/src/main.cpp.o \r\n[build] /usr/bin/clang++-15  -I/home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include -g -Werror -Wall -Wextra -pedantic -Wconversion -Wundef -Wdeprecated -Wweak-vtables -Wshadow -Wno-gnu-zero-variadic-macro-arguments -Wzero-as-null-pointer-constant -std=gnu++17 -MD -MT CMakeFiles/tanja84dk_testproject.dir/src/main.cpp.o -MF CMakeFiles/tanja84dk_testproject.dir/src/main.cpp.o.d -o CMakeFiles/tanja84dk_testproject.dir/src/main.cpp.o -c /buildtest/Cpp-Tanja84dk-DockerClient/src/main.cpp\r\n[build] In file included from /buildtest/Cpp-Tanja84dk-DockerClient/src/main.cpp:2:\r\n[build] In file included from /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/json.hpp:35:\r\n[build] In file included from /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/adl_serializer.hpp:14:\r\n[build] In file included from /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/detail/conversions/from_json.hpp:23:\r\n[build] /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/detail/exceptions.hpp:36:7: error: 'exception' has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit [-Werror,-Wweak-vtables]\r\n[build] class exception : public std::exception\r\n[build]       ^\r\n[build] /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/detail/exceptions.hpp:134:7: error: 'parse_error' has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit [-Werror,-Wweak-vtables]\r\n[build] class parse_error : public exception\r\n[build]       ^\r\n[build] /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/detail/exceptions.hpp:187:7: error: 'invalid_iterator' has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit [-Werror,-Wweak-vtables]\r\n[build] class invalid_iterator : public exception\r\n[build]       ^\r\n[build] /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/detail/exceptions.hpp:205:7: error: 'type_error' has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit [-Werror,-Wweak-vtables]\r\n[build] class type_error : public exception\r\n[build]       ^\r\n[build] /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/detail/exceptions.hpp:222:7: error: 'out_of_range' has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit [-Werror,-Wweak-vtables]\r\n[build] class out_of_range : public exception\r\n[build]       ^\r\n[build] /home/buildclient/.cache/CPM/nlohmann_json/b3708972f6694fe462e4112e47aa04f10d2390b4/nlohmann_json/include/nlohmann/detail/exceptions.hpp:239:7: error: 'other_error' has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit [-Werror,-Wweak-vtables]\r\n[build] class other_error : public exception\r\n[build]       ^\r\n[build] 6 errors generated.\r\n[build] ninja: build stopped: subcommand failed.\r\n[proc] The command: /usr/bin/cmake --build /buildtest/Cpp-Tanja84dk-DockerClient/build --config Debug --target all -- exited with code: 1\r\n[driver] Build completed: 00:00:02.244\r\n[build] Build finished with exit code 1\n```\n\n\n### Compiler and operating system\n\nClang 11, 12, 13, 14, 15 on ubuntu 22.04\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4087/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4087/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4084",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4084/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4084/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4084/events",
    "html_url": "https://github.com/nlohmann/json/issues/4084",
    "id": 1820000142,
    "node_id": "I_kwDOAKp23M5sev-O",
    "number": 4084,
    "title": "SAX interface unexpectedly gets locale-altered float representation.",
    "user": {
      "login": "jzakrzewski",
      "id": 4115327,
      "node_id": "MDQ6VXNlcjQxMTUzMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4115327?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jzakrzewski",
      "html_url": "https://github.com/jzakrzewski",
      "followers_url": "https://api.github.com/users/jzakrzewski/followers",
      "following_url": "https://api.github.com/users/jzakrzewski/following{/other_user}",
      "gists_url": "https://api.github.com/users/jzakrzewski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jzakrzewski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jzakrzewski/subscriptions",
      "organizations_url": "https://api.github.com/users/jzakrzewski/orgs",
      "repos_url": "https://api.github.com/users/jzakrzewski/repos",
      "events_url": "https://api.github.com/users/jzakrzewski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jzakrzewski/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 232252782,
        "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed",
        "name": "confirmed",
        "color": "e11d21",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-07-25T10:13:46Z",
    "updated_at": "2023-07-25T14:09:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nI didn't expect (neither from experience, nor from the documentation) that the float string representation would be altered according to the locale when feeded into the SAX parser.\r\nI understand, why it has to be altered internally, but I'd expect the original string in the callback.\r\n\r\n### Reproduction steps\r\n\r\n`LC_NUMERIC=de_DE.UTF-8`\r\n\r\n`{ \"aFloat\": 42.0 }`\r\n\r\n```c++\r\nbool ParserImpl::number_float( number_float_t val, const string_t &s )\r\n{\r\n    std::cout << s << '\\n';\r\n}\r\n```\r\n\r\n### Expected vs. actual results\r\n\r\nExpected: 42.0\r\nActual: 42,0\r\n\r\n### Minimal code example\r\n\r\n```c++\r\n#include <nlohmann/json.hpp>\r\n#include <iostream>\r\n#include <string_view>\r\n#include <clocale>\r\n\r\nusing Json = nlohmann::json;\r\n\r\nstruct ParserImpl : public nlohmann::json_sax<Json>\r\n{\r\n    bool null() override { return true; };\r\n    bool boolean( bool val ) override { return true; };\r\n    bool number_integer( number_integer_t val ) override { return true; };\r\n    bool number_unsigned( number_unsigned_t val ) override { return true; };\r\n    bool number_float( number_float_t val, const string_t &s ) override {\r\n        std::cout << s << '\\n';\r\n        return true; \r\n    };\r\n    bool string( string_t &val ) override { return true; };\r\n    bool binary( binary_t &val ) override { return true; };\r\n    bool start_object( std::size_t elements ) override { return true; };\r\n    bool key( string_t &val ) override { return true; };\r\n    bool end_object() override { return true; };\r\n    bool start_array( std::size_t elements ) override { return true; };\r\n    bool end_array() override { return true; };\r\n    bool parse_error( std::size_t position, const std::string &last_token,\r\n                      const nlohmann::detail::exception &ex ) override { return true; };\r\n};\r\n\r\nint main() {\r\n    if(!setlocale(LC_NUMERIC, \"de_DE.utf8\"))\r\n        return -1;\r\n    std::string_view data { R\"json({ \"aFloat\": 42.0 })json\" };\r\n    ParserImpl sax {};\r\n    Json::sax_parse( data, &sax );\r\n    return 0;\r\n}\r\n\r\n```\r\n`g++-12 -o jsontest -I /path/to/nlohmann_json-src/single_include/ --std=c++20 jsontest.cpp`\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\nLinux/gcc-12, Windows/MSVC19.35\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4084/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4079",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4079/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4079/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4079/events",
    "html_url": "https://github.com/nlohmann/json/issues/4079",
    "id": 1816879777,
    "node_id": "I_kwDOAKp23M5sS2Kh",
    "number": 4079,
    "title": "c89 and c11 compile problem on HPE NonStop platform",
    "user": {
      "login": "Watchman58",
      "id": 4119944,
      "node_id": "MDQ6VXNlcjQxMTk5NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4119944?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Watchman58",
      "html_url": "https://github.com/Watchman58",
      "followers_url": "https://api.github.com/users/Watchman58/followers",
      "following_url": "https://api.github.com/users/Watchman58/following{/other_user}",
      "gists_url": "https://api.github.com/users/Watchman58/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Watchman58/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Watchman58/subscriptions",
      "organizations_url": "https://api.github.com/users/Watchman58/orgs",
      "repos_url": "https://api.github.com/users/Watchman58/repos",
      "events_url": "https://api.github.com/users/Watchman58/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Watchman58/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-07-22T20:04:38Z",
    "updated_at": "2023-07-22T20:06:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI am using the nlohmann/json version 3.10.5 toolkit on this platform to build a new product with HPE's ported GNU C++ compiler. I have tried with both the c89 and c11 compilers so that is STL version 3 and 4 respectively. The NonStop Guardian operating system has an SVR4 compliant UNIX shell called OSS, that is layered on top of Guardian, and the compiler runs in this environment. It is conceptually similar to zOS, layered on top of IBM mainframe MVS. There are a huge number of applications and open source frameworks that have been successfully ported over to OSS over the last 3 decades so its pretty solid.  FWIW, Boost v 1.56.0 is supported.  I tried adding the -Wboost flag and it made no difference.\r\n\r\nThis is the first time I am using this framework. I don't fundamentally understand how to resolve this. Note that if you copy/paste the error message below into a document and change the font to courier new, the ^ indicator will line up with the symbol in error.  I am building my app using PC-based cross compilers that are invoked from a vendor-customized version of Eclipse.  Unix compatibility on the PC is via cygwin64 and it requires a custom version of nmake to build the eclipse projects.  there is no cmake or ctest so I couldn't verify the install that way.\r\n\r\nThanks in advance for the assist...\r\n\r\nDean\n\n### Reproduction steps\n\nAll I did was simply include the json library in a new program I am writing.  Since you would not likely have access to this mainframe, I propose arranging a mutually convenient time to do a Zoom session to demonstrate the problem.  Email me at demalone@caleb-ltd.com with your phone number and I will give you a call.  \n\n### Expected vs. actual results\n\nI expect that just including the json file would not cause compile errors.\n\n### Minimal code example\n\n```Shell\nFor what it is worth, here are the include files I use, in order:\r\n\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <ctype.h>\r\n#include <iostream>\r\n#include <map>\r\n#include <string>\r\nusing namespace std;\r\n#include \"nlohmann/json.hpp\"\r\n#include \"zsysc.h\"\r\nusing json=nlohmann::json;\r\n#include <ktdmtyp.h>\r\nextern \"C\"\r\n{\r\n#include <cextdecs.h>\r\n}\n```\n\n\n### Error messages\n\n```Shell\nI am getting the following compile errors on std::declval:\r\n\r\nmake all\r\nBuilding file: ../source/ANCREATE.cpp\r\nInvoking: C++ Compiler (TNS/X)\r\nc11 -Wcplusplus -I\"C:\\Program Files (x86)\\HPE NonStop\\L21.06\\usr\\include\" -I\"D:\\workspace-e2s\\e2mxDll\\include\" -g -O0 -Wsystype=guardian -Wcall_shared -c -o \"source/ANCREATE.o\" \"../source/ANCREATE.cpp\" &&\r\nc11 -Wcplusplus -I\"C:\\Program Files (x86)\\HPE NonStop\\L21.06\\usr\\include\" -I\"D:\\workspace-e2s\\e2mxDll\\include\" -g -O0 -Wsystype=guardian -Wcall_shared -c -WM \"../source/ANCREATE.cpp\" | grep -v -e 'C:\\Program Files (x86)\\HPE NonStop\\L21.06\\usr\\include' -e 'ANCREATE.cpp' | sed -e 's/[ ].*ANCREATE\\Debug\\..// ..//g' >'source/ANCREATE.d'\r\n\r\nauto get_ptr() noexcept -> ### decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval()))\r\n^\r\n\"D:\\workspace-e2s\\e2mxDll\\include\\nlohmann/json.hpp\", line 1537: error(163):\r\nincomplete type is not allowed\r\ndetected during instantiation of class\r\n\"nlohmann::basic_json<std::map, std::vector, std::string,\r\nbool, int64_t, uint64_t, double, std::allocator,\r\nnlohmann::adl_serializer, std::vector<uint8_t,\r\nstd::allocator<uint8_t>>>\" at line 4737\r\n\r\n  constexpr auto get_ptr() const noexcept -> decltype(std::declval<const basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))\r\n                                                      ^\r\n\"D:\\workspace-e2s\\e2mxDll\\include\\nlohmann/json.hpp\", line 1548: error(163):\r\nincomplete type is not allowed\r\ndetected during instantiation of class\r\n\"nlohmann::basic_json<std::map, std::vector, std::string,\r\nbool, int64_t, uint64_t, double, std::allocator,\r\nnlohmann::adl_serializer, std::vector<uint8_t,\r\nstd::allocator<uint8_t>>>\" at line 4737\r\n\r\n  -> decltype(std::declval<const basic_json_t&>().template get_ptr<PointerType>())\r\n              ^\r\n\"D:\\workspace-e2s\\e2mxDll\\include\\nlohmann/json.hpp\", line 1702: error(163):\r\nincomplete type is not allowed\r\ndetected during instantiation of class\r\n\"nlohmann::basic_json<std::map, std::vector, std::string,\r\nbool, int64_t, uint64_t, double, std::allocator,\r\nnlohmann::adl_serializer, std::vector<uint8_t,\r\nstd::allocator<uint8_t>>>\" at line 4737\r\n\r\n  -> decltype(std::declval<const basic_json_t&>().template get_impl<ValueType>(detail::priority_tag<4> {}))\r\n              ^\r\n\"D:\\workspace-e2s\\e2mxDll\\include\\nlohmann/json.hpp\", line 1738: error(163):\r\nincomplete type is not allowed\r\ndetected during instantiation of class\r\n\"nlohmann::basic_json<std::map, std::vector, std::string,\r\nbool, int64_t, uint64_t, double, std::allocator,\r\nnlohmann::adl_serializer, std::vector<uint8_t,\r\nstd::allocator<uint8_t>>>\" at line 4737\r\n\r\n  auto get() noexcept -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>())\r\n                                  ^\r\n\"D:\\workspace-e2s\\e2mxDll\\include\\nlohmann/json.hpp\", line 1777: error(163):\r\nincomplete type is not allowed\r\ndetected during instantiation of class\r\n\"nlohmann::basic_json<std::map, std::vector, std::string,\r\nbool, int64_t, uint64_t, double, std::allocator,\r\nnlohmann::adl_serializer, std::vector<uint8_t,\r\nstd::allocator<uint8_t>>>\" at line 4737\n```\n\n\n### Compiler and operating system\n\nGuardian L21.08 using c11 compiler.  Uncertain what version of GCC it was derived from.\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4079/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4072",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4072/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4072/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4072/events",
    "html_url": "https://github.com/nlohmann/json/issues/4072",
    "id": 1801640685,
    "node_id": "I_kwDOAKp23M5rYtrt",
    "number": 4072,
    "title": "to_bson member function ignores BinaryType template parameter",
    "user": {
      "login": "danielalves",
      "id": 522602,
      "node_id": "MDQ6VXNlcjUyMjYwMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/522602?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/danielalves",
      "html_url": "https://github.com/danielalves",
      "followers_url": "https://api.github.com/users/danielalves/followers",
      "following_url": "https://api.github.com/users/danielalves/following{/other_user}",
      "gists_url": "https://api.github.com/users/danielalves/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/danielalves/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/danielalves/subscriptions",
      "organizations_url": "https://api.github.com/users/danielalves/orgs",
      "repos_url": "https://api.github.com/users/danielalves/repos",
      "events_url": "https://api.github.com/users/danielalves/events{/privacy}",
      "received_events_url": "https://api.github.com/users/danielalves/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-07-12T19:42:03Z",
    "updated_at": "2023-07-12T19:42:03Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nCurrrently `to_bson` is implemented like this:\r\n\r\n```cpp\r\nstatic std::vector<std::uint8_t> to_bson(const basic_json& j)\r\n{\r\n    std::vector<std::uint8_t> result;\r\n    to_bson(j, result);\r\n    return result;\r\n}\r\n```\r\nwhich ignores the [`BinaryType` template parameter received by `basic_json`](https://json.nlohmann.me/api/basic_json/).\r\n\r\nIt should use the `BinaryType` instead:\r\n```cpp\r\nstatic BinaryType to_bson(const basic_json& j)\r\n{\r\n    BinaryType result;\r\n    to_bson(j, result);\r\n    return result;\r\n}\r\n```\n\n### Reproduction steps\n\n```cpp\r\n#include <type_traits>\r\n\r\ntypedef nlohmann::basic_json<\r\n    std::map,\r\n    std::vector,\r\n    std::string,\r\n    bool,\r\n    std::int64_t,\r\n    std::uint64_t,\r\n    double,\r\n    std::allocator,\r\n    nlohmann::adl_serializer,\r\n    std::vector<std::byte>,\r\n    void\r\n> CustomJson;\r\n\r\nvoid test() {\r\n    CustomJson oauthDataJson = {\r\n        {\"key\", \"value\"}\r\n    };\r\n    auto result = CustomJson::to_bson(oauthDataJson);\r\n\r\n    // This won't compile because static_assert will fail \r\n    static_assert(std::is_same_v<CustomJson::binary_t, decltype(result)>);\r\n}\r\n```\n\n### Expected vs. actual results\n\n- Expected:\r\n    -  `static_assert(std::is_same_v<CustomJson::binary_t, decltype(result)>)` shouldn't fail\r\n\r\n- Actual\r\n    - `static_assert(std::is_same_v<CustomJson::binary_t, decltype(result)>)` fails\r\n\n\n### Minimal code example\n\n```Shell\n// Same as `Reproduction Steps`\r\n\r\n#include <type_traits>\r\n\r\ntypedef nlohmann::basic_json<\r\n    std::map,\r\n    std::vector,\r\n    std::string,\r\n    bool,\r\n    std::int64_t,\r\n    std::uint64_t,\r\n    double,\r\n    std::allocator,\r\n    nlohmann::adl_serializer,\r\n    std::vector<std::byte>,\r\n    void\r\n> CustomJson;\r\n\r\nvoid test() {\r\n    CustomJson oauthDataJson = {\r\n        {\"key\", \"value\"}\r\n    };\r\n    auto result = CustomJson::to_bson(oauthDataJson);\r\n\r\n    // This won't compile because static_assert will fail \r\n    static_assert(std::is_same_v<CustomJson::binary_t, decltype(result)>);\r\n}\n```\n\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nall\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4072/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4072/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4058",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4058/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4058/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4058/events",
    "html_url": "https://github.com/nlohmann/json/issues/4058",
    "id": 1761189637,
    "node_id": "I_kwDOAKp23M5o-Z8F",
    "number": 4058,
    "title": "Feat: hash pin github workflow dependencies",
    "user": {
      "login": "joycebrum",
      "id": 22223372,
      "node_id": "MDQ6VXNlcjIyMjIzMzcy",
      "avatar_url": "https://avatars.githubusercontent.com/u/22223372?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/joycebrum",
      "html_url": "https://github.com/joycebrum",
      "followers_url": "https://api.github.com/users/joycebrum/followers",
      "following_url": "https://api.github.com/users/joycebrum/following{/other_user}",
      "gists_url": "https://api.github.com/users/joycebrum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/joycebrum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/joycebrum/subscriptions",
      "organizations_url": "https://api.github.com/users/joycebrum/orgs",
      "repos_url": "https://api.github.com/users/joycebrum/repos",
      "events_url": "https://api.github.com/users/joycebrum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/joycebrum/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-06-16T19:17:58Z",
    "updated_at": "2023-11-24T20:14:48Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nHi again, I'd like to suggest another security practice recommended by the [OpenSSF Scorecard][scorecard-repo] which is to hash pin dependencies to prevent dependency-confusion, typosquatting and tag renaming attacks. Besides this is currently the only way to make your CI run as an immutable release.\r\n\r\nThe change would only be applied to GitHub workflows, dockerfiles and shell scripts dependencies.\r\n\r\nThis means:\r\n- Hash pinning GitHub Workflow actions.\r\n- Using --require-hashes on pip installs.\r\n\r\nI can submit one PR for each type of change above to be easier to review if you prefer. Just let me know if that's the case.\r\n\r\nAlso it might be important to notice that the dependabot, that seems to be already enabled, is able to update both the hash and the comment version related to it.\r\n\r\nLet me know if you are open to evaluate those changes and I'll submit the PR(s) ASAP. \r\n\r\nAny questions or concerns just let me know.\r\nThanks!\r\n\r\n### Additional Context\r\n<!--workflows -->\r\nA tag renaming attack is a type of attack whereby an attacker:\r\n- Hijack an **action**.\r\n- Upload a malicious version.\r\n- Replace existing tags with malicious versions.\r\n\r\nBoth Dependency Confusion and Typosquatting attacks are more applicable to package managers (such as pip, npm, choco, etc)\r\n<!--package managers-->\r\nA [dependency-confusion][deps-confusion] attack occurs when an attacker:\r\n- Find the name of a package that the victims wants to install\r\n- Create an identically named package and publish it under the public or default registry.\r\n- Assign the package with a higher version number to trick the package manager tool to download it from the public repo.\r\n\r\n<!--both--> \r\nA [typosquatting attack][typosquatting] is a type of attack whereby an attacker:\r\n- Create a malicious package\r\n- Publish it with a similar name of a known package (example: numpi instead of numpy)\r\n\r\n<!-- useful links -->\r\n[scorecard-repo]: https://github.com/ossf/scorecard\r\n[deps-confusion]: https://www.websecuritylens.org/how-dependency-confusion-attack-works-and-how-to-prevent-it/ \r\n[typosquatting]: https://snyk.io/blog/typosquatting-attacks/ \r\n\r\n### Reproduction steps\r\n\r\nNone\r\n\r\n### Expected vs. actual results\r\n\r\n#### Actions\r\n\r\nCurrent\r\n```yml\r\nactions/checkout@v3\r\n```\r\n\r\nExpected\r\n```yml\r\nactions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3\r\n```\r\n\r\n#### Pip installs\r\n\r\nCurrent\r\n```yml\r\nrun: python -m pip install reuse\r\n```\r\n\r\nExpected\r\n```yml\r\nrun: python -m pip install --require-hashes -r ci-deps.txt\r\n```\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\nNone\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nNone - not a bug\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nNone\r\n\r\n### Library version\r\n\r\nNone\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4058/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4051",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4051/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4051/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4051/events",
    "html_url": "https://github.com/nlohmann/json/issues/4051",
    "id": 1749701531,
    "node_id": "I_kwDOAKp23M5oSlOb",
    "number": 4051,
    "title": "compiler error using clang-16.0.5 when using gcc-13.1 standard library",
    "user": {
      "login": "janwilmans",
      "id": 5933444,
      "node_id": "MDQ6VXNlcjU5MzM0NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5933444?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/janwilmans",
      "html_url": "https://github.com/janwilmans",
      "followers_url": "https://api.github.com/users/janwilmans/followers",
      "following_url": "https://api.github.com/users/janwilmans/following{/other_user}",
      "gists_url": "https://api.github.com/users/janwilmans/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/janwilmans/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/janwilmans/subscriptions",
      "organizations_url": "https://api.github.com/users/janwilmans/orgs",
      "repos_url": "https://api.github.com/users/janwilmans/repos",
      "events_url": "https://api.github.com/users/janwilmans/events{/privacy}",
      "received_events_url": "https://api.github.com/users/janwilmans/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-06-09T11:19:24Z",
    "updated_at": "2023-06-09T11:19:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nhttps://godbolt.org/z/jnxMe6veT\r\n\r\nworkaround: -DJSON_HAS_RANGES=0\r\n\n\n### Reproduction steps\n\nna.\n\n### Expected vs. actual results\n\nno compilation error vs. compilation error\n\n### Minimal code example\n\n```Shell\n#include <nlohmann/json.hpp>\r\n#include <sstream>\r\n#include <iomanip>\r\n\r\nusing nlohmann::json;\r\n\r\nint main()\r\n{\r\n    std::stringstream ss;\r\n    json j = {\"foo\", 1, 2, 3, false, {{\"one\", 1}}};\r\n    ss << std::setw(1) << std::setfill('\\t') << j;\r\n\r\n}\n```\n\n\n### Error messages\n\n```Shell\nIn file included from <source>:1:\r\nIn file included from /opt/compiler-explorer/libs/nlohmann_json/trunk/single_include/nlohmann/json.hpp:5097:\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:6151:14: error: requires clause differs in template redeclaration\r\n    requires forward_range<_Vp>\r\n             ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:5850:14: note: previous template declaration is here\r\n    requires input_range<_Vp>\r\n             ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:8846:20: error: type-id cannot have a name\r\n    { return (auto(__x) += __y); }\r\n                   ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:8846:25: error: expected ')'\r\n    { return (auto(__x) += __y); }\r\n                        ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:8846:14: note: to match this '('\r\n    { return (auto(__x) += __y); }\r\n             ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:8846:32: error: expected expression\r\n    { return (auto(__x) += __y); }\r\n                               ^\r\n4 errors generated.\r\nASM generation compiler returned: 1\r\nIn file included from <source>:1:\r\nIn file included from /opt/compiler-explorer/libs/nlohmann_json/trunk/single_include/nlohmann/json.hpp:5097:\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:6151:14: error: requires clause differs in template redeclaration\r\n    requires forward_range<_Vp>\r\n             ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:5850:14: note: previous template declaration is here\r\n    requires input_range<_Vp>\r\n             ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:8846:20: error: type-id cannot have a name\r\n    { return (auto(__x) += __y); }\r\n                   ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:8846:25: error: expected ')'\r\n    { return (auto(__x) += __y); }\r\n                        ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:8846:14: note: to match this '('\r\n    { return (auto(__x) += __y); }\r\n             ^\r\n/opt/compiler-explorer/gcc-13.1.0/lib/gcc/x86_64-linux-gnu/13.1.0/../../../../include/c++/13.1.0/ranges:8846:32: error: expected expression\r\n    { return (auto(__x) += __y); }\r\n                               ^\r\n4 errors generated.\r\nExecution build compiler returned: 1\n```\n\n\n### Compiler and operating system\n\nLinux, clang-16.0.5+gcc-13.1 standard library\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4051/reactions",
      "total_count": 7,
      "+1": 7,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4051/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4049",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4049/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4049/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4049/events",
    "html_url": "https://github.com/nlohmann/json/issues/4049",
    "id": 1748144624,
    "node_id": "I_kwDOAKp23M5oMpHw",
    "number": 4049,
    "title": "Importing std and redefined symbols",
    "user": {
      "login": "mickes27",
      "id": 5618183,
      "node_id": "MDQ6VXNlcjU2MTgxODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5618183?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mickes27",
      "html_url": "https://github.com/mickes27",
      "followers_url": "https://api.github.com/users/mickes27/followers",
      "following_url": "https://api.github.com/users/mickes27/following{/other_user}",
      "gists_url": "https://api.github.com/users/mickes27/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mickes27/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mickes27/subscriptions",
      "organizations_url": "https://api.github.com/users/mickes27/orgs",
      "repos_url": "https://api.github.com/users/mickes27/repos",
      "events_url": "https://api.github.com/users/mickes27/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mickes27/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-06-08T15:25:08Z",
    "updated_at": "2023-06-08T15:25:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nWhen exporting C++20 module with imported nlohmann::json as header unit and std module, a lot of redefinition errors occurs. This is not visible when importing iostream as header unit instead of std module.\r\n\r\n### Reproduction steps\r\n\r\nCreate primary interface module and import std module and nlohmann::json as header unit\r\n\r\n### Expected vs. actual results\r\n\r\nIt is expected to compile code without any error. As actual result, compilation fails.\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\nexport module foo;\r\nimport std;\r\nimport <nlohmann/json.hpp>;\r\n\r\nexport class foo {\r\npublic:\r\n\tvoid helloworld();\r\n};\r\n\r\nvoid foo::helloworld()\r\n{\r\n\tnlohmann::json v;\r\n\tv[\"example\"] = \"value\";\r\n\tstd::cout << v.dump() << std::endl;\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xstring(2358,52): error C2572: 'std::basic_string': redefinition of default argument: parameter 1 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xstring(2359,1): message : see declaration of 'std::basic_string' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xstring(2358,87): error C2572: 'std::basic_string': redefinition of default argument: parameter 2 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xstring(2359,1): message : see declaration of 'std::basic_string' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\vector(437,49): error C2572: 'std::vector': redefinition of default argument: parameter 1 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\format(71,7): message : see declaration of 'std::vector' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xstddef(135,35): error C2572: 'std::less': redefinition of default argument: parameter 1 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xstddef(136,1): message : see declaration of 'std::less' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(42,47): error C2572: 'std::enable_if': redefinition of default argument: parameter 1 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(43,1): message : see declaration of 'std::enable_if' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(116,9): error C7570: 'std::move_constructible': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(116,9): message : see declaration of 'std::move_constructible' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  PrivatePath\\JsonModule\\include\\JsonModule\\json.ixx(12,17): message : see reference to class template instantiation 'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>' being compiled [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(105,9): error C7570: 'std::constructible_from': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(105,9): message : see declaration of 'std::constructible_from' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(102,9): error C7570: 'std::destructible': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(102,9): message : see declaration of 'std::destructible' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(44,9): error C7570: 'std::convertible_to': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(44,9): message : see declaration of 'std::convertible_to' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(93,9): error C7570: 'std::assignable_from': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(93,9): message : see declaration of 'std::assignable_from' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(56,9): error C7570: 'std::common_reference_with': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(56,9): message : see declaration of 'std::common_reference_with' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(36,9): error C7570: 'std::same_as': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(36,9): message : see declaration of 'std::same_as' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nPrivatePath\\JsonModule\\include\\JsonModule\\json.ixx(12,1): error C2752: 'std::vector<bool,std::allocator<bool>>': more than one partial specialization matches the template argument list \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\vector(2212): message : could be 'std::vector<bool,_Alloc>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\vector(2212): message : or       'std::vector<bool,_Alloc>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xutility(591,9): error C7570: 'std::input_iterator': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xutility(591,9): message : see declaration of 'std::input_iterator' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  PrivatePath\\JsonModule\\include\\JsonModule\\json.ixx(12,1): message : see reference to class template instantiation 'std::vector<bool,std::allocator<bool>>' being compiled [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\__msvc_iter_core.hpp(391,9): error C7570: 'std::input_or_output_iterator': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\__msvc_iter_core.hpp(391,9): message : see declaration of 'std::input_or_output_iterator' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\__msvc_iter_core.hpp(378,9): error C7570: 'std::weakly_incrementable': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\__msvc_iter_core.hpp(378,9): message : see declaration of 'std::weakly_incrementable' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(253,9): error C7570: 'std::movable': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(253,9): message : see declaration of 'std::movable' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(167,9): error C7570: 'std::swappable': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(167,9): message : see declaration of 'std::swappable' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xutility(509,9): error C7570: 'std::indirectly_readable': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xutility(509,9): message : see declaration of 'std::indirectly_readable' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(39,9): error C7570: 'std::derived_from': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(39,9): message : see declaration of 'std::derived_from' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\map(72,58): error C2572: 'std::map': redefinition of default argument: parameter 1 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\map(73,1): message : see declaration of 'std::map' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\map(72,85): error C2572: 'std::map': redefinition of default argument: parameter 2 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\map(73,1): message : see declaration of 'std::map' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nPrivatePath\\JsonModule\\out\\build\\x64-Debug\\_deps\\json-src\\include\\nlohmann\\detail\\iterators\\iter_impl.hpp(50): error C2752: 'std::conditional<false,nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>,const BasicJsonType>': more than one partial specialization matches the template argument list \r\n            with\r\n            [\r\n                BasicJsonType=nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>\r\n            ]\r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(59): message : could be 'std::conditional<false,_Ty1,_Ty2>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(59): message : or       'std::conditional<false,_Ty1,_Ty2>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  PrivatePath\\JsonModule\\out\\build\\x64-Debug\\_deps\\json-src\\include\\nlohmann\\json.hpp(730,1): message : see reference to class template instantiation 'nlohmann::json_abi_v3_11_2::detail::iter_impl<nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>>' being compiled [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\__msvc_iter_core.hpp(395,9): error C7570: 'std::sentinel_for': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\__msvc_iter_core.hpp(395,9): message : see declaration of 'std::sentinel_for' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(266,9): error C7570: 'std::semiregular': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(266,9): message : see declaration of 'std::semiregular' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(259,9): error C7570: 'std::copyable': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(259,9): message : see declaration of 'std::copyable' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(181,9): error C7570: 'std::copy_constructible': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(181,9): message : see declaration of 'std::copy_constructible' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(109,9): error C7570: 'std::default_initializable': variable template has already been defined \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\concepts(109,9): message : see declaration of 'std::default_initializable' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nPrivatePath\\JsonModule\\out\\build\\x64-Debug\\_deps\\json-src\\include\\nlohmann\\detail\\iterators\\iter_impl.hpp(82,1): error C2752: 'std::conditional<false,const nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>> *,nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>> *>': more than one partial specialization matches the template argument list \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(59): message : could be 'std::conditional<false,_Ty1,_Ty2>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(59): message : or       'std::conditional<false,_Ty1,_Ty2>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nPrivatePath\\JsonModule\\out\\build\\x64-Debug\\_deps\\json-src\\include\\nlohmann\\detail\\iterators\\iter_impl.hpp(87,1): error C2752: 'std::conditional<false,const nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>> &,nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>> &>': more than one partial specialization matches the template argument list \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(59): message : could be 'std::conditional<false,_Ty1,_Ty2>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(59): message : or       'std::conditional<false,_Ty1,_Ty2>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xstring(930,52): error C2572: 'std::basic_string_view': redefinition of default argument: parameter 1 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xstring(1202,1): message : see declaration of 'std::basic_string_view' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\iosfwd(191,52): error C2572: 'std::basic_stringbuf': redefinition of default argument: parameter 1 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\sstream(24,1): message : see declaration of 'std::basic_stringbuf' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  PrivatePath\\JsonModule\\include\\JsonModule\\json.ixx(12): message : see reference to class template instantiation 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' being compiled [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\iosfwd(191,87): error C2572: 'std::basic_stringbuf': redefinition of default argument: parameter 2 \r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\sstream(24,1): message : see declaration of 'std::basic_stringbuf' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nPrivatePath\\JsonModule\\include\\JsonModule\\json.ixx(13,13): error C2752: 'std::remove_reference<const char (&)[8]>': more than one partial specialization matches the template argument list [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(209): message : could be 'std::remove_reference<_Ty&>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.36.32532\\include\\xtr1common(209): message : or       'std::remove_reference<_Ty&>' [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\n  PrivatePath\\JsonModule\\out\\build\\x64-Debug\\_deps\\json-src\\include\\nlohmann\\detail\\meta\\type_traits.hpp(522,87): message : see reference to alias template instantiation 'nlohmann::json_abi_v3_11_2::detail::uncvref_t<const char(&)[8]>' being compiled [PrivatePath\\JsonModule\\out\\build\\x64-Debug\\json.vcxproj]\r\nPrivatePath\\JsonModule\\include\\JsonModule\\json.ixx(13,1): fatal error C1117: unrecoverable error importing module 'std': symbol 'id' has already been defined\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nVisual Studio 2022 17.6.2\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4049/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4049/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4041",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4041/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4041/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4041/events",
    "html_url": "https://github.com/nlohmann/json/issues/4041",
    "id": 1722658321,
    "node_id": "I_kwDOAKp23M5mra4R",
    "number": 4041,
    "title": "NLOHMANN_DEFINE_TYPE_* fails with zero members",
    "user": {
      "login": "dawinaj",
      "id": 7432818,
      "node_id": "MDQ6VXNlcjc0MzI4MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7432818?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dawinaj",
      "html_url": "https://github.com/dawinaj",
      "followers_url": "https://api.github.com/users/dawinaj/followers",
      "following_url": "https://api.github.com/users/dawinaj/following{/other_user}",
      "gists_url": "https://api.github.com/users/dawinaj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dawinaj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dawinaj/subscriptions",
      "organizations_url": "https://api.github.com/users/dawinaj/orgs",
      "repos_url": "https://api.github.com/users/dawinaj/repos",
      "events_url": "https://api.github.com/users/dawinaj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dawinaj/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-05-23T19:27:59Z",
    "updated_at": "2023-08-02T11:06:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI found it annoying when working with multiple tiny polymorphic classes, trying to provide identical interface for each of them, that I can't use the macro for a class that has no members to (de)serialize.\n\n### Reproduction steps\n\nUse (probably) any of the `NLOHMANN_DEFINE_TYPE_*` macros with only first argument and no members.\r\nF.e. `NLOHMANN_DEFINE_TYPE_INTRUSIVE(MyClass)`\n\n### Expected vs. actual results\n\nExpected:\r\n```\r\nfriend void to_json(nlohmann::json&, const MyClass&) {}\r\nfriend void from_json(const nlohmann::json&, MyClass&) {}\r\n```\r\n\r\nActual:\r\n```\r\nfriend void to_json(nlohmann::json& nlohmann_json_j, const MyClass& nlohmann_json_t) {\r\n\tnlohmann_json_j[] = nlohmann_json_t.;\r\n}\r\nfriend void from_json(const nlohmann::json& nlohmann_json_j, MyClass& nlohmann_json_t) {\r\n\tnlohmann_json_j.at().get_to(nlohmann_json_t.);\r\n}\r\n```\n\n### Minimal code example\n\n```Shell\nclass MyClass\r\n{\r\n\tNLOHMANN_DEFINE_TYPE_INTRUSIVE(MyClass);\r\n};\n```\n\n\n### Error messages\n\n```Shell\nError\tC2661\t'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::at': no overloaded function takes 0 arguments\r\nError\tC2661\t'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::at': no overloaded function takes 0 arguments\r\nError\tC2661\t'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::at': no overloaded function takes 0 arguments\r\nError\tC2661\t'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::at': no overloaded function takes 0 arguments\r\nError\tC2059\tsyntax error: ')'\r\nError\tC2059\tsyntax error: ')'\r\nError\tC2059\tsyntax error: ')'\r\nError\tC2059\tsyntax error: ')'\r\nError\tC2059\tsyntax error: ']'\r\nError\tC2059\tsyntax error: ']'\r\nError\tC2059\tsyntax error: ']'\r\nError\tC2059\tsyntax error: ']'\n```\n\n\n### Compiler and operating system\n\nMicrosoft Visual C++ 2022\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4041/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4041/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4026",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4026/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4026/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4026/events",
    "html_url": "https://github.com/nlohmann/json/issues/4026",
    "id": 1700427306,
    "node_id": "I_kwDOAKp23M5lWnYq",
    "number": 4026,
    "title": "Missing requirement on `plantuml` binary package",
    "user": {
      "login": "schuylermartin45",
      "id": 2274413,
      "node_id": "MDQ6VXNlcjIyNzQ0MTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2274413?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schuylermartin45",
      "html_url": "https://github.com/schuylermartin45",
      "followers_url": "https://api.github.com/users/schuylermartin45/followers",
      "following_url": "https://api.github.com/users/schuylermartin45/following{/other_user}",
      "gists_url": "https://api.github.com/users/schuylermartin45/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schuylermartin45/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schuylermartin45/subscriptions",
      "organizations_url": "https://api.github.com/users/schuylermartin45/orgs",
      "repos_url": "https://api.github.com/users/schuylermartin45/repos",
      "events_url": "https://api.github.com/users/schuylermartin45/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schuylermartin45/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 395133926,
        "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/documentation",
        "name": "documentation",
        "color": "0e8a16",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2023-05-08T15:02:06Z",
    "updated_at": "2023-05-08T15:08:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nApologies that this is coming in as a bug. I cannot seem to select this as a documentation issue. I assume someone else has the ability to change the type after submission.\r\n\r\nAs outlined in the discussion coming from #3942 and https://github.com/nlohmann/json/pull/4024, as someone who is trying to contribute to the documentation for the first time, it is not clear that `plantuml` is a depedency required to run the documentation engine.\r\n\r\nIn order for me to run the `mkdocs` instance for the first time, I needed to `brew install plantuml` on my Mac or `sudo apt install plantuml` on my Ubuntu machine. The [README](https://github.com/nlohmann/json/tree/develop/docs) discussing how to run the `mkdocs` project does not mention this requirement.\r\n\r\nI see this as a documentation issue first, but arguably we could add a `make` directive to or have some other mechanism to ensure the required dependency is installed to the system attempting to run the documentation server.\n\n### Reproduction steps\n\n1. Fork and Clone this project for the first time\r\n2. Attempt to run the `make install_venv serve -C docs/mkdocs` command, as described in the `docs/README.md` file\r\n3. Expect this to fail if you do not have the `plantuml` MacOS/Debian/etc package installed previously on your system\n\n### Expected vs. actual results\n\nIf the docs suggest that all I need to do is run a `make` command to start the documentation server, I would expect that is all I need to do as a new contributor to the project. This caused some confusion and a potential waste of everyone's time trying to debug something minor.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nMacOS/Linux\n\n### Library version\n\ndevelopment\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4026/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4019",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4019/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4019/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4019/events",
    "html_url": "https://github.com/nlohmann/json/issues/4019",
    "id": 1685563092,
    "node_id": "I_kwDOAKp23M5kd6bU",
    "number": 4019,
    "title": "flatten() function does not compile if an alternative string type is used",
    "user": {
      "login": "FonsDC",
      "id": 30828441,
      "node_id": "MDQ6VXNlcjMwODI4NDQx",
      "avatar_url": "https://avatars.githubusercontent.com/u/30828441?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/FonsDC",
      "html_url": "https://github.com/FonsDC",
      "followers_url": "https://api.github.com/users/FonsDC/followers",
      "following_url": "https://api.github.com/users/FonsDC/following{/other_user}",
      "gists_url": "https://api.github.com/users/FonsDC/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/FonsDC/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/FonsDC/subscriptions",
      "organizations_url": "https://api.github.com/users/FonsDC/orgs",
      "repos_url": "https://api.github.com/users/FonsDC/repos",
      "events_url": "https://api.github.com/users/FonsDC/events{/privacy}",
      "received_events_url": "https://api.github.com/users/FonsDC/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-04-26T19:08:01Z",
    "updated_at": "2023-04-26T19:12:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nThe `flatten()` function does not compile if an alternative string type is used, like in the `unit-alt-string.cpp` unit test\n\n### Reproduction steps\n\nAdd this test section to `unit-alt-string.cpp` and build the unit tests:\r\n```\r\nSECTION(\"flatten\")\r\n{\r\n  alt_json j = alt_json::parse(R\"({\"foo\": [\"bar\", \"baz\"]})\");\r\n  auto j2 = j.flatten();\r\n}\r\n```\n\n### Expected vs. actual results\n\nCompilation fails. See error output below.\n\n### Minimal code example\n\n```Shell\nSee \"Reproduction steps\"\n```\n\n\n### Error messages\n\n```Shell\n[  4%] Building CXX object tests/CMakeFiles/test-alt-string_cpp11.dir/src/unit-alt-string.cpp.o\r\nIn file included from /_install/json-3.11.2/include/nlohmann/json.hpp:50,\r\n                 from /_install/json-3.11.2/tests/src/unit-alt-string.cpp:12:\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp: In instantiation of ‘static void nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::flatten(const string_t&, const BasicJsonType&, BasicJsonType&) [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<std::map, std::vector, alt_string, bool, long int, long unsigned int, double, std::allocator, nlohmann::json_abi_v3_11_2::adl_serializer>; RefStringType = alt_string; nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::string_t = alt_string]’:\r\n/_install/json-3.11.2/include/nlohmann/json.hpp:4646:30:   required from ‘nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType> nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::flatten() const [with ObjectType = std::map; ArrayType = std::vector; StringType = alt_string; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_2::adl_serializer; BinaryType = std::vector<unsigned char>]’\r\n/_install/json-3.11.2/tests/src/unit-alt-string.cpp:331:28:   required from here\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp:753:32: error: no matching function for call to ‘nlohmann::json_abi_v3_11_2::json_pointer<alt_string>::flatten(std::__cxx11::basic_string<char>, __gnu_cxx::__alloc_traits<std::allocator<nlohmann::json_abi_v3_11_2::basic_json<std::map, std::vector, alt_string, bool, long int, long unsigned int, double, std::allocator, nlohmann::json_abi_v3_11_2::adl_serializer> >, nlohmann::json_abi_v3_11_2::basic_json<std::map, std::vector, alt_string, bool, long int, long unsigned int, double, std::allocator, nlohmann::json_abi_v3_11_2::adl_serializer> >::value_type&, nlohmann::json_abi_v3_11_2::basic_json<std::map, std::vector, alt_string, bool, long int, long unsigned int, double, std::allocator, nlohmann::json_abi_v3_11_2::adl_serializer>&)’\r\n  753 |                         flatten(detail::concat(reference_string, '/', std::to_string(i)),\r\n      |                         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  754 |                                 value.m_value.array->operator[](i), result);\r\n      |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp:735:17: note: candidate: ‘template<class BasicJsonType> static void nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::flatten(const string_t&, const BasicJsonType&, BasicJsonType&) [with BasicJsonType = BasicJsonType; RefStringType = alt_string]’\r\n  735 |     static void flatten(const string_t& reference_string,\r\n      |                 ^~~~~~~\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp:735:17: note:   template argument deduction/substitution failed:\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp:753:32: note:   cannot convert ‘nlohmann::json_abi_v3_11_2::detail::concat(Args&& ...) [with OutStringType = std::__cxx11::basic_string<char>; Args = {const alt_string&, char, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >}]('/', std::__cxx11::to_string(long unsigned int)())’ (type ‘std::__cxx11::basic_string<char>’) to type ‘const string_t&’ {aka ‘const alt_string&’}\r\n  753 |                         flatten(detail::concat(reference_string, '/', std::to_string(i)),\r\n      |                         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  754 |                                 value.m_value.array->operator[](i), result);\r\n      |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp:772:32: error: no matching function for call to ‘nlohmann::json_abi_v3_11_2::json_pointer<alt_string>::flatten(std::__cxx11::basic_string<char>, const nlohmann::json_abi_v3_11_2::basic_json<std::map, std::vector, alt_string, bool, long int, long unsigned int, double, std::allocator, nlohmann::json_abi_v3_11_2::adl_serializer>&, nlohmann::json_abi_v3_11_2::basic_json<std::map, std::vector, alt_string, bool, long int, long unsigned int, double, std::allocator, nlohmann::json_abi_v3_11_2::adl_serializer>&)’\r\n  772 |                         flatten(detail::concat(reference_string, '/', detail::escape(element.first)), element.second, result);\r\n      |                         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp:735:17: note: candidate: ‘template<class BasicJsonType> static void nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::flatten(const string_t&, const BasicJsonType&, BasicJsonType&) [with BasicJsonType = BasicJsonType; RefStringType = alt_string]’\r\n  735 |     static void flatten(const string_t& reference_string,\r\n      |                 ^~~~~~~\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp:735:17: note:   template argument deduction/substitution failed:\r\n/_install/json-3.11.2/include/nlohmann/detail/json_pointer.hpp:772:32: note:   cannot convert ‘nlohmann::json_abi_v3_11_2::detail::concat(Args&& ...) [with OutStringType = std::__cxx11::basic_string<char>; Args = {const alt_string&, char, alt_string}]('/', nlohmann::json_abi_v3_11_2::detail::escape(StringType) [with StringType = alt_string]())’ (type ‘std::__cxx11::basic_string<char>’) to type ‘const string_t&’ {aka ‘const alt_string&’}\r\n  772 |                         flatten(detail::concat(reference_string, '/', detail::escape(element.first)), element.second, result);\r\n      |                         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\ngmake[2]: *** [tests/CMakeFiles/test-alt-string_cpp11.dir/build.make:76: tests/CMakeFiles/test-alt-string_cpp11.dir/src/unit-alt-string.cpp.o] Error 1\r\ngmake[1]: *** [CMakeFiles/Makefile2:1291: tests/CMakeFiles/test-alt-string_cpp11.dir/all] Error 2\r\ngmake: *** [Makefile:146: all] Error 2\n```\n\n\n### Compiler and operating system\n\nOperating system: Rocky Linux release 8.7\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [x] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4019/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4014",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4014/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4014/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4014/events",
    "html_url": "https://github.com/nlohmann/json/issues/4014",
    "id": 1670250636,
    "node_id": "I_kwDOAKp23M5jjgCM",
    "number": 4014,
    "title": "`nlohhman::to_string()` default implementation shadows user defined one",
    "user": {
      "login": "namaenonaimumei",
      "id": 50381836,
      "node_id": "MDQ6VXNlcjUwMzgxODM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/50381836?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/namaenonaimumei",
      "html_url": "https://github.com/namaenonaimumei",
      "followers_url": "https://api.github.com/users/namaenonaimumei/followers",
      "following_url": "https://api.github.com/users/namaenonaimumei/following{/other_user}",
      "gists_url": "https://api.github.com/users/namaenonaimumei/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/namaenonaimumei/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/namaenonaimumei/subscriptions",
      "organizations_url": "https://api.github.com/users/namaenonaimumei/orgs",
      "repos_url": "https://api.github.com/users/namaenonaimumei/repos",
      "events_url": "https://api.github.com/users/namaenonaimumei/events{/privacy}",
      "received_events_url": "https://api.github.com/users/namaenonaimumei/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 735376215,
        "node_id": "MDU6TGFiZWw3MzUzNzYyMTU=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20needs%20more%20info",
        "name": "state: needs more info",
        "color": "f9d0c4",
        "default": false,
        "description": "the author of the issue needs to provide more details"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2023-04-17T01:29:58Z",
    "updated_at": "2023-04-22T21:48:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nI am not really sure how to go about using user-defined `nlohhman::to_string()` (in a consistent manner).\r\n\r\nIs there any reason for this template to be implemented on nlohmann side at all (since it's pretty much `.dump()` alias anyway).\r\n\r\n\r\nIf this wasn't intended, is there any chance to alter this behaviour.\r\n\r\n### Reproduction steps\r\n\r\nExample for context below, granted this template behaviour is to be expected so I'm not really sure how provided [example](https://json.nlohmann.me/api/basic_json/to_string/#examples) was supposed to work in the first place, unless user version is not supposed to be implemented inside `nlohmann`, which seems inconsistent for using with rest of the API (that or I missed something obvious in documentation linked).\r\n\r\n### Expected vs. actual results\r\n\r\nRemoving example implementation and leaving implementing up to user or providing macro to enable default one seems like a good alternative.\r\n\r\n### Minimal code example\r\n\r\nExample user implementation\r\n```cpp\r\nnamespace nlohmann // same for namespace \"ns\" in examples below\r\n{\r\ntemplate<typename BasicJsonType>\r\nstd::string to_string(const BasicJsonType &j)\r\n{\r\n    if (j.type() == nlohmann::json::value_t::string)\r\n        return j.template get<std::string>();\r\n    else\r\n        return j.dump();\r\n}\r\n}\r\n\r\n```\r\nExample calls\r\n```cpp\r\n// All examples below prioritize internal/first implementation\r\nstd::cout << nlohmann::to_string(jsonobj[\"key\"]) << std::endl;\r\nstd::cout << to_string(jsonobj[\"key\"]) << std::endl;\r\n{\r\n    using namespace nlohmann;\r\n    std::cout << to_string(jsonobj[\"key\"]) << std::endl;\r\n}\r\n{\r\n    using namespace ns;\r\n    std::cout << to_string(jsonobj[\"key\"]) << std::endl;\r\n}\r\n// Calls like these still work\r\nstd::cout << ns::to_string(jsonobj[\"key\"]) << std::endl;\r\n```\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\ngcc 12.2.1\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4014/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4014/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/4002",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/4002/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/4002/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/4002/events",
    "html_url": "https://github.com/nlohmann/json/issues/4002",
    "id": 1661456637,
    "node_id": "I_kwDOAKp23M5jB9D9",
    "number": 4002,
    "title": "Doesn't seem to work with Clang C++20 modules",
    "user": {
      "login": "rnikander",
      "id": 1702134,
      "node_id": "MDQ6VXNlcjE3MDIxMzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1702134?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnikander",
      "html_url": "https://github.com/rnikander",
      "followers_url": "https://api.github.com/users/rnikander/followers",
      "following_url": "https://api.github.com/users/rnikander/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnikander/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnikander/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnikander/subscriptions",
      "organizations_url": "https://api.github.com/users/rnikander/orgs",
      "repos_url": "https://api.github.com/users/rnikander/repos",
      "events_url": "https://api.github.com/users/rnikander/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnikander/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-04-10T22:16:35Z",
    "updated_at": "2023-05-09T18:22:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI'm not sure if this is a bug in Clang, or in this library. I've been using C++20 modules there but they do have some problems.\r\n\r\nhttps://godbolt.org/z/ndqTvEzGj\r\n\r\nI linked to Clang 16.0.0, because as of right now, the trunk is segfaulting. It's been doing that for a few days now. But normally I use Clang trunk when I can. \n\n### Reproduction steps\n\nLook at the godbolt example, it shows the error. It's a minimal example with no other code in the files.\n\n### Expected vs. actual results\n\nThis cryptic compiler error shouldn't be happening.\n\n### Minimal code example\n\n```Shell\nhttps://godbolt.org/z/ndqTvEzGj\n```\n\n\n### Error messages\n\n```Shell\n/opt/compiler-explorer/clang-16.0.0/bin/clang++ --gcc-toolchain=/opt/compiler-explorer/gcc-12.2.0   -fcolor-diagnostics -fno-crash-diagnostics -std=c++20 -isystem/opt/compiler-explorer/libs/nlohmann_json/trunk/single_include -g -MD -MT CMakeFiles/mod_json_bug.dir/Mod1_Impl.cc.o -MF CMakeFiles/mod_json_bug.dir/Mod1_Impl.cc.o.d @CMakeFiles/mod_json_bug.dir/Mod1_Impl.cc.o.modmap -o CMakeFiles/mod_json_bug.dir/Mod1_Impl.cc.o -c /app/Mod1_Impl.cc\r\nIn file included from /app/Mod1_Impl.cc:2:\r\n/opt/compiler-explorer/libs/nlohmann_json/trunk/single_include/nlohmann/json.hpp:14438:13: error: no matching function for call to 'unescape'\r\n            detail::unescape(reference_token);\r\n            ^~~~~~~~~~~~~~~~\r\n/opt/compiler-explorer/libs/nlohmann_json/trunk/single_include/nlohmann/json.hpp:13782:28: note: in instantiation of member function 'nlohmann::json_pointer<std::basic_string<char>>::split' requested here\r\n        : reference_tokens(split(s))\r\n                           ^\r\n/opt/compiler-explorer/libs/nlohmann_json/trunk/single_include/nlohmann/json.hpp:24402:12: note: in instantiation of member function 'nlohmann::json_pointer<std::basic_string<char>>::json_pointer' requested here\r\n    return nlohmann::json::json_pointer(std::string(s, n));\r\n           ^\n```\n\n\n### Compiler and operating system\n\nlinux, clang, or macos clang\n\n### Library version\n\n6af826d0bdb55e4b69e3ad817576745335f243ca via conan\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/4002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/4002/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3992",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3992/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3992/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3992/events",
    "html_url": "https://github.com/nlohmann/json/issues/3992",
    "id": 1638005071,
    "node_id": "I_kwDOAKp23M5hoflP",
    "number": 3992,
    "title": "NLOHMANN_JSON_SERIALIZE_ENUM defaulting to the first enum value is surprising behavior",
    "user": {
      "login": "bear24rw",
      "id": 778194,
      "node_id": "MDQ6VXNlcjc3ODE5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/778194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bear24rw",
      "html_url": "https://github.com/bear24rw",
      "followers_url": "https://api.github.com/users/bear24rw/followers",
      "following_url": "https://api.github.com/users/bear24rw/following{/other_user}",
      "gists_url": "https://api.github.com/users/bear24rw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bear24rw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bear24rw/subscriptions",
      "organizations_url": "https://api.github.com/users/bear24rw/orgs",
      "repos_url": "https://api.github.com/users/bear24rw/repos",
      "events_url": "https://api.github.com/users/bear24rw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bear24rw/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2023-03-23T17:47:24Z",
    "updated_at": "2024-08-28T09:11:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI had a json document with an invalid enum string. I would like an exception to be raised if the string is not a known conversion back to the enum. I don't want to have to add and check an `Unknown` or `Invalid` enum value which would only be used for json serialization.\r\n\r\nThis is well documented: \"undefined JSON values will default to the first specified conversion.\" but is IMO is surprising behavior since we throw `json.exception.type_error`'s for other type conversions if they fail (like converting an integer in the json document to a `std::string`)\r\n\r\nThis is maybe only a good idea for strongly typed `enum class`'s.\n\n### Reproduction steps\n\n```cpp\r\nnamespace ns\r\n{\r\nenum class Color\r\n{\r\n    red, green, blue // I don't want to define an unknown item just used for json deserialization\r\n};\r\n\r\nNLOHMANN_JSON_SERIALIZE_ENUM(Color,\r\n{\r\n    { Color::red, \"red\" },\r\n    { Color::green, \"green\" },\r\n    { Color::blue, \"blue\" }\r\n})\r\n}\r\n\r\njson some_color_json = \"pink\";\r\ntry {\r\n    auto color = some_color_json.get<ns::Color>();\r\n} catch (json::type_error& e) {\r\n    printf(\"Invalid color!\\n\");\r\n}\r\n```\n\n### Expected vs. actual results\n\nExpected: It prints 'invalid color'\r\nActual: `color` gets set to `Color::red`\r\n\r\nI believe the behavior I am after can be achieved by with this patch\r\n```patch\r\ndiff --git a/include/nlohmann/detail/macro_scope.hpp b/include/nlohmann/detail/macro_scope.hpp\r\nindex 6248bea..9916aac 100644\r\n--- a/include/nlohmann/detail/macro_scope.hpp\r\n+++ b/include/nlohmann/detail/macro_scope.hpp\r\n@@ -215,7 +215,9 @@\r\n         {                                                                                       \\\r\n             return ej_pair.first == e;                                                          \\\r\n         });                                                                                     \\\r\n-        j = ((it != std::end(m)) ? it : std::begin(m))->second;                                 \\\r\n+        if (it == std::end(m))\r\n+            throw ...\r\n+        j = it;\r\n     }                                                                                           \\\r\n     template<typename BasicJsonType>                                                            \\\r\n     inline void from_json(const BasicJsonType& j, ENUM_TYPE& e)                                 \\\r\n@@ -227,7 +229,9 @@\r\n         {                                                                                       \\\r\n             return ej_pair.second == j;                                                         \\\r\n         });                                                                                     \\\r\n-        e = ((it != std::end(m)) ? it : std::begin(m))->first;                                  \\\r\n+        if (it == std::end(m))\r\n+            throw ...\r\n+        e = it;\r\n     }\r\n \r\n // Ugly macros to avoid uglier copy-paste when specializing basic_json. They\r\n```\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nclang 15.0.7\n\n### Library version\n\nv3.11.2\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3992/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3992/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3991",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3991/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3991/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3991/events",
    "html_url": "https://github.com/nlohmann/json/issues/3991",
    "id": 1636543088,
    "node_id": "I_kwDOAKp23M5hi6pw",
    "number": 3991,
    "title": "Compile failure for macos 10.10 SDK + darwin14",
    "user": {
      "login": "jlqibm",
      "id": 87678480,
      "node_id": "MDQ6VXNlcjg3Njc4NDgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/87678480?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jlqibm",
      "html_url": "https://github.com/jlqibm",
      "followers_url": "https://api.github.com/users/jlqibm/followers",
      "following_url": "https://api.github.com/users/jlqibm/following{/other_user}",
      "gists_url": "https://api.github.com/users/jlqibm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jlqibm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jlqibm/subscriptions",
      "organizations_url": "https://api.github.com/users/jlqibm/orgs",
      "repos_url": "https://api.github.com/users/jlqibm/repos",
      "events_url": "https://api.github.com/users/jlqibm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jlqibm/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-03-22T21:49:32Z",
    "updated_at": "2023-03-22T21:51:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nThe json.hpp header fails to build in a cross build environment.  This is an ubuntu 22.04 docker container with darwin14 and MacOSX10.10 SDK.  Clang is \r\n1001@d82e6b7e292b:~$ /usr/x86_64-apple-darwin14/bin/../bin/o64-clang++-libc++ -v\r\nUbuntu clang version 14.0.0-1ubuntu1\r\nTarget: x86_64-apple-darwin14\r\nThread model: posix\r\nInstalledDir: /usr/bin\r\n\r\n\n\n### Reproduction steps\n\nI hit the issue with an osxcross docker container.\r\n\r\nI compile the minimal code example as:\r\n`/usr/x86_64-apple-darwin14/bin/../bin/o64-clang++-libc++  -I/src/libcommon/3rd_party/json/include -o osxfail.o -c osxfail.C`\r\n\r\nThis is clang14.\r\n\r\nThe same file compiles fine on rhel8.7 clang14.\r\n\r\nI tried preprocessing the 2 files, then trimming down the json to try to track down the issue.  The trimmed json is the same for both the linux and osx files.  The only difference is the included header code.  I can reproduce the error using the ubuntu clang14 compiler on the resulting preprocessed file.\n\n### Expected vs. actual results\n\nIt should compile :-)\n\n### Minimal code example\n\n```Shell\n#include <nlohmann/json.hpp>\n```\n\n\n### Error messages\n\n```Shell\n1001@d82e6b7e292b:~$ /usr/x86_64-apple-darwin14/bin/../bin/o64-clang++-libc++  -I/src/libcommon/3rd_party/json/include -o osxfail.o -c osxfail.C \r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:37:\r\nIn file included from /usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/algorithm:626:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/utility:254:9: error: field has incomplete type 'nlohmann::basic_json<>'\r\n    _T2 second;\r\n        ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:588:16: note: in instantiation of template class 'std::pair<const std::basic_string<char>, nlohmann::basic_json<>>' requested here\r\n    value_type __cc;\r\n               ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/__tree:603:16: note: in instantiation of template class 'std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>' requested here\r\n    value_type __value_;\r\n               ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/__tree:625:22: note: in instantiation of template class 'std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *>' requested here\r\n    typedef typename __node::base                                 __node_base;\r\n                     ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:650:19: note: in instantiation of template class 'std::__tree_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>' requested here\r\n    _TreeIterator __i_;\r\n                  ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/internal_iterator.hpp:18:48: note: in instantiation of template class 'std::__map_iterator<std::__tree_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>>' requested here\r\n    typename BasicJsonType::object_t::iterator object_iterator {};\r\n                                               ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/iter_impl.hpp:640:72: note: (skipping 4 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)\r\n    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it {};\r\n                                                                       ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/type_traits:2072:14: note: in instantiation of template class 'std::__is_constructible<false, nlohmann::basic_json<>, nlohmann::basic_json<> &&>' requested here\r\n    : public __is_constructible<is_scalar<_Tp>::value || is_reference<_Tp>::value,\r\n             ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/type_traits:2098:14: note: in instantiation of template class 'std::__is_constructible_void_check<false, nlohmann::basic_json<>, nlohmann::basic_json<> &&>' requested here\r\n    : public __is_constructible_void_check<__contains_void<_Tp, _Args...>::value\r\n             ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/type_traits:2578:34: note: in instantiation of template class 'std::is_constructible<nlohmann::basic_json<>, nlohmann::basic_json<> &&>' requested here\r\n    : __is_nothrow_constructible<is_constructible<_Tp, _Args...>::value, _Tp, _Args...>\r\n                                 ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/type_traits:2713:14: note: in instantiation of template class 'std::is_nothrow_constructible<nlohmann::basic_json<>, nlohmann::basic_json<> &&>' requested here\r\n    : public is_nothrow_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>\r\n             ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8853:5: note: in instantiation of template class 'std::is_nothrow_move_constructible<nlohmann::basic_json<>>' requested here\r\n    is_nothrow_move_constructible<nlohmann::json>::value&&\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json_fwd.hpp:38:7: note: definition of 'nlohmann::basic_json<>' is not complete until the closing '}'\r\nclass basic_json;\r\n      ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:37:\r\nIn file included from /usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/algorithm:626:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/utility:254:9: error: field has incomplete type 'nlohmann::basic_json<>'\r\n    _T2 second;\r\n        ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:589:21: note: in instantiation of template class 'std::pair<std::basic_string<char>, nlohmann::basic_json<>>' requested here\r\n    __nc_value_type __nc;\r\n                    ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/__tree:603:16: note: in instantiation of template class 'std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>' requested here\r\n    value_type __value_;\r\n               ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/__tree:625:22: note: in instantiation of template class 'std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *>' requested here\r\n    typedef typename __node::base                                 __node_base;\r\n                     ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:650:19: note: in instantiation of template class 'std::__tree_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>' requested here\r\n    _TreeIterator __i_;\r\n                  ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/internal_iterator.hpp:18:48: note: in instantiation of template class 'std::__map_iterator<std::__tree_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>>' requested here\r\n    typename BasicJsonType::object_t::iterator object_iterator {};\r\n                                               ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/iter_impl.hpp:640:72: note: (skipping 4 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)\r\n    internal_iterator<typename std::remove_const<BasicJsonType>::type> m_it {};\r\n                                                                       ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/type_traits:2072:14: note: in instantiation of template class 'std::__is_constructible<false, nlohmann::basic_json<>, nlohmann::basic_json<> &&>' requested here\r\n    : public __is_constructible<is_scalar<_Tp>::value || is_reference<_Tp>::value,\r\n             ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/type_traits:2098:14: note: in instantiation of template class 'std::__is_constructible_void_check<false, nlohmann::basic_json<>, nlohmann::basic_json<> &&>' requested here\r\n    : public __is_constructible_void_check<__contains_void<_Tp, _Args...>::value\r\n             ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/type_traits:2578:34: note: in instantiation of template class 'std::is_constructible<nlohmann::basic_json<>, nlohmann::basic_json<> &&>' requested here\r\n    : __is_nothrow_constructible<is_constructible<_Tp, _Args...>::value, _Tp, _Args...>\r\n                                 ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/type_traits:2713:14: note: in instantiation of template class 'std::is_nothrow_constructible<nlohmann::basic_json<>, nlohmann::basic_json<> &&>' requested here\r\n    : public is_nothrow_constructible<_Tp, typename add_rvalue_reference<_Tp>::type>\r\n             ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8853:5: note: in instantiation of template class 'std::is_nothrow_move_constructible<nlohmann::basic_json<>>' requested here\r\n    is_nothrow_move_constructible<nlohmann::json>::value&&\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json_fwd.hpp:38:7: note: definition of 'nlohmann::basic_json<>' is not complete until the closing '}'\r\nclass basic_json;\r\n      ^\r\nIn file included from osxfail.C:1:\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:4692:24: error: no matching constructor for initialization of 'nlohmann::basic_json<>::const_iterator' (aka 'iter_impl<const nlohmann::basic_json<>>')\r\n        const_iterator result(this);\r\n                       ^      ~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:4662:16: note: in instantiation of member function 'nlohmann::basic_json<>::cend' requested here\r\n        return cend();\r\n               ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/hash.hpp:63:38: note: in instantiation of member function 'nlohmann::basic_json<>::end' requested here\r\n            for (const auto& element : j)\r\n                                     ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8822:34: note: in instantiation of function template specialization 'nlohmann::detail::hash<nlohmann::basic_json<>>' requested here\r\n        return nlohmann::detail::hash(j);\r\n                                 ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/iter_impl.hpp:131:5: note: candidate constructor not viable: no known conversion from 'const nlohmann::basic_json<> *' to 'const iter_impl<const const nlohmann::basic_json<>>' for 1st argument\r\n    iter_impl(const iter_impl<const BasicJsonType>& other) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/iter_impl.hpp:153:5: note: candidate constructor not viable: no known conversion from 'const nlohmann::basic_json<> *' to 'const iter_impl<typename std::remove_const<const basic_json<>>::type>' (aka 'const iter_impl<nlohmann::basic_json<>>') for 1st argument\r\n    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/iter_impl.hpp:81:5: note: candidate constructor not viable: requires 0 arguments, but 1 was provided\r\n    iter_impl() = default;\r\n    ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:49:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/adl_serializer.hpp:5:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/conversions/from_json.hpp:7:\r\nIn file included from /usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:423:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/__tree:747:59: error: static_cast from 'std::__tree_const_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>::__node_pointer' (aka 'std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *') to 'std::__tree_const_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>::__node_base_pointer' (aka 'std::__tree_node_base<void *> *'), which are not related by inheritance, is not allowed\r\n        {__ptr_ = static_cast<__node_pointer>(__tree_next(static_cast<__node_base_pointer>(__ptr_)));\r\n                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:750:41: note: in instantiation of member function 'std::__tree_const_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>::operator++' requested here\r\n    __map_const_iterator& operator++() {++__i_; return *this;}\r\n                                        ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:1052:59: note: in instantiation of member function 'std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>>::operator++' requested here\r\n            for (const_iterator __e = cend(); __f != __l; ++__f)\r\n                                                          ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:878:13: note: in instantiation of function template specialization 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::insert<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *, long>>>' requested here\r\n            insert(__m.begin(), __m.end());\r\n            ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1641:31: note: in instantiation of member function 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::map' requested here\r\n            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);\r\n                              ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1568:18: note: in instantiation of function template specialization 'std::allocator<std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>>::construct<std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>, const std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>> &>' requested here\r\n            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}\r\n                 ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1449:14: note: (skipping 4 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)\r\n            {__construct(__has_construct<allocator_type, pointer, _Args...>(),\r\n             ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:436:37: note: in instantiation of member function 'nlohmann::basic_json<>::basic_json' requested here\r\n                *ref_stack.back() = discarded;\r\n                                    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:201:60: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::end_object' requested here\r\n                            if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))\r\n                                                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:92:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:37:\r\nIn file included from /usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/algorithm:627:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1641:31: error: call to constructor of 'nlohmann::basic_json<>' is ambiguous\r\n            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);\r\n                              ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1568:18: note: in instantiation of function template specialization 'std::allocator<nlohmann::basic_json<>>::construct<nlohmann::basic_json<>, nlohmann::basic_json<> &>' requested here\r\n            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}\r\n                 ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1449:14: note: in instantiation of function template specialization 'std::allocator_traits<std::allocator<nlohmann::basic_json<>>>::__construct<nlohmann::basic_json<>, nlohmann::basic_json<> &>' requested here\r\n            {__construct(__has_construct<allocator_type, pointer, _Args...>(),\r\n             ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/vector:963:25: note: in instantiation of function template specialization 'std::allocator_traits<std::allocator<nlohmann::basic_json<>>>::construct<nlohmann::basic_json<>, nlohmann::basic_json<> &>' requested here\r\n        __alloc_traits::construct(__a, _VSTD::__to_raw_pointer(this->__end_), *__first);\r\n                        ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/vector:1160:9: note: in instantiation of function template specialization 'std::vector<nlohmann::basic_json<>>::__construct_at_end<nlohmann::basic_json<> *>' requested here\r\n        __construct_at_end(__x.__begin_, __x.__end_);\r\n        ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1641:31: note: in instantiation of member function 'std::vector<nlohmann::basic_json<>>::vector' requested here\r\n            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);\r\n                              ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1568:18: note: (skipping 5 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)\r\n            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}\r\n                 ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:436:37: note: in instantiation of member function 'nlohmann::basic_json<>::basic_json' requested here\r\n                *ref_stack.back() = discarded;\r\n                                    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:201:60: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::end_object' requested here\r\n                            if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))\r\n                                                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:92:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1425:5: note: candidate constructor\r\n    basic_json(const value_t v)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1449:5: note: candidate constructor\r\n    basic_json(std::nullptr_t = nullptr) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:4652:18: error: no matching constructor for initialization of 'nlohmann::basic_json<>::iterator' (aka 'iter_impl<nlohmann::basic_json<>>')\r\n        iterator result(this);\r\n                 ^      ~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:452:79: note: in instantiation of member function 'nlohmann::basic_json<>::end' requested here\r\n            for (auto it = ref_stack.back()->begin(); it != ref_stack.back()->end(); ++it)\r\n                                                                              ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:201:60: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::end_object' requested here\r\n                            if (JSON_HEDLEY_UNLIKELY(!sax->end_object()))\r\n                                                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:92:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/iter_impl.hpp:131:5: note: candidate constructor not viable: no known conversion from 'nlohmann::basic_json<> *' to 'const iter_impl<const nlohmann::basic_json<>>' for 1st argument\r\n    iter_impl(const iter_impl<const BasicJsonType>& other) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/iter_impl.hpp:153:5: note: candidate constructor not viable: no known conversion from 'nlohmann::basic_json<> *' to 'const iter_impl<typename std::remove_const<basic_json<>>::type>' (aka 'const iter_impl<nlohmann::basic_json<>>') for 1st argument\r\n    iter_impl(const iter_impl<typename std::remove_const<BasicJsonType>::type>& other) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/iterators/iter_impl.hpp:81:5: note: candidate constructor not viable: requires 0 arguments, but 1 was provided\r\n    iter_impl() = default;\r\n    ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:56:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/input/binary_reader.hpp:19:\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:423:84: error: call to constructor of 'nlohmann::basic_json<>' is ambiguous\r\n            object_element = &(ref_stack.back()->m_value.object->operator[](val) = discarded);\r\n                                                                                   ^~~~~~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:216:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::key' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:92:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1425:5: note: candidate constructor\r\n    basic_json(const value_t v)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1449:5: note: candidate constructor\r\n    basic_json(std::nullptr_t = nullptr) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2263:38: note: passing argument to parameter 'other' here\r\n    basic_json& operator=(basic_json other) noexcept (\r\n                                     ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:49:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/adl_serializer.hpp:5:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/conversions/from_json.hpp:7:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:1366:53: error: static_cast from 'std::unique_ptr<std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *>, std::__map_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *>>>>::pointer' (aka 'std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *') to 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::__node_base_pointer' (aka 'std::__tree_node_base<void *> *'), which are not related by inheritance, is not allowed\r\n        __tree_.__insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\r\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:423:66: note: in instantiation of member function 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::operator[]' requested here\r\n            object_element = &(ref_stack.back()->m_value.object->operator[](val) = discarded);\r\n                                                                 ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:216:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::key' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:92:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:49:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/adl_serializer.hpp:5:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/conversions/from_json.hpp:7:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:1219:16: error: static_cast from 'std::__tree<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__map_value_compare<std::basic_string<char>, std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::less<>, true>, std::allocator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>>>::__node_pointer' (aka 'std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *') to 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::__node_base_pointer' (aka 'std::__tree_node_base<void *> *'), which are not related by inheritance, is not allowed\r\n    __parent = static_cast<__node_base_pointer>(__tree_.__end_node());\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:1361:36: note: in instantiation of member function 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::__find_equal_key' requested here\r\n    __node_base_pointer& __child = __find_equal_key(__parent, __k);\r\n                                   ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:423:66: note: in instantiation of member function 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::operator[]' requested here\r\n            object_element = &(ref_stack.back()->m_value.object->operator[](val) = discarded);\r\n                                                                 ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:216:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::key' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:92:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:56:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/input/binary_reader.hpp:19:\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:496:37: error: call to constructor of 'nlohmann::basic_json<>' is ambiguous\r\n                *ref_stack.back() = discarded;\r\n                                    ^~~~~~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:248:60: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::end_array' requested here\r\n                            if (JSON_HEDLEY_UNLIKELY(!sax->end_array()))\r\n                                                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:92:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1425:5: note: candidate constructor\r\n    basic_json(const value_t v)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1449:5: note: candidate constructor\r\n    basic_json(std::nullptr_t = nullptr) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2263:38: note: passing argument to parameter 'other' here\r\n    basic_json& operator=(basic_json other) noexcept (\r\n                                     ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:56:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/input/binary_reader.hpp:19:\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:561:22: error: no matching conversion for functional-style cast from 'std::basic_string<char>' to 'nlohmann::basic_json<>'\r\n        auto value = BasicJsonType(std::forward<Value>(v));\r\n                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:384:9: note: in instantiation of function template specialization 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::handle_value<std::basic_string<char> &>' requested here\r\n        handle_value(val);\r\n        ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:319:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>::string' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->string(m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:92:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1425:5: note: candidate constructor not viable: no known conversion from 'std::basic_string<char>' to 'const nlohmann::basic_json::value_t' (aka 'const nlohmann::detail::value_t') for 1st argument\r\n    basic_json(const value_t v)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1449:5: note: candidate constructor not viable: no known conversion from 'std::basic_string<char>' to 'std::nullptr_t' for 1st argument\r\n    basic_json(std::nullptr_t = nullptr) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1684:5: note: candidate constructor not viable: no known conversion from 'std::basic_string<char>' to 'nlohmann::basic_json<>::initializer_list_t' (aka 'initializer_list<detail::json_ref<basic_json<>>>') for 1st argument\r\n    basic_json(initializer_list_t init,\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2225:5: note: candidate constructor not viable: no known conversion from 'std::basic_string<char>' to 'nlohmann::basic_json<>' for 1st argument\r\n    basic_json(basic_json&& other) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1522:5: note: candidate template ignored: substitution failure [with CompatibleType = std::basic_string<char> &, U = std::basic_string<char>, $2 = 0]\r\n    basic_json(CompatibleType && val) noexcept(noexcept(\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1560:5: note: candidate template ignored: requirement 'detail::is_basic_json<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>::value' was not satisfied [with BasicJsonType = std::basic_string<char>]\r\n    basic_json(const BasicJsonType& val)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2108:5: note: candidate template ignored: requirement 'detail::conjunction<nlohmann::detail::is_json_ref<std::basic_string<char, std::char_traits<char>, std::allocator<char>>>, std::is_same<char, nlohmann::basic_json<std::map, std::vector, std::basic_string<char, std::char_traits<char>, std::allocator<char>>, bool, long long, unsigned long long, double, std::allocator, nlohmann::adl_serializer, std::vector<unsigned char, std::allocator<unsigned char>>>>>::value' was not satisfied [with JsonRef = std::basic_string<char>]\r\n    basic_json(const JsonRef& ref) : basic_json(ref.moved_or_copied()) {}\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1939:5: note: candidate constructor not viable: requires 2 arguments, but 1 was provided\r\n    basic_json(size_type cnt, const basic_json& val)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2005:5: note: candidate constructor template not viable: requires 2 arguments, but 1 was provided\r\n    basic_json(InputIT first, InputIT last)\r\n    ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:56:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/input/binary_reader.hpp:19:\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:233:73: error: rvalue reference to type 'basic_string<...>' cannot bind to lvalue of type 'basic_string<...>'\r\n        object_element = &(ref_stack.back()->m_value.object->operator[](val));\r\n                                                                        ^~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:216:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>::key' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:120:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:999:40: note: passing argument to parameter '__k' here\r\n    mapped_type& operator[](key_type&& __k);\r\n                                       ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:56:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/input/binary_reader.hpp:19:\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:233:26: error: taking the address of a temporary object of type 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::mapped_type' (aka 'nlohmann::basic_json<>') [-Waddress-of-temporary]\r\n        object_element = &(ref_stack.back()->m_value.object->operator[](val));\r\n                         ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:49:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/adl_serializer.hpp:5:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/conversions/from_json.hpp:7:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:1379:26: error: non-const lvalue reference to type 'rebind<...>' cannot bind to a temporary of type 'rebind<...>'\r\n    __node_base_pointer& __child = __find_equal_key(__parent, __k);\r\n                         ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:233:62: note: in instantiation of member function 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::operator[]' requested here\r\n        object_element = &(ref_stack.back()->m_value.object->operator[](val));\r\n                                                             ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:216:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>::key' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:120:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:49:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/adl_serializer.hpp:5:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/conversions/from_json.hpp:7:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:1384:53: error: static_cast from 'std::unique_ptr<std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *>, std::__map_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *>>>>::pointer' (aka 'std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *') to 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::__node_base_pointer' (aka 'std::__tree_node_base<void *> *'), which are not related by inheritance, is not allowed\r\n        __tree_.__insert_node_at(__parent, __child, static_cast<__node_base_pointer>(__h.get()));\r\n                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:1264:16: error: static_cast from 'std::__tree<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::__map_value_compare<std::basic_string<char>, std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, std::less<>, true>, std::allocator<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>>>::__node_const_pointer' (aka 'std::__tree_node<std::__value_type<std::basic_string<char>, nlohmann::basic_json<>>, void *> *') to 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::__node_base_pointer' (aka 'std::__tree_node_base<void *> *'), which are not related by inheritance, is not allowed\r\n    __parent = static_cast<__node_base_pointer>(__tree_.__end_node());\r\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/map:1379:36: note: in instantiation of member function 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::__find_equal_key' requested here\r\n    __node_base_pointer& __child = __find_equal_key(__parent, __k);\r\n                                   ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:233:62: note: in instantiation of member function 'std::map<std::basic_string<char>, nlohmann::basic_json<>, std::less<>>::operator[]' requested here\r\n        object_element = &(ref_stack.back()->m_value.object->operator[](val));\r\n                                                             ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:216:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>::key' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->key(m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:120:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:56:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/input/binary_reader.hpp:19:\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:294:20: error: no matching conversion for functional-style cast from 'double' to 'nlohmann::basic_json<>'\r\n            root = BasicJsonType(std::forward<Value>(v));\r\n                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:202:9: note: in instantiation of function template specialization 'nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>::handle_value<double &>' requested here\r\n        handle_value(val);\r\n        ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:273:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>::number_float' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->number_float(res, m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:120:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1425:5: note: candidate constructor not viable: no known conversion from 'double' to 'const nlohmann::basic_json::value_t' (aka 'const nlohmann::detail::value_t') for 1st argument\r\n    basic_json(const value_t v)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1449:5: note: candidate constructor not viable: no known conversion from 'double' to 'std::nullptr_t' for 1st argument\r\n    basic_json(std::nullptr_t = nullptr) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1684:5: note: candidate constructor not viable: no known conversion from 'double' to 'nlohmann::basic_json<>::initializer_list_t' (aka 'initializer_list<detail::json_ref<basic_json<>>>') for 1st argument\r\n    basic_json(initializer_list_t init,\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2225:5: note: candidate constructor not viable: no known conversion from 'double' to 'nlohmann::basic_json<>' for 1st argument\r\n    basic_json(basic_json&& other) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1522:5: note: candidate template ignored: substitution failure [with CompatibleType = double &, U = double, $2 = 0]\r\n    basic_json(CompatibleType && val) noexcept(noexcept(\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1560:5: note: candidate template ignored: requirement 'detail::is_basic_json<double>::value' was not satisfied [with BasicJsonType = double]\r\n    basic_json(const BasicJsonType& val)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2108:5: note: candidate template ignored: substitution failure [with JsonRef = double]: type 'double' cannot be used prior to '::' because it has no members\r\n    basic_json(const JsonRef& ref) : basic_json(ref.moved_or_copied()) {}\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1939:5: note: candidate constructor not viable: requires 2 arguments, but 1 was provided\r\n    basic_json(size_type cnt, const basic_json& val)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2005:5: note: candidate constructor template not viable: requires 2 arguments, but 1 was provided\r\n    basic_json(InputIT first, InputIT last)\r\n    ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:56:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/detail/input/binary_reader.hpp:19:\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:308:27: error: no matching conversion for functional-style cast from 'double' to 'nlohmann::basic_json<>'\r\n        *object_element = BasicJsonType(std::forward<Value>(v));\r\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1425:5: note: candidate constructor not viable: no known conversion from 'double' to 'const nlohmann::basic_json::value_t' (aka 'const nlohmann::detail::value_t') for 1st argument\r\n    basic_json(const value_t v)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1449:5: note: candidate constructor not viable: no known conversion from 'double' to 'std::nullptr_t' for 1st argument\r\n    basic_json(std::nullptr_t = nullptr) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1684:5: note: candidate constructor not viable: no known conversion from 'double' to 'nlohmann::basic_json<>::initializer_list_t' (aka 'initializer_list<detail::json_ref<basic_json<>>>') for 1st argument\r\n    basic_json(initializer_list_t init,\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2225:5: note: candidate constructor not viable: no known conversion from 'double' to 'nlohmann::basic_json<>' for 1st argument\r\n    basic_json(basic_json&& other) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1522:5: note: candidate template ignored: substitution failure [with CompatibleType = double &, U = double, $2 = 0]\r\n    basic_json(CompatibleType && val) noexcept(noexcept(\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1560:5: note: candidate template ignored: requirement 'detail::is_basic_json<double>::value' was not satisfied [with BasicJsonType = double]\r\n    basic_json(const BasicJsonType& val)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2108:5: note: candidate template ignored: substitution failure [with JsonRef = double]: type 'double' cannot be used prior to '::' because it has no members\r\n    basic_json(const JsonRef& ref) : basic_json(ref.moved_or_copied()) {}\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1939:5: note: candidate constructor not viable: requires 2 arguments, but 1 was provided\r\n    basic_json(size_type cnt, const basic_json& val)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2005:5: note: candidate constructor template not viable: requires 2 arguments, but 1 was provided\r\n    basic_json(InputIT first, InputIT last)\r\n    ^\r\nIn file included from osxfail.C:1:\r\nIn file included from /src/libcommon/3rd_party/json/include/nlohmann/json.hpp:37:\r\nIn file included from /usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/algorithm:627:\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1641:31: error: no matching constructor for initialization of 'nlohmann::basic_json<>'\r\n            ::new((void*)__p) _Up(_VSTD::forward<_Args>(__args)...);\r\n                              ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1568:18: note: in instantiation of function template specialization 'std::allocator<nlohmann::basic_json<>>::construct<nlohmann::basic_json<>, double &>' requested here\r\n            {__a.construct(__p, _VSTD::forward<_Args>(__args)...);}\r\n                 ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/memory:1449:14: note: in instantiation of function template specialization 'std::allocator_traits<std::allocator<nlohmann::basic_json<>>>::__construct<nlohmann::basic_json<>, double &>' requested here\r\n            {__construct(__has_construct<allocator_type, pointer, _Args...>(),\r\n             ^\r\n/usr/x86_64-apple-darwin14/bin/../SDK/MacOSX10.10.sdk/usr/include/c++/v1/vector:1587:25: note: in instantiation of function template specialization 'std::allocator_traits<std::allocator<nlohmann::basic_json<>>>::construct<nlohmann::basic_json<>, double &>' requested here\r\n        __alloc_traits::construct(this->__alloc(),\r\n                        ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:302:46: note: in instantiation of function template specialization 'std::vector<nlohmann::basic_json<>>::emplace_back<double &>' requested here\r\n            ref_stack.back()->m_value.array->emplace_back(std::forward<Value>(v));\r\n                                             ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/json_sax.hpp:202:9: note: in instantiation of function template specialization 'nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>::handle_value<double &>' requested here\r\n        handle_value(val);\r\n        ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:273:56: note: in instantiation of member function 'nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>::number_float' requested here\r\n                        if (JSON_HEDLEY_UNLIKELY(!sax->number_float(res, m_lexer.get_string())))\r\n                                                       ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/detail/input/parser.hpp:120:13: note: in instantiation of function template specialization 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<>>>' requested here\r\n            sax_parse_internal(&sdp);\r\n            ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:6801:113: note: in instantiation of member function 'nlohmann::detail::parser<nlohmann::basic_json<>, nlohmann::detail::iterator_input_adapter<const char *>>::parse' requested here\r\n        parser(detail::input_adapter(std::move(first), std::move(last)), cb, allow_exceptions, ignore_comments).parse(true, result);\r\n                                                                                                                ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:8880:28: note: in instantiation of function template specialization 'nlohmann::basic_json<>::parse<const char *>' requested here\r\n    return nlohmann::json::parse(s, s + n);\r\n                           ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1425:5: note: candidate constructor not viable: no known conversion from 'double' to 'const nlohmann::basic_json::value_t' (aka 'const nlohmann::detail::value_t') for 1st argument\r\n    basic_json(const value_t v)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1449:5: note: candidate constructor not viable: no known conversion from 'double' to 'std::nullptr_t' for 1st argument\r\n    basic_json(std::nullptr_t = nullptr) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1684:5: note: candidate constructor not viable: no known conversion from 'double' to 'nlohmann::basic_json<>::initializer_list_t' (aka 'initializer_list<detail::json_ref<basic_json<>>>') for 1st argument\r\n    basic_json(initializer_list_t init,\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2225:5: note: candidate constructor not viable: no known conversion from 'double' to 'nlohmann::basic_json<>' for 1st argument\r\n    basic_json(basic_json&& other) noexcept\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1522:5: note: candidate template ignored: substitution failure [with CompatibleType = double &, U = double, $2 = 0]\r\n    basic_json(CompatibleType && val) noexcept(noexcept(\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1560:5: note: candidate template ignored: requirement 'detail::is_basic_json<double>::value' was not satisfied [with BasicJsonType = double]\r\n    basic_json(const BasicJsonType& val)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2108:5: note: candidate template ignored: substitution failure [with JsonRef = double]: type 'double' cannot be used prior to '::' because it has no members\r\n    basic_json(const JsonRef& ref) : basic_json(ref.moved_or_copied()) {}\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:1939:5: note: candidate constructor not viable: requires 2 arguments, but 1 was provided\r\n    basic_json(size_type cnt, const basic_json& val)\r\n    ^\r\n/src/libcommon/3rd_party/json/include/nlohmann/json.hpp:2005:5: note: candidate constructor template not viable: requires 2 arguments, but 1 was provided\r\n    basic_json(InputIT first, InputIT last)\r\n    ^\r\nfatal error: too many errors emitted, stopping now [-ferror-limit=]\r\n20 errors generated.\r\n1001@d82e6b7e292b:~$\n```\n\n\n### Compiler and operating system\n\nclang14  macosx 10.10\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3991/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3991/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3989",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3989/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3989/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3989/events",
    "html_url": "https://github.com/nlohmann/json/issues/3989",
    "id": 1635219670,
    "node_id": "I_kwDOAKp23M5hd3jW",
    "number": 3989,
    "title": "The parser doesn't allow parse_error() to return true and continue parsing.",
    "user": {
      "login": "francislan",
      "id": 7295453,
      "node_id": "MDQ6VXNlcjcyOTU0NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7295453?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/francislan",
      "html_url": "https://github.com/francislan",
      "followers_url": "https://api.github.com/users/francislan/followers",
      "following_url": "https://api.github.com/users/francislan/following{/other_user}",
      "gists_url": "https://api.github.com/users/francislan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/francislan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/francislan/subscriptions",
      "organizations_url": "https://api.github.com/users/francislan/orgs",
      "repos_url": "https://api.github.com/users/francislan/repos",
      "events_url": "https://api.github.com/users/francislan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/francislan/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 395133926,
        "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/documentation",
        "name": "documentation",
        "color": "0e8a16",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-03-22T07:38:13Z",
    "updated_at": "2023-03-24T20:59:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nThe documentation has contradictory information:\r\n\r\n[Here](https://json.nlohmann.me/api/json_sax/parse_error/#return-value), it says that parse_error() *must* return `false` but [here](https://json.nlohmann.me/features/parsing/parse_exceptions/#user-defined-sax-interface), it says that \"the return value indicates whether the parsing should continue, so the function should usually return `false`.\"\r\n\r\nHowever it seems that the code expects `parse_error()` to return `false` and doesn't continue parsing if it returns `true`. See [parser::sax_parse_internal()](https://github.com/nlohmann/json/blob/develop/include/nlohmann/detail/input/parser.hpp#L180) where it propagates the return value of `parse_error()` instead of only propagating `false` values.\r\n\r\n[Example](https://github.com/nlohmann/json/blob/develop/include/nlohmann/detail/input/parser.hpp#L268-L273):\r\n```cpp\r\n//  case token_type::value_float:\r\n\r\nif (JSON_HEDLEY_UNLIKELY(!std::isfinite(res)))\r\n{\r\n    return sax->parse_error(...);\r\n}\r\n```\r\n\r\nShould be\r\n```cpp\r\n//  case token_type::value_float:\r\n\r\nif (JSON_HEDLEY_UNLIKELY(!std::isfinite(res)))\r\n{\r\n    if (!sax->parse_error(...))\r\n    {\r\n        return false;\r\n    }\r\n    break;\r\n}\r\n```\r\n\r\nThis would allow a SAX handler to deal with non-finite numbers, for example by stringifying them instead of failing parsing altogether. Of course a cleaner way would be for the parser to handle that natively by introducing a new method `virtual bool number_nonfinite(const string_t& s) = 0;`\n\n### Reproduction steps\n\nHave a SAX handler return `true` for some `parse_error()`\n\n### Expected vs. actual results\n\nExpected: the parser to continue parsing the rest of the input.\r\nActual: the parser stops.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nN/A\n\n### Library version\n\ndeveloper branch\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3989/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3979",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3979/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3979/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3979/events",
    "html_url": "https://github.com/nlohmann/json/issues/3979",
    "id": 1622294794,
    "node_id": "I_kwDOAKp23M5gskEK",
    "number": 3979,
    "title": "Test suite does not compile with C++20 and Clang 17",
    "user": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 46374232,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMg==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/solution:%20duplicate",
        "name": "solution: duplicate",
        "color": "cccccc",
        "default": false,
        "description": "the issue is a duplicate; refer to the linked issue instead"
      },
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2023-03-13T21:30:39Z",
    "updated_at": "2023-03-29T10:04:25Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nWith Clang 16, the test suite could be compiled with C++20, see https://github.com/nlohmann/json/actions/runs/4364410245/jobs/7631709068\r\n\r\nWhen switching to Clang 17, there is an error: https://github.com/nlohmann/json/actions/runs/4409390311/jobs/7725631191#step:7:68\r\n\r\n### Reproduction steps\r\n\r\nCompile the test suite with Clang 17 and C++20 standard enabled.\r\n\r\n### Expected vs. actual results\r\n\r\nExpected: Test suite compiles.\r\n\r\nActual: Error message:\r\n\r\n```\r\njson/tests/src/unit-constructor1.cpp:282:34: error: invalid operands to binary expression ('Expression_lhs<const basic_string<char, char_traits<char>, allocator<char>> &>' and 'const value_type' (aka 'const nlohmann::basic_json<>'))\r\n            CHECK(std::get<2>(t) == j[2]);\r\n            ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~\r\n```\r\n\r\n### Minimal code example\r\n\r\n_No response_\r\n\r\n### Error messages\r\n\r\n```Shell\r\njson/tests/src/unit-constructor1.cpp:282:34: error: invalid operands to binary expression ('Expression_lhs<const basic_string<char, char_traits<char>, allocator<char>> &>' and 'const value_type' (aka 'const nlohmann::basic_json<>'))\r\n            CHECK(std::get<2>(t) == j[2]);\r\n            ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nClang 17, Ubuntu\r\n\r\n### Library version\r\n\r\ndevelop\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3979/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3970",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3970/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3970/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3970/events",
    "html_url": "https://github.com/nlohmann/json/issues/3970",
    "id": 1617227377,
    "node_id": "I_kwDOAKp23M5gZO5x",
    "number": 3970,
    "title": "Incompatible with C++20 modules in MSVC",
    "user": {
      "login": "andylizf",
      "id": 28052536,
      "node_id": "MDQ6VXNlcjI4MDUyNTM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/28052536?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andylizf",
      "html_url": "https://github.com/andylizf",
      "followers_url": "https://api.github.com/users/andylizf/followers",
      "following_url": "https://api.github.com/users/andylizf/following{/other_user}",
      "gists_url": "https://api.github.com/users/andylizf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andylizf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andylizf/subscriptions",
      "organizations_url": "https://api.github.com/users/andylizf/orgs",
      "repos_url": "https://api.github.com/users/andylizf/repos",
      "events_url": "https://api.github.com/users/andylizf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andylizf/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 296080787,
        "node_id": "MDU6TGFiZWwyOTYwODA3ODc=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio",
        "name": "platform: visual studio",
        "color": "eb6420",
        "default": false,
        "description": "related to MSVC"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 12,
    "created_at": "2023-03-09T13:14:19Z",
    "updated_at": "2024-10-16T19:41:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nImporting a module file using the lib will cause a compilation error.\r\n\r\n### Reproduction steps\r\n\r\nCodes below.\r\n\r\n### Expected vs. actual results\r\n\r\nTo compile successfully.\r\n\r\n### Minimal code example\r\n\r\nnetwork.ixx:\r\n\r\n```c++\r\nmodule;\r\n#include <nlohmann/json.hpp>\r\n#include <string>\r\nexport module network;\r\nusing nlohmann::json;\r\nexport struct message {\r\n  message(std::string str) { json doc = json::parse(str); }\r\n};\r\n```\r\n\r\nmain.cpp:\r\n```c++\r\nimport network;\r\nint main() { message msg(R\"({\"hello\": \"world\"})\"); }\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nnlohmann\\json.hpp(117): error C2039: 'json_sax_dom_callback_parser': is not a member of 'nlohmann::json_abi_v3_11_2::detail'\r\nnlohmann\\detail\\output\\serializer.hpp(35): note: see declaration of 'nlohmann::json_abi_v3_11_2::detail'\r\nmain.cpp(3): note: see reference to class template instantiation 'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>' being compiled\r\nnlohmann\\byte_container_with_subtype.hpp(101): warning C4820: 'nlohmann::json_abi_v3_11_2::byte_container_with_subtype<BinaryType>': '7' bytes padding added after data member 'nlohmann::json_abi_v3_11_2::byte_container_with_subtype<BinaryType>::m_has_subtype'\r\n        with\r\n        [\r\n            BinaryType=std::vector<uint8_t,std::allocator<uint8_t>>\r\n        ]\r\n        [            BinaryType=std::vector<uint8_t,std::allocator<uint8_t>>\r\n        ]\r\nnlohmann\\json.hpp(4187): warning C4820: 'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>': '7' bytes padding added after data member 'nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::basic_string<char,std::char_traits<char>,std::allocator<char>>,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>>::m_type\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nVisual Studio 17 2022 MSVC 19.36.32323; Windows-10.0.22624\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3970/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3970/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3942",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3942/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3942/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3942/events",
    "html_url": "https://github.com/nlohmann/json/issues/3942",
    "id": 1580569126,
    "node_id": "I_kwDOAKp23M5eNZIm",
    "number": 3942,
    "title": "The website's hamburger menu opens to the home menu",
    "user": {
      "login": "milo-kerr-tfs",
      "id": 95248261,
      "node_id": "U_kgDOBa1fhQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/95248261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/milo-kerr-tfs",
      "html_url": "https://github.com/milo-kerr-tfs",
      "followers_url": "https://api.github.com/users/milo-kerr-tfs/followers",
      "following_url": "https://api.github.com/users/milo-kerr-tfs/following{/other_user}",
      "gists_url": "https://api.github.com/users/milo-kerr-tfs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/milo-kerr-tfs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/milo-kerr-tfs/subscriptions",
      "organizations_url": "https://api.github.com/users/milo-kerr-tfs/orgs",
      "repos_url": "https://api.github.com/users/milo-kerr-tfs/repos",
      "events_url": "https://api.github.com/users/milo-kerr-tfs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/milo-kerr-tfs/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 395133926,
        "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/documentation",
        "name": "documentation",
        "color": "0e8a16",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2023-02-11T01:35:32Z",
    "updated_at": "2023-05-08T14:52:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nThe hamburger menu opening to the home menu instead of the main menu is really confusing and makes it difficult to find the link to the API documentation.\r\n\n\n### Reproduction steps\n\n1. visit https://json.nlohmann.me/\r\n2. press the hamburger menu\r\n3. the home menu appears, giving the appearance that the main menu to the other parts of the site doesn't exist.\n\n### Expected vs. actual results\n\nWhen visiting the main page of the site, the hamburger menu should open to the main menu. As a user, it appears the home menu is the only collection of links on the site. Very frustrating when trying to find the API documentation.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nFirefox\n\n### Library version\n\nN/A\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3942/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3924",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3924/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3924/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3924/events",
    "html_url": "https://github.com/nlohmann/json/issues/3924",
    "id": 1534015019,
    "node_id": "I_kwDOAKp23M5bbzYr",
    "number": 3924,
    "title": "`modernize-avoid-c-arrays` clang-tidy warning when using `NLOHMANN_JSON_SERIALIZE_ENUM` macro",
    "user": {
      "login": "alzix",
      "id": 1101204,
      "node_id": "MDQ6VXNlcjExMDEyMDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1101204?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alzix",
      "html_url": "https://github.com/alzix",
      "followers_url": "https://api.github.com/users/alzix/followers",
      "following_url": "https://api.github.com/users/alzix/following{/other_user}",
      "gists_url": "https://api.github.com/users/alzix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alzix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alzix/subscriptions",
      "organizations_url": "https://api.github.com/users/alzix/orgs",
      "repos_url": "https://api.github.com/users/alzix/repos",
      "events_url": "https://api.github.com/users/alzix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alzix/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2023-01-15T21:42:02Z",
    "updated_at": "2023-06-11T17:47:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nclang-tidy emits a warning on a code using NLOHMANN_JSON_SERIALIZE_ENUM,\r\nthis requires to to put no-lint comments on the usage code\n\n### Reproduction steps\n\nrun clang-tidy on the code using `NLOHMANN_JSON_SERIALIZE_ENUM` macro\n\n### Expected vs. actual results\n\nexpected no warnings\n\n### Minimal code example\n\n```Shell\n++\r\nenum class Foo {\r\n  kFoo1,\r\n  kFoo2\r\n};\r\nNLOHMANN_JSON_SERIALIZE_ENUM(\r\n    Foo,\r\n    {\r\n        {Foo::kFoo1, \"FOO1\"},\r\n        {Foo::kFoo2, \"FOO2\"},\r\n    })\n```\n\n\n### Error messages\n\n```Shell\n| Clang-Tidy: Do not declare C-style arrays, use std::array<> instead\n```\n\n\n### Compiler and operating system\n\nApple clang version 14.0.0, MacOS\n\n### Library version\n\nv3.11.2\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3924/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3915",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3915/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3915/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3915/events",
    "html_url": "https://github.com/nlohmann/json/issues/3915",
    "id": 1527497176,
    "node_id": "I_kwDOAKp23M5bC8HY",
    "number": 3915,
    "title": "JSON_DIAGNOSTICS trigger assertion",
    "user": {
      "login": "xamix",
      "id": 9742044,
      "node_id": "MDQ6VXNlcjk3NDIwNDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9742044?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xamix",
      "html_url": "https://github.com/xamix",
      "followers_url": "https://api.github.com/users/xamix/followers",
      "following_url": "https://api.github.com/users/xamix/following{/other_user}",
      "gists_url": "https://api.github.com/users/xamix/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xamix/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xamix/subscriptions",
      "organizations_url": "https://api.github.com/users/xamix/orgs",
      "repos_url": "https://api.github.com/users/xamix/repos",
      "events_url": "https://api.github.com/users/xamix/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xamix/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 232252782,
        "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed",
        "name": "confirmed",
        "color": "e11d21",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2023-01-10T14:35:06Z",
    "updated_at": "2023-06-03T21:56:26Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nHi,\r\n\r\nI have activated the JSON_DIAGNOSTICS=1 globally in my project and ASSERTION are now fired at runtime.\r\nI tested it on with 3.10.5 and then with latest release 3.11.2.\r\n\r\nI have done a minimal example to reproduce the assertion (see minimal code example below)\r\n\r\nIs there something wrong with my code?\n\n### Reproduction steps\n\nRun the minimal code example below\n\n### Expected vs. actual results\n\nNo ASSERTION should be triggered since without the JSON_DIAGNOSTICS enabled, all seem to work without any memory issues\n\n### Minimal code example\n\n```Shell\njson j = json::object();\r\nj[\"root\"] = \"root_str\";\r\n\r\njson jj = json::object();\r\njj[\"child\"] = json::object();\r\n\r\n// If do not push anything in object, then no assert will be produced\r\njj[\"child\"][\"prop1\"] = \"prop1_value\";\r\n\r\n// Push all properties of child in parent\r\nj.insert(jj.at(\"child\").begin(), jj.at(\"child\").end());\r\n\r\n// Here assert is generated when construct new json \r\njson k(j);\n```\n\n\n### Error messages\n\n```Shell\nnlohmann/json.hpp:19864: void nlohmann::json_abi_diag_v3_11_2::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, adl_serializer, std::vector<unsigned char, std::allocator<unsigned char> > >::assert_invariant(bool) const [ObjectType = std::map, ArrayType = std::vector, StringType = std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, BooleanType = bool, NumberIntegerType = long, NumberUnsignedType = unsigned long, NumberFloatType = double, AllocatorType = std::allocator, JSONSerializer = adl_serializer, BinaryType = std::vector<unsigned char, std::allocator<unsigned char> >]: Assertion `!check_parents || !is_structured() || std::all_of(begin(), end(), [this](const basic_json & j) { return j.m_parent == this; })' failed.\n```\n\n\n### Compiler and operating system\n\nClang-10 on Ubuntu 20.04 \n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3915/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3915/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3912",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3912/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3912/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3912/events",
    "html_url": "https://github.com/nlohmann/json/issues/3912",
    "id": 1524281217,
    "node_id": "I_kwDOAKp23M5a2q-B",
    "number": 3912,
    "title": "inconsistency with string/string_view lookups",
    "user": {
      "login": "Spongman",
      "id": 1088194,
      "node_id": "MDQ6VXNlcjEwODgxOTQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1088194?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Spongman",
      "html_url": "https://github.com/Spongman",
      "followers_url": "https://api.github.com/users/Spongman/followers",
      "following_url": "https://api.github.com/users/Spongman/following{/other_user}",
      "gists_url": "https://api.github.com/users/Spongman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Spongman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Spongman/subscriptions",
      "organizations_url": "https://api.github.com/users/Spongman/orgs",
      "repos_url": "https://api.github.com/users/Spongman/repos",
      "events_url": "https://api.github.com/users/Spongman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Spongman/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-01-08T02:13:12Z",
    "updated_at": "2023-01-08T02:21:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\n`operator string_view()` isn't used, whereas `operator string()` _is_.\r\n\r\n### Reproduction steps\r\n\r\nhttps://godbolt.org/z/MYEYG3Gao\r\n\r\n### Expected vs. actual results\r\n\r\ncompiles\r\n\r\n### Minimal code example\r\n\r\n```c++\r\n#include <iostream>\r\n#include <string>\r\n#include \"nlohmann/json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nstruct Foo {\r\n\toperator std::string() const { return \"foo\"; }\r\n};\r\n\r\nstruct Bar {\r\n\toperator std::string_view() const { return \"bar\"; }\r\n};\r\n\r\nint main() {\r\n\r\n\tjson js {\r\n\t\t{ \"foo\", \"string\" },\r\n\t\t{ \"bar\", \"string_view\" },\r\n\t};\r\n\r\n\tstd::cout << js[std::string{\"foo\"}] << \"\\n\";\r\n\tstd::cout << js[Foo{}] << \"\\n\";\r\n\r\n\tstd::cout << js[std::string_view{\"bar\"}] << \"\\n\";\r\n\tstd::cout << js[Bar{}] << \"\\n\";\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\n<source>: In function 'int main()':\r\n<source>:26:24: error: no match for 'operator[]' (operand types are 'json' {aka 'nlohmann::json_abi_v3_11_2::basic_json<>'} and 'Bar')\r\n   26 |         std::cout << js[Bar{}] << \"\\n\";\r\n      |                        ^\r\n```\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nlinux gcc 12.2\r\n\r\n### Library version\r\n\r\ntrunk\r\n\r\n### Validation\r\n\r\n- [x] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3912/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3912/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3907",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3907/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3907/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3907/events",
    "html_url": "https://github.com/nlohmann/json/issues/3907",
    "id": 1518893121,
    "node_id": "I_kwDOAKp23M5aiHhB",
    "number": 3907,
    "title": "error: expected initializer before ‘<’ token ",
    "user": {
      "login": "RerikOp",
      "id": 55916866,
      "node_id": "MDQ6VXNlcjU1OTE2ODY2",
      "avatar_url": "https://avatars.githubusercontent.com/u/55916866?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RerikOp",
      "html_url": "https://github.com/RerikOp",
      "followers_url": "https://api.github.com/users/RerikOp/followers",
      "following_url": "https://api.github.com/users/RerikOp/following{/other_user}",
      "gists_url": "https://api.github.com/users/RerikOp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RerikOp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RerikOp/subscriptions",
      "organizations_url": "https://api.github.com/users/RerikOp/orgs",
      "repos_url": "https://api.github.com/users/RerikOp/repos",
      "events_url": "https://api.github.com/users/RerikOp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RerikOp/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2023-01-04T12:28:45Z",
    "updated_at": "2024-01-25T16:15:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nWhen using the single include header (https://github.com/nlohmann/json/blob/develop/single_include/nlohmann/json.hpp) I get the following error during compilation\r\n`error: expected initializer before ‘<’ token`\r\nin line 5323. \r\nSorry if it's an easy fix, I don't have much experience with C++.\r\nI'm using g++ together with the latest CUDA compiler nvcc under WSL.\r\nEdit: does not work using C++20, C++17 (probably below as well) compiles flawlessly\r\n\r\n### Reproduction steps\r\n\r\nInclude \"json.hpp\" in any header file\r\n\r\n### Expected vs. actual results\r\n\r\nExpected: Successful compilation\r\nActual: No compilation\r\n\r\n### Minimal code example\r\n\r\n_No response_\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\ng++ (Ubuntu 12.1.0-2ubuntu1~22.04) 12.1.0 | Cuda compilation tools, release 12.0, V12.0.76 Build cuda_12.0.r12.0/compiler.31968024_0\r\n\r\n### Library version\r\n\r\nversion 3.11.2\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3907/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3907/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3900",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3900/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3900/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3900/events",
    "html_url": "https://github.com/nlohmann/json/issues/3900",
    "id": 1511633255,
    "node_id": "I_kwDOAKp23M5aGbFn",
    "number": 3900,
    "title": "RTTI dependency added by std::any",
    "user": {
      "login": "vongkitt",
      "id": 64567780,
      "node_id": "MDQ6VXNlcjY0NTY3Nzgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/64567780?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vongkitt",
      "html_url": "https://github.com/vongkitt",
      "followers_url": "https://api.github.com/users/vongkitt/followers",
      "following_url": "https://api.github.com/users/vongkitt/following{/other_user}",
      "gists_url": "https://api.github.com/users/vongkitt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vongkitt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vongkitt/subscriptions",
      "organizations_url": "https://api.github.com/users/vongkitt/orgs",
      "repos_url": "https://api.github.com/users/vongkitt/repos",
      "events_url": "https://api.github.com/users/vongkitt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vongkitt/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2022-12-27T09:52:27Z",
    "updated_at": "2023-10-22T10:36:33Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nWhen compiling with `-fno-rtti` using clang, ninja on VS 2022 17.4.3 the build will fail.\r\n\r\nThis line seems to be causing the issue:\r\n```\r\n#if defined(JSON_HAS_CPP_17)\r\n    #include <any>\r\n    #include <string_view>\r\n#endif\r\n```\r\n\r\nIncluding any requires rtti to be on.\r\n\r\nThis error was produced using ninja and the VS 2022 17.4.3 clang compiler.\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\MSVC\\14.34.31933\\include\\any(22,2): error GDF32A4F7: class any requires static RTTI.\r\n  \r\n  #error class any requires static RTTI.\r\n  \r\n   ^\r\n```\n\n### Reproduction steps\n\nBuild using ninja and `-fno-rtti` and the VS 2022 17.4.3 clang compiler.\r\n\n\n### Expected vs. actual results\n\nExpect: compilation successful\r\nActual:  #error class any requires static RTTI.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nMSVC 17.4.3\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3900/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3894",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3894/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3894/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3894/events",
    "html_url": "https://github.com/nlohmann/json/issues/3894",
    "id": 1504761822,
    "node_id": "I_kwDOAKp23M5ZsNfe",
    "number": 3894,
    "title": "json::to_bson does not handle unsigned 64 bit integers",
    "user": {
      "login": "Regfare",
      "id": 23344936,
      "node_id": "MDQ6VXNlcjIzMzQ0OTM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/23344936?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Regfare",
      "html_url": "https://github.com/Regfare",
      "followers_url": "https://api.github.com/users/Regfare/followers",
      "following_url": "https://api.github.com/users/Regfare/following{/other_user}",
      "gists_url": "https://api.github.com/users/Regfare/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Regfare/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Regfare/subscriptions",
      "organizations_url": "https://api.github.com/users/Regfare/orgs",
      "repos_url": "https://api.github.com/users/Regfare/repos",
      "events_url": "https://api.github.com/users/Regfare/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Regfare/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 232252782,
        "node_id": "MDU6TGFiZWwyMzIyNTI3ODI=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/confirmed",
        "name": "confirmed",
        "color": "e11d21",
        "default": false,
        "description": null
      },
      {
        "id": 571470316,
        "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats",
        "name": "aspect: binary formats",
        "color": "5319e7",
        "default": false,
        "description": "BSON, CBOR, MessagePack, UBJSON"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-12-20T15:34:42Z",
    "updated_at": "2024-04-21T10:51:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nTrying to convert a nlohmann::json object which contains an unsigned int of 64 bit length breaks BSON conversion.\r\nI do consider this to be a bug, as BSON should be capable of handling those values [[1](https://bsonspec.org/spec.html)] , but the corresponding header-bits are not set in [write_bson_unsigned](https://github.com/nlohmann/json/blob/develop/single_include/nlohmann/json.hpp#L16028). Only entry headers `0x10` (for `int32`) and `0x12` (for `int64`) are written, but `11` (for `uint_64`) is not.\n\n### Reproduction steps\n\nThis bug is triggered whenever one uses the `json::to_bson` function on any object that contains an uint64_t, that really uses all 64 bits.\n\n### Expected vs. actual results\n\nI expect BSON to generated, but I get an error message (see below)\n\n### Minimal code example\n\n```Shell\n#include <map>\r\n#include <string>\r\n#include <nlohmann/json.hpp>\r\n\r\nint main(){\r\n  std::map<size_t,std::string> m={{14631357879723465589u /*really just any large enough uint64_number*/,\"To_Big\"}};\r\n  nlohmann::json j;\r\n  j[\"map\"]=m;\r\n  auto bson=nlohmann::json::to_bson(j); //can not be converted\r\n}\n```\n\n\n### Error messages\n\n```Shell\nterminate called after throwing an instance of 'nlohmann::detail::out_of_range'\r\n  what():  [json.exception.out_of_range.407] integer number 14631357879723465589 cannot be represented by BSON as it does not fit int64\n```\n\n\n### Compiler and operating system\n\nClang-13 on Mint 21 64bit, Clang Trunk (via godbolt)\n\n### Library version\n\n3.11.2 (develop branch via godbolt) , 3.10.5\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3894/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3894/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3885",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3885/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3885/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3885/events",
    "html_url": "https://github.com/nlohmann/json/issues/3885",
    "id": 1501295787,
    "node_id": "I_kwDOAKp23M5Ze_Sr",
    "number": 3885,
    "title": "meson build does not install nlohmann_json*.cmake files",
    "user": {
      "login": "heitbaum",
      "id": 6086324,
      "node_id": "MDQ6VXNlcjYwODYzMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6086324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/heitbaum",
      "html_url": "https://github.com/heitbaum",
      "followers_url": "https://api.github.com/users/heitbaum/followers",
      "following_url": "https://api.github.com/users/heitbaum/following{/other_user}",
      "gists_url": "https://api.github.com/users/heitbaum/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/heitbaum/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/heitbaum/subscriptions",
      "organizations_url": "https://api.github.com/users/heitbaum/orgs",
      "repos_url": "https://api.github.com/users/heitbaum/repos",
      "events_url": "https://api.github.com/users/heitbaum/events{/privacy}",
      "received_events_url": "https://api.github.com/users/heitbaum/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2022-12-17T09:28:11Z",
    "updated_at": "2022-12-18T20:16:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nIssue identified that meson build does not install nlohmann_json*.cmake files into /usr/share/cmake/nlohmann_json, so packages expecting these .cmake files are unable to build. \r\n\r\nRef: https://github.com/LibreELEC/LibreELEC.tv/pull/7250\r\n\r\nwe have reverted back to cmake builds for the time being. ** Our package build system prefers meson over cmake\n\n### Reproduction steps\n\nComplete a meson build\n\n### Expected vs. actual results\n\nUse a cmake build\n\n### Minimal code example\n\n```Shell\nNa\n```\n\n\n### Error messages\n\n```Shell\nNa\n```\n\n\n### Compiler and operating system\n\nLibreELEC :master / gcc 12.2\n\n### Library version\n\n3.11.2\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3885/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3868",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3868/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3868/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3868/events",
    "html_url": "https://github.com/nlohmann/json/issues/3868",
    "id": 1481274735,
    "node_id": "I_kwDOAKp23M5YSnVv",
    "number": 3868,
    "title": "[MSVC][std:c++latest] JSON failed with error C2678: binary '==': no operator found which takes a left-hand operand of type 'nlohmann::json_abi_v3_11_2::json'",
    "user": {
      "login": "QuellaZhang",
      "id": 36754348,
      "node_id": "MDQ6VXNlcjM2NzU0MzQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/36754348?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QuellaZhang",
      "html_url": "https://github.com/QuellaZhang",
      "followers_url": "https://api.github.com/users/QuellaZhang/followers",
      "following_url": "https://api.github.com/users/QuellaZhang/following{/other_user}",
      "gists_url": "https://api.github.com/users/QuellaZhang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QuellaZhang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QuellaZhang/subscriptions",
      "organizations_url": "https://api.github.com/users/QuellaZhang/orgs",
      "repos_url": "https://api.github.com/users/QuellaZhang/repos",
      "events_url": "https://api.github.com/users/QuellaZhang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QuellaZhang/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2022-12-07T08:01:14Z",
    "updated_at": "2023-05-26T02:21:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nAfter the MSVC team implemented [P2468R2 The Equality Operator You Are Looking For](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2468r2.html), we got compiler errors with /std:c++latest like below. The way this fails is that the != operator here: https://github.com/nlohmann/json/blob/develop/include/nlohmann/json.hpp#L3704 actually suppresses the rewritten operator candidates and stops the code from compiling because the rewritten candidates are discarded. Could you please look this issue? Thanks.\r\n\r\n**Note:** this issue will be reproduced on next release version of VS(17.6 or later).\r\n\r\n### Reproduction steps\r\n\r\n1. open VS2019 x64 tools command (Or VS2022)\r\n2. git clone https://github.com/nlohmann/json F:\\gitP\\nlohmann\\json\r\n3. mkdir F:\\gitP\\nlohmann\\json\\build_amd64\r\n4. cd F:\\gitP\\nlohmann\\json\\build_amd64\r\n5. cmake -G \"Visual Studio 16 2019\" -A x64 -DCMAKE_SYSTEM_VERSION=10.0.18362.0 -DJSON_BuildTests=On ..\r\n6. set _CL_= /std:c++latest\r\n7. msbuild /m /p:Platform=x64 /p:Configuration=Release nlohmann_json.sln /t:Rebuild\r\n\r\n### Expected vs. actual results\r\n\r\n**Expected Result:**\r\nThe build was successful.\r\n\r\n**Actual Result:** \r\nbuild.log: [JSON_amd64_build.log](https://github.com/nlohmann/json/files/10173916/JSON_amd64_build.log)\r\n\r\n```\r\nunit-constructor1.cpp\r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-constructor1.cpp(282,13): error C2088: '==': illegal for class\r\n\r\nunit-iterators2.cpp\r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-iterators2.cpp(946,17): error C2678: binary '==': no operator found which takes a left-hand operand of type 'nlohmann::json_abi_v3_11_2::json' (or there is no acceptable conversion)\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\thread(242,36): note: could be 'bool std::operator ==(std::thread::id,std::thread::id) noexcept' [found using argument-dependent lookup]\r\nF:\\gitP\\nlohmann\\json\\include\\nlohmann/json.hpp(3680,10): note: or 'bool nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>,void>::operator ==(const nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>,void> &) noexcept const' [synthesized expression 'y == x']\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\thread(242,36): note: or 'bool std::operator ==(std::thread::id,std::thread::id) noexcept' [synthesized expression 'y == x']\r\nF:\\gitP\\nlohmann\\json\\tests\\thirdparty\\doctest\\doctest.h(1238,9): note: or       'unknown-type doctest::detail::Expression_lhs<std::ranges::reverse_view<std::ranges::ref_view<nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>,void>>> &>::operator ==(R &&)'\r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-iterators2.cpp(946,17): note: Failed to specialize function template 'unknown-type doctest::detail::Expression_lhs<std::ranges::reverse_view<std::ranges::ref_view<nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>,void>>> &>::operator ==(R &&)'\r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-iterators2.cpp(946,17): note: With the following template arguments:\r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-iterators2.cpp(946,17): note: 'R=nlohmann::json_abi_v3_11_2::json &'\r\nF:\\gitP\\nlohmann\\json\\include\\nlohmann/json.hpp(3697,10): note: or 'bool nlohmann::json_abi_v3_11_2::basic_json<std::map,std::vector,std::string,bool,int64_t,uint64_t,double,std::allocator,nlohmann::json_abi_v3_11_2::adl_serializer,std::vector<uint8_t,std::allocator<uint8_t>>,void>::operator ==(ScalarType) noexcept const' [synthesized expression 'y == x']\r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-iterators2.cpp(946,17): note: the associated constraints are not satisfied\r\nF:\\gitP\\nlohmann\\json\\include\\nlohmann/json.hpp(3696,14): note: the constraint was not satisfied\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\include\\utility(367,27): note: or       'bool std::operator ==(const std::pair<_Ty1,_Ty2> &,const std::pair<_Ty1,_Ty2> &)'\r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-iterators2.cpp(946,17): note: 'bool std::operator ==(const std::pair<_Ty1,_Ty2> &,const std::pair<_Ty1,_Ty2> &)': could not deduce template argument for 'const std::pair<_Ty1,_Ty2> &' from \r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-iterators2.cpp(946,17): error C2660: 'doctest::detail::decomp_assert': function does not take 4 arguments\r\nF:\\gitP\\nlohmann\\json\\tests\\thirdparty\\doctest\\doctest.h(1425,28): note: see declaration of 'doctest::detail::decomp_assert'\r\nF:\\gitP\\nlohmann\\json\\tests\\src\\unit-iterators2.cpp(946,17): note: while trying to match the argument list '(doctest::assertType::Enum, const char [52], int, const char [23])'\r\n```\r\n\r\n### Minimal code example\r\n\r\n_No response_\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\nInternal unreleased MSVC\r\n\r\n### Library version\r\n\r\ndevelop branch of 8f8315368b74f3ea4f30154dff1242d2f145c705\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3868/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3859",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3859/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3859/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3859/events",
    "html_url": "https://github.com/nlohmann/json/issues/3859",
    "id": 1472789812,
    "node_id": "I_kwDOAKp23M5XyP00",
    "number": 3859,
    "title": ".value() with optional default value fails to compile",
    "user": {
      "login": "audaki",
      "id": 1321285,
      "node_id": "MDQ6VXNlcjEzMjEyODU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1321285?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/audaki",
      "html_url": "https://github.com/audaki",
      "followers_url": "https://api.github.com/users/audaki/followers",
      "following_url": "https://api.github.com/users/audaki/following{/other_user}",
      "gists_url": "https://api.github.com/users/audaki/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/audaki/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/audaki/subscriptions",
      "organizations_url": "https://api.github.com/users/audaki/orgs",
      "repos_url": "https://api.github.com/users/audaki/repos",
      "events_url": "https://api.github.com/users/audaki/events{/privacy}",
      "received_events_url": "https://api.github.com/users/audaki/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2022-12-02T12:28:33Z",
    "updated_at": "2024-10-18T19:06:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nWe upgraded from 3.10.5 to 3.11.2\r\n\r\nSince the Upgrade we can't compile `value()` with optional fallback value anymore\r\n\r\n### Reproduction steps\r\n\r\nTry to compile value with `std::optional<std::string>{}` as fallback. Is this still possible at all, was I using a non-supported edge-case before?\r\n\r\n### Expected vs. actual results\r\n\r\nCompiles vs not\r\n\r\n### Minimal code example\r\n\r\nBeforehand we said:\r\n```\r\nstd::optional<std::string> customer_id;\r\ncustomer_id = json.value(\"customer_id\", std::optional<std::string>{});\r\n```\r\n\r\nThis no longer compiles. Even without the assignment and I tried different versions, all fail to compile:\r\n\r\n```\r\njson.value(\"customer_id\", std::optional<std::string>{});\r\njson.value<std::optional<std::string>>(\"customer_id\", std::optional<std::string>{});\r\n```\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n_No response_\r\n\r\n### Compiler and operating system\r\n\r\nUbuntu 22.04, Clang 14\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- (haven't tested this) [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests). **All passed**",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3859/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3859/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3850",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3850/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3850/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3850/events",
    "html_url": "https://github.com/nlohmann/json/issues/3850",
    "id": 1466969406,
    "node_id": "I_kwDOAKp23M5XcC0-",
    "number": 3850,
    "title": "Unexpected deprecation warning in 3.11.2",
    "user": {
      "login": "garethsb",
      "id": 31761158,
      "node_id": "MDQ6VXNlcjMxNzYxMTU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/31761158?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/garethsb",
      "html_url": "https://github.com/garethsb",
      "followers_url": "https://api.github.com/users/garethsb/followers",
      "following_url": "https://api.github.com/users/garethsb/following{/other_user}",
      "gists_url": "https://api.github.com/users/garethsb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/garethsb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/garethsb/subscriptions",
      "organizations_url": "https://api.github.com/users/garethsb/orgs",
      "repos_url": "https://api.github.com/users/garethsb/repos",
      "events_url": "https://api.github.com/users/garethsb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/garethsb/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2022-11-28T19:26:33Z",
    "updated_at": "2024-03-03T05:20:53Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nDeprecation of mixed type comparison operators of `json_pointer` seems to have resulted in unexpected deprecation warning when using `json::at` with `json_pointer`, I think because `is_comparable` is evaluated while calculating the overload candidates...\r\n\r\n### Reproduction steps\r\n\r\nCompile example with GCC against 3.11.2. Works OK with 3.11.1.\r\n\r\n### Expected vs. actual results\r\n\r\nExpected:\r\n\r\nNo warnings.\r\n\r\nActual:\r\n\r\nSeveral long-winded warnings.\r\n\r\n### Minimal code example\r\n\r\n```C++\r\n#include <nlohmann/json.hpp>\r\n\r\nvoid meow()\r\n{\r\n    nlohmann::json j;\r\n    nlohmann::json::json_pointer p;\r\n    j.at(p);\r\n}\r\n```\r\n\r\n### Error messages\r\n\r\n```\r\n<source>: In instantiation of 'struct nlohmann::json_abi_v3_11_2::detail::is_comparable<std::less<std::__cxx11::basic_string<char> >, std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::json_pointer<std::__cxx11::basic_string<char> >&, void>':\r\n<source>:3924:31:   required by substitution of 'template<class KeyType, typename std::enable_if<typename std::conditional<(typename std::conditional<(((nlohmann::json_abi_v3_11_2::detail::is_comparable<std::less<std::__cxx11::basic_string<char> >, std::__cxx11::basic_string<char>, KeyType, void>::value && (!(true && std::is_same<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::__cxx11::basic_string<char> >::value))) && ((! true) || std::integral_constant<bool, false>::value)) && (! nlohmann::json_abi_v3_11_2::detail::is_specialization_of<nlohmann::json_abi_v3_11_2::json_pointer, typename std::remove_cv<typename std::remove_reference<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type>::type>::type>::value)), std::integral_constant<bool, true>, std::integral_constant<bool, false> >::type::value && (! nlohmann::json_abi_v3_11_2::detail::is_json_iterator_of<nlohmann::json_abi_v3_11_2::basic_json<>, typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type>::value)), std::integral_constant<bool, true>, std::integral_constant<bool, false> >::type::value, int>::type <anonymous> > const nlohmann::json_abi_v3_11_2::basic_json<>::value_type& nlohmann::json_abi_v3_11_2::basic_json<>::at(KeyType&&) const [with KeyType = nlohmann::json_abi_v3_11_2::json_pointer<std::__cxx11::basic_string<char> >&; typename std::enable_if<typename std::conditional<(typename std::conditional<(((nlohmann::json_abi_v3_11_2::detail::is_comparable<std::less<std::__cxx11::basic_string<char> >, std::__cxx11::basic_string<char>, KeyType, void>::value && (!(true && std::is_same<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type, std::__cxx11::basic_string<char> >::value))) && ((! true) || std::integral_constant<bool, false>::value)) && (! nlohmann::json_abi_v3_11_2::detail::is_specialization_of<nlohmann::json_abi_v3_11_2::json_pointer, typename std::remove_cv<typename std::remove_reference<typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type>::type>::type>::value)), std::integral_constant<bool, true>, std::integral_constant<bool, false> >::type::value && (! nlohmann::json_abi_v3_11_2::detail::is_json_iterator_of<nlohmann::json_abi_v3_11_2::basic_json<>, typename std::remove_cv<typename std::remove_reference<_Tp>::type>::type>::value)), std::integral_constant<bool, true>, std::integral_constant<bool, false> >::type::value, int>::type <anonymous> = <missing>]'\r\n<source>:24606:9:   required from here\r\n<source>:3911:33: warning: 'nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::operator string_t() const [with RefStringType = std::__cxx11::basic_string<char>; string_t = std::__cxx11::basic_string<char>]' is deprecated: Since 3.11.0; use to_string() [-Wdeprecated-declarations]\r\n 3911 | decltype(std::declval<Compare>()(std::declval<A>(), std::declval<B>())),\r\n      |          ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n<source>:13765:5: note: declared here\r\n13765 |     operator string_t() const\r\n      |     ^~~~~~~~\r\n<source>:3912:33: warning: 'nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::operator string_t() const [with RefStringType = std::__cxx11::basic_string<char>; string_t = std::__cxx11::basic_string<char>]' is deprecated: Since 3.11.0; use to_string() [-Wdeprecated-declarations]\r\n 3912 | decltype(std::declval<Compare>()(std::declval<B>(), std::declval<A>()))\r\n      |          ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n<source>:13765:5: note: declared here\r\n13765 |     operator string_t() const\r\n      |     ^~~~~~~~\r\n<source>:3911:33: warning: 'nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::operator string_t() const [with RefStringType = std::__cxx11::basic_string<char>; string_t = std::__cxx11::basic_string<char>]' is deprecated: Since 3.11.0; use to_string() [-Wdeprecated-declarations]\r\n 3911 | decltype(std::declval<Compare>()(std::declval<A>(), std::declval<B>())),\r\n      |          ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n<source>:13765:5: note: declared here\r\n13765 |     operator string_t() const\r\n      |     ^~~~~~~~\r\n<source>:3912:33: warning: 'nlohmann::json_abi_v3_11_2::json_pointer<RefStringType>::operator string_t() const [with RefStringType = std::__cxx11::basic_string<char>; string_t = std::__cxx11::basic_string<char>]' is deprecated: Since 3.11.0; use to_string() [-Wdeprecated-declarations]\r\n 3912 | decltype(std::declval<Compare>()(std::declval<B>(), std::declval<A>()))\r\n      |          ~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n<source>:13765:5: note: declared here\r\n13765 |     operator string_t() const\r\n      |     ^~~~~~~~\r\n```\r\n\r\n### Compiler and operating system\r\n\r\nGCC (tried 12.2 back to 4.8)\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3850/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3850/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3810",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3810/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3810/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3810/events",
    "html_url": "https://github.com/nlohmann/json/issues/3810",
    "id": 1428783557,
    "node_id": "I_kwDOAKp23M5VKYHF",
    "number": 3810,
    "title": "`ordered_json` doesn't support construction from C array of custom type",
    "user": {
      "login": "lethal-guitar",
      "id": 1821027,
      "node_id": "MDQ6VXNlcjE4MjEwMjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1821027?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lethal-guitar",
      "html_url": "https://github.com/lethal-guitar",
      "followers_url": "https://api.github.com/users/lethal-guitar/followers",
      "following_url": "https://api.github.com/users/lethal-guitar/following{/other_user}",
      "gists_url": "https://api.github.com/users/lethal-guitar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lethal-guitar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lethal-guitar/subscriptions",
      "organizations_url": "https://api.github.com/users/lethal-guitar/orgs",
      "repos_url": "https://api.github.com/users/lethal-guitar/repos",
      "events_url": "https://api.github.com/users/lethal-guitar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lethal-guitar/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2022-10-30T13:12:01Z",
    "updated_at": "2022-11-04T15:50:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nI have a C-style array of structs, plus an appropriate `to_json` overload. I can succesfully convert the array to JSON using a regular `nlohmann::json` object.  However, trying to do the same using `nlohmann::ordered_json` fails to compile - see details below.\r\n\r\n### Reproduction steps\r\n\r\nSee the example code below.\r\n\r\n### Expected vs. actual results\r\n\r\nI'd expect the code to compile, but I get a compiler error.\r\n\r\n### Minimal code example\r\n\r\nBuild with `-std=c++17 -O3`.\r\n\r\n```cpp\r\n#include <nlohmann/json.hpp>\r\n\r\nstruct Example\r\n{\r\n    int bla;\r\n};\r\n\r\nNLOHMANN_DEFINE_TYPE_NON_INTRUSIVE(Example, bla);\r\n\r\nint main()\r\n{\r\n    Example states[45];\r\n\r\n    // This works:\r\n    nlohmann::json j;\r\n    j[\"test\"] = states;\r\n\r\n    // This doesn't compile:\r\n    nlohmann::ordered_json oj;\r\n    oj[\"test\"] = states;\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\ngcc 9.4.0 reports:\r\n\r\n```Shell\r\nIn file included from /opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/vector:66,\r\n                 from /opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/functional:62,\r\n                 from /opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/pstl/glue_algorithm_defs.h:13,\r\n                 from /opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/algorithm:71,\r\n                 from /opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:21,\r\n                 from <source>:1:\r\n/opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/bits/stl_uninitialized.h: In instantiation of '_ForwardIterator std::uninitialized_copy(_InputIterator, _InputIterator, _ForwardIterator) [with _InputIterator = const Example*; _ForwardIterator = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>*]':\r\n/opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/bits/stl_uninitialized.h:307:37:   required from '_ForwardIterator std::__uninitialized_copy_a(_InputIterator, _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator = const Example*; _ForwardIterator = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>*; _Tp = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>]'\r\n/opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/bits/stl_vector.h:1582:33:   required from 'void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator, _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = const Example*; _Tp = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>; _Alloc = std::allocator<nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map> >]'\r\n/opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/bits/stl_vector.h:654:4:   required from 'std::vector<_Tp, _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&) [with _InputIterator = const Example*; <template-parameter-2-2> = void; _Tp = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>; _Alloc = std::allocator<nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map> >]'\r\n/opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/ext/new_allocator.h:146:4:   required from 'void __gnu_cxx::new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = std::vector<nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>, std::allocator<nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map> > >; _Args = {const Example*, const Example*}; _Tp = std::vector<nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>, std::allocator<nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map> > >]'\r\n/opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/bits/alloc_traits.h:483:4:   [ skipping 2 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:5412:25:   required from 'static void nlohmann::json_v3_11_1::detail::external_constructor<nlohmann::json_v3_11_1::detail::value_t::array>::construct(BasicJsonType&, const CompatibleArrayType&) [with BasicJsonType = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>; CompatibleArrayType = Example [45]; typename std::enable_if<(! std::is_same<CompatibleArrayType, typename BasicJsonType::array_t>::value), int>::type <anonymous> = 0]'\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:5607:52:   required from 'void nlohmann::json_v3_11_1::detail::to_json(BasicJsonType&, const T (&)[N]) [with BasicJsonType = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>; T = Example; long unsigned int N = 45; typename std::enable_if<(! std::is_constructible<typename BasicJsonType::string_t, const T (&)[N]>::value), int>::type <anonymous> = 0]'\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:5650:23:   required from 'decltype ((nlohmann::json_v3_11_1::detail::to_json(j, forward<T>(val)), void())) nlohmann::json_v3_11_1::detail::to_json_fn::operator()(BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>; T = Example (&)[45]; decltype ((nlohmann::json_v3_11_1::detail::to_json(j, forward<T>(val)), void())) = void]'\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:5706:28:   required from 'static decltype ((nlohmann::json_v3_11_1::to_json(j, forward<TargetType>(val)), void())) nlohmann::json_v3_11_1::adl_serializer<T, SFINAE>::to_json(BasicJsonType&, TargetType&&) [with BasicJsonType = nlohmann::json_v3_11_1::basic_json<nlohmann::json_v3_11_1::ordered_map>; TargetType = Example (&)[45]; ValueType = Example [45]; <template-parameter-1-2> = void; decltype ((nlohmann::json_v3_11_1::to_json(j, forward<TargetType>(val)), void())) = void]'\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.11.1/single_include/nlohmann/json.hpp:19798:35:   required from 'nlohmann::json_v3_11_1::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::basic_json(CompatibleType&&) [with CompatibleType = Example (&)[45]; U = Example [45]; typename std::enable_if<((! nlohmann::json_v3_11_1::detail::is_basic_json<U>::value) && nlohmann::json_v3_11_1::detail::is_compatible_type<nlohmann::json_v3_11_1::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, U>::value), int>::type <anonymous> = 0; ObjectType = nlohmann::json_v3_11_1::ordered_map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_v3_11_1::adl_serializer; BinaryType = std::vector<unsigned char>]'\r\n<source>:20:18:   required from here\r\n/opt/compiler-explorer/gcc-9.4.0/include/c++/9.4.0/bits/stl_uninitialized.h:127:72: error: static assertion failed: result type must be constructible from value type of input range\r\n  127 |       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,\r\n      |\r\n```\r\n\r\nClang outputs a significantly longer error message, which boils down to \"No matching constructor found\".\r\n\r\n\r\n### Compiler and operating system\r\n\r\nGCC 9.4 on Linux (godbolt), Apple Clang 10 on Mac OS\r\n\r\n### Library version\r\n\r\n3.11.1\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3810/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3810/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3808",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3808/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3808/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3808/events",
    "html_url": "https://github.com/nlohmann/json/issues/3808",
    "id": 1425834081,
    "node_id": "I_kwDOAKp23M5U_IBh",
    "number": 3808,
    "title": "Compiler warning 'array-bounds' on g++12.2.0 on Ubuntu 22.10 kinetic with RelWithDebugInfo",
    "user": {
      "login": "NeroBurner",
      "id": 9076163,
      "node_id": "MDQ6VXNlcjkwNzYxNjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9076163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NeroBurner",
      "html_url": "https://github.com/NeroBurner",
      "followers_url": "https://api.github.com/users/NeroBurner/followers",
      "following_url": "https://api.github.com/users/NeroBurner/following{/other_user}",
      "gists_url": "https://api.github.com/users/NeroBurner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NeroBurner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NeroBurner/subscriptions",
      "organizations_url": "https://api.github.com/users/NeroBurner/orgs",
      "repos_url": "https://api.github.com/users/NeroBurner/repos",
      "events_url": "https://api.github.com/users/NeroBurner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NeroBurner/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2022-10-27T15:27:40Z",
    "updated_at": "2024-08-13T12:14:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nOn the latest Ubuntu 22.10 kinetic release `-Werror` in `RelWithDebInfo` can't be used because of compiler warning `array-bounds`\r\n\r\n### Reproduction steps\r\n\r\n- Get g++-12 like Ubuntu 22.10 kinetic\r\n  - for example the `ubuntu:22.10` docker container `docker run --rm -it -v\"${PWD}\":\"${PWD}\" -w \"${PWD}\" ubuntu:22.10`\r\n  - install build dependencies `sudo apt update -q && sudo apt install -yq g++ cmake make`\r\n\r\nBuild Release with Debug Info, enable warnings and error on them, then build `test-constructor1_cpp11`\r\n```sh\r\ncmake -S . -B build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_FLAGS=\"-Werror -Wall -Wextra -pedantic\"\r\ncmake --build build --target test-constructor1_cpp11\r\n```\r\n\r\nGet Build Error\r\n\r\n### Expected vs. actual results\r\n\r\nexpected: build without warning\r\n\r\nactual result: build warning (leading to error because of my `-Werror` flag)\r\n\r\n\r\n\r\n### Minimal code example\r\n\r\n```Shell\r\n// Unittest `constructor1.cpp` in `RelWithDebInfo` build type\r\nTEST_CASE(\"constructors\")\r\n{\r\n    SECTION(\"create a JSON container from an iterator range\")\r\n    {\r\n        SECTION(\"other values\")\r\n        {\r\n            SECTION(\"construct with two valid iterators\")\r\n            {\r\n                SECTION(\"string\")\r\n                {\r\n                    {\r\n                        json j = \"foo\";\r\n                        json const j_new(j.begin(), j.end());\r\n                        CHECK(j == j_new);\r\n                    }\r\n                    {\r\n                        json const j = \"bar\";\r\n                        json const j_new(j.cbegin(), j.cend());\r\n                        CHECK(j == j_new);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\ncmake --build build --target test-constructor1_cpp11\r\n[ 33%] Building CXX object tests/CMakeFiles/test_main.dir/src/unit.cpp.o\r\n[ 33%] Built target test_main\r\n[ 66%] Building CXX object tests/CMakeFiles/test-constructor1_cpp11.dir/src/unit-constructor1.cpp.o\r\nIn file included from /usr/include/c++/12/map:60,\r\n                 from /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/conversions/from_json.hpp:15,\r\n                 from /home/nero/repos/external/nlohmann-json/include/nlohmann/adl_serializer.hpp:14,\r\n                 from /home/nero/repos/external/nlohmann-json/include/nlohmann/json.hpp:35,\r\n                 from /home/nero/repos/external/nlohmann-json/tests/src/unit-constructor1.cpp:12:\r\nIn member function 'std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::begin() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > >]',\r\n    inlined from 'std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::begin() [with _Key = std::__cxx11::basic_string<char>; _Tp = nlohmann::json_abi_v3_11_2::basic_json<>; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > >]' at /usr/include/c++/12/bits/stl_map.h:367:26,\r\n    inlined from 'void nlohmann::json_abi_v3_11_2::detail::iter_impl<BasicJsonType>::set_begin() [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/iterators/iter_impl.hpp:205:71,\r\n    inlined from 'nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::iterator nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::begin() [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_2::adl_serializer; BinaryType = std::vector<unsigned char>]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/json.hpp:2761:25,\r\n    inlined from 'void _DOCTEST_ANON_FUNC_2()' at /home/nero/repos/external/nlohmann-json/tests/src/unit-constructor1.cpp:1425:43:\r\n/usr/include/c++/12/bits/stl_tree.h:996:16: error: array subscript 'std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > > >[0]' is partly outside array bounds of 'unsigned char [32]' [-Werror=array-bounds]\r\n  996 |       { return iterator(this->_M_impl._M_header._M_left); }\r\n      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nIn file included from /usr/include/x86_64-linux-gnu/c++/12/bits/c++allocator.h:33,\r\n                 from /usr/include/c++/12/bits/allocator.h:46,\r\n                 from /usr/include/c++/12/string:41,\r\n                 from /usr/include/c++/12/bits/locale_classes.h:40,\r\n                 from /usr/include/c++/12/bits/ios_base.h:41,\r\n                 from /usr/include/c++/12/streambuf:41,\r\n                 from /usr/include/c++/12/bits/streambuf_iterator.h:35,\r\n                 from /usr/include/c++/12/iterator:66,\r\n                 from /home/nero/repos/external/nlohmann-json/include/nlohmann/json.hpp:28:\r\nIn member function '_Tp* std::__new_allocator<_Tp>::allocate(size_type, const void*) [with _Tp = std::__cxx11::basic_string<char>]',\r\n    inlined from 'static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(allocator_type&, size_type) [with _Tp = std::__cxx11::basic_string<char>]' at /usr/include/c++/12/bits/alloc_traits.h:464:28,\r\n    inlined from 'static T* nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::create(Args&& ...) [with T = std::__cxx11::basic_string<char>; Args = {const char (&)[4]}; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_2::adl_serializer; BinaryType = std::vector<unsigned char>]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/json.hpp:387:47,\r\n    inlined from 'static void nlohmann::json_abi_v3_11_2::detail::external_constructor<nlohmann::json_abi_v3_11_2::detail::value_t::string>::construct(BasicJsonType&, const CompatibleStringType&) [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>; CompatibleStringType = char [4]; typename std::enable_if<(! std::is_same<CompatibleStringType, typename BasicJsonType::string_t>::value), int>::type <anonymous> = 0]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/conversions/to_json.hpp:85:79,\r\n    inlined from 'void nlohmann::json_abi_v3_11_2::detail::to_json(BasicJsonType&, const CompatibleString&) [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>; CompatibleString = char [4]; typename std::enable_if<std::is_constructible<typename BasicJsonType::string_t, Key>::value, int>::type <anonymous> = 0]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/conversions/to_json.hpp:287:53,\r\n    inlined from 'decltype ((nlohmann::json_abi_v3_11_2::detail::to_json(j, forward<T>(val)), void())) nlohmann::json_abi_v3_11_2::detail::to_json_fn::operator()(BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>; T = const char (&)[4]]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/conversions/to_json.hpp:428:23,\r\n    inlined from 'static decltype ((nlohmann::json_abi_v3_11_2::{anonymous}::to_json(j, forward<TargetType>(val)), void())) nlohmann::json_abi_v3_11_2::adl_serializer<T, SFINAE>::to_json(BasicJsonType&, TargetType&&) [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>; TargetType = const char (&)[4]; ValueType = char [4]; <template-parameter-1-2> = void]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/adl_serializer.hpp:51:28,\r\n    inlined from 'nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::basic_json(CompatibleType&&) [with CompatibleType = const char (&)[4]; U = char [4]; typename std::enable_if<((! nlohmann::json_abi_v3_11_2::detail::is_basic_json<U>::value) && nlohmann::json_abi_v3_11_2::detail::is_compatible_type<nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, U>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_2::adl_serializer; BinaryType = std::vector<unsigned char>]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/json.hpp:829:35,\r\n    inlined from 'void _DOCTEST_ANON_FUNC_2()' at /home/nero/repos/external/nlohmann-json/tests/src/unit-constructor1.cpp:1424:34:\r\n/usr/include/c++/12/bits/new_allocator.h:137:55: note: object of size 32 allocated by 'operator new'\r\n  137 |         return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));\r\n      |                                                       ^\r\nIn member function 'std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::begin() [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > >]',\r\n    inlined from 'std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::begin() [with _Key = std::__cxx11::basic_string<char>; _Tp = nlohmann::json_abi_v3_11_2::basic_json<>; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > >]' at /usr/include/c++/12/bits/stl_map.h:367:26,\r\n    inlined from 'void nlohmann::json_abi_v3_11_2::detail::iter_impl<BasicJsonType>::set_begin() [with BasicJsonType = const nlohmann::json_abi_v3_11_2::basic_json<>]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/iterators/iter_impl.hpp:205:71,\r\n    inlined from 'nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::const_iterator nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::cbegin() const [with ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_2::adl_serializer; BinaryType = std::vector<unsigned char>]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/json.hpp:2777:25,\r\n    inlined from 'void _DOCTEST_ANON_FUNC_2()' at /home/nero/repos/external/nlohmann-json/tests/src/unit-constructor1.cpp:1430:44:\r\n/usr/include/c++/12/bits/stl_tree.h:996:16: error: array subscript 'std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, nlohmann::json_abi_v3_11_2::basic_json<> > > >[0]' is partly outside array bounds of 'unsigned char [32]' [-Werror=array-bounds]\r\n  996 |       { return iterator(this->_M_impl._M_header._M_left); }\r\n      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nIn member function '_Tp* std::__new_allocator<_Tp>::allocate(size_type, const void*) [with _Tp = std::__cxx11::basic_string<char>]',\r\n    inlined from 'static _Tp* std::allocator_traits<std::allocator<_CharT> >::allocate(allocator_type&, size_type) [with _Tp = std::__cxx11::basic_string<char>]' at /usr/include/c++/12/bits/alloc_traits.h:464:28,\r\n    inlined from 'static T* nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::create(Args&& ...) [with T = std::__cxx11::basic_string<char>; Args = {const char (&)[4]}; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_2::adl_serializer; BinaryType = std::vector<unsigned char>]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/json.hpp:387:47,\r\n    inlined from 'static void nlohmann::json_abi_v3_11_2::detail::external_constructor<nlohmann::json_abi_v3_11_2::detail::value_t::string>::construct(BasicJsonType&, const CompatibleStringType&) [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>; CompatibleStringType = char [4]; typename std::enable_if<(! std::is_same<CompatibleStringType, typename BasicJsonType::string_t>::value), int>::type <anonymous> = 0]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/conversions/to_json.hpp:85:79,\r\n    inlined from 'void nlohmann::json_abi_v3_11_2::detail::to_json(BasicJsonType&, const CompatibleString&) [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>; CompatibleString = char [4]; typename std::enable_if<std::is_constructible<typename BasicJsonType::string_t, Key>::value, int>::type <anonymous> = 0]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/conversions/to_json.hpp:287:53,\r\n    inlined from 'decltype ((nlohmann::json_abi_v3_11_2::detail::to_json(j, forward<T>(val)), void())) nlohmann::json_abi_v3_11_2::detail::to_json_fn::operator()(BasicJsonType&, T&&) const [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>; T = const char (&)[4]]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/detail/conversions/to_json.hpp:428:23,\r\n    inlined from 'static decltype ((nlohmann::json_abi_v3_11_2::{anonymous}::to_json(j, forward<TargetType>(val)), void())) nlohmann::json_abi_v3_11_2::adl_serializer<T, SFINAE>::to_json(BasicJsonType&, TargetType&&) [with BasicJsonType = nlohmann::json_abi_v3_11_2::basic_json<>; TargetType = const char (&)[4]; ValueType = char [4]; <template-parameter-1-2> = void]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/adl_serializer.hpp:51:28,\r\n    inlined from 'nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>::basic_json(CompatibleType&&) [with CompatibleType = const char (&)[4]; U = char [4]; typename std::enable_if<((! nlohmann::json_abi_v3_11_2::detail::is_basic_json<U>::value) && nlohmann::json_abi_v3_11_2::detail::is_compatible_type<nlohmann::json_abi_v3_11_2::basic_json<ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType>, U>::value), int>::type <anonymous> = 0; ObjectType = std::map; ArrayType = std::vector; StringType = std::__cxx11::basic_string<char>; BooleanType = bool; NumberIntegerType = long int; NumberUnsignedType = long unsigned int; NumberFloatType = double; AllocatorType = std::allocator; JSONSerializer = nlohmann::json_abi_v3_11_2::adl_serializer; BinaryType = std::vector<unsigned char>]' at /home/nero/repos/external/nlohmann-json/include/nlohmann/json.hpp:829:35,\r\n    inlined from 'void _DOCTEST_ANON_FUNC_2()' at /home/nero/repos/external/nlohmann-json/tests/src/unit-constructor1.cpp:1429:34:\r\n/usr/include/c++/12/bits/new_allocator.h:137:55: note: object of size 32 allocated by 'operator new'\r\n  137 |         return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));\r\n      |                                                       ^\r\ncc1plus: all warnings being treated as errors\r\ngmake[3]: *** [tests/CMakeFiles/test-constructor1_cpp11.dir/build.make:76: tests/CMakeFiles/test-constructor1_cpp11.dir/src/unit-constructor1.cpp.o] Error 1\r\ngmake[2]: *** [CMakeFiles/Makefile2:1681: tests/CMakeFiles/test-constructor1_cpp11.dir/all] Error 2\r\ngmake[1]: *** [CMakeFiles/Makefile2:1688: tests/CMakeFiles/test-constructor1_cpp11.dir/rule] Error 2\r\ngmake: *** [Makefile:790: test-constructor1_cpp11] Error 2\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nUbuntu 22.10, g++12.2\r\n\r\n### Library version\r\n\r\n3.11.2\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).\r\n\r\n---\r\n\r\nedit: copied affected code from `unit-constructor1.cpp` to minimal example",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3808/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3808/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3732",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3732/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3732/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3732/events",
    "html_url": "https://github.com/nlohmann/json/issues/3732",
    "id": 1365909557,
    "node_id": "I_kwDOAKp23M5RaiA1",
    "number": 3732,
    "title": "Using iteration_proxy_value with ordered_json fails to compile due to incomplete type",
    "user": {
      "login": "falbrechtskirchinger",
      "id": 320854,
      "node_id": "MDQ6VXNlcjMyMDg1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/320854?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/falbrechtskirchinger",
      "html_url": "https://github.com/falbrechtskirchinger",
      "followers_url": "https://api.github.com/users/falbrechtskirchinger/followers",
      "following_url": "https://api.github.com/users/falbrechtskirchinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/falbrechtskirchinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/falbrechtskirchinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/falbrechtskirchinger/subscriptions",
      "organizations_url": "https://api.github.com/users/falbrechtskirchinger/orgs",
      "repos_url": "https://api.github.com/users/falbrechtskirchinger/repos",
      "events_url": "https://api.github.com/users/falbrechtskirchinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/falbrechtskirchinger/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-09-08T09:39:38Z",
    "updated_at": "2022-09-15T19:48:52Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nUsing iteration_proxy_value with ordered_json as shown below fails to compile due to an incomplete type error in `iterator set_parents(iterator it, typename iterator::difference_type count_set_parents)`.\r\n\r\nThe error can be avoided by altering the order of template instantiation by either forcing instantiation (undesirable; increases compile time for everyone) or rewriting `set_parents()` without `iterator::difference_type`.\r\n\r\nUsers facing this issue may force instantiation in the correct order using\r\n```cpp\r\nusing ItemType = decltype(*std::declval<nlohmann::ordered_json>().items().begin());\r\n```\r\nbefore code triggering the compilation failure.\r\n\r\n(Found via [#3731](https://github.com/nlohmann/json/discussions/3731).)\r\n\r\n### Reproduction steps\r\n\r\nSee code example.\r\n\r\n### Expected vs. actual results\r\n\r\nCode should compile.\r\n\r\n### Minimal code example\r\n\r\n```cpp\r\nvoid test(nlohmann::detail::iteration_proxy_value<\r\n          nlohmann::detail::iter_impl<nlohmann::ordered_json>> const& val) {\r\n    static_cast<void>(val.value());\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n\r\nGCC:\r\n```\r\nerror: invalid use of incomplete type 'using nlohmann::json_abi_v3_11_2::basic_json<nlohmann::json_abi_v3_11_2::ordered_map>::iterator = nlohmann::json_abi_v3_11_2::basic_json<nlohmann::json_abi_v3_11_2::ordered_map>::iter_impl<nlohmann::json_abi_v3_11_2::basic_json<nlohmann::json_abi_v3_11_2::ordered_map> >' {aka 'class nlohmann::json_abi_v3_11_2::detail::iter_impl<nlohmann::json_abi_v3_11_2::basic_json<nlohmann::json_abi_v3_11_2::ordered_map> >'}\r\n```\r\n\r\nClang:\r\n```\r\nerror: no type named 'difference_type' in 'nlohmann::detail::iter_impl<nlohmann::basic_json<nlohmann::ordered_map>>'\r\n```\r\n\r\nMSVC:\r\n```\r\nerror C2039: 'difference_type': is not a member of 'nlohmann::json_abi_v3_11_2::detail::iter_impl<nlohmann::json_abi_v3_11_2::ordered_json>'\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\nCompiler Explorer: GCC (trunk) / Clang (trunk) / MSVC latest\r\n\r\n### Library version\r\n\r\n3.11.2/develop\r\n\r\n### Validation\r\n\r\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3732/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3732/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3669",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3669/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3669/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3669/events",
    "html_url": "https://github.com/nlohmann/json/issues/3669",
    "id": 1328391494,
    "node_id": "I_kwDOAKp23M5PLaVG",
    "number": 3669,
    "title": "invalid use of incomplete type (boost::optional) / compile error",
    "user": {
      "login": "a-w50",
      "id": 75637418,
      "node_id": "MDQ6VXNlcjc1NjM3NDE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/75637418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/a-w50",
      "html_url": "https://github.com/a-w50",
      "followers_url": "https://api.github.com/users/a-w50/followers",
      "following_url": "https://api.github.com/users/a-w50/following{/other_user}",
      "gists_url": "https://api.github.com/users/a-w50/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/a-w50/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/a-w50/subscriptions",
      "organizations_url": "https://api.github.com/users/a-w50/orgs",
      "repos_url": "https://api.github.com/users/a-w50/repos",
      "events_url": "https://api.github.com/users/a-w50/events{/privacy}",
      "received_events_url": "https://api.github.com/users/a-w50/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2022-08-04T10:09:34Z",
    "updated_at": "2022-08-04T13:54:19Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\r\n\r\nHi there,\r\n\r\nI get some compiler errors, which I unfortunately don't understand in detail. See the small minimal example.  Probably it's a compiler bug, because it compiles with gcc 11+ and clang11. It also compiles with gcc 10 when using -std=c++17.\r\n\r\nThe code also compiles fine, if I comment out the \"to_json\" function or make the Dummy constructor non-explicit.  I don't understand why in the gcc10 setup with c++11 standard, the to_json function gets inspected at all.  How can it matter if this function exists or not?\r\n\r\nThank you for your comments!\r\n\r\n### Reproduction steps\r\n\r\nSee also https://godbolt.org/z/1Whjn8nKn\r\n\r\n### Expected vs. actual results\r\n\r\nIt should compile, but it doesn't.\r\n\r\n### Minimal code example\r\n\r\n```cpp\r\n#include <boost/optional.hpp>\r\n\r\n#include <nlohmann/json.hpp>\r\n\r\nclass Dummy {\r\n    explicit Dummy(const nlohmann::json& data) {\r\n    }\r\n};\r\n\r\nclass Holder {\r\n    boost::optional<Dummy> d;\r\n\r\npublic:\r\n};\r\n\r\nvoid to_json(nlohmann::json& j, const Holder& h) {\r\n}\r\n\r\nint main(int argc, char* argv[]) {\r\n    Holder h;\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\n### Error messages\r\n\r\n```Shell\r\nIn file included from <source>:3:\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.6.0/single_include/nlohmann/json.hpp: In substitution of 'template<class Expected, template<class ...> class Op, class ... Args> using is_detected_exact = std::is_same<Expected, typename nlohmann::detail::detector<nlohmann::detail::nonesuch, void, Op, Args ...>::type> [with Expected = void; Op = nlohmann::detail::to_json_function; Args = {nlohmann::adl_serializer<Dummy, void>, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long int, long unsigned int, double, std::allocator, nlohmann::adl_serializer>&, Dummy}]':\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.6.0/single_include/nlohmann/json.hpp:986:13:   required from 'constexpr const bool nlohmann::detail::has_to_json<nlohmann::basic_json<>, Dummy, void>::value'\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.6.0/single_include/nlohmann/json.hpp:1204:53:   required from 'constexpr const bool nlohmann::detail::is_compatible_type_impl<nlohmann::basic_json<>, Dummy, void>::value'\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.6.0/single_include/nlohmann/json.hpp:14016:55:   required by substitution of 'template<class CompatibleType, class U, typename std::enable_if<((! nlohmann::detail::is_basic_json<T>::value) && nlohmann::detail::is_compatible_type<nlohmann::basic_json<>, U>::value), int>::type <anonymous> > nlohmann::basic_json<>::basic_json(CompatibleType&&) [with CompatibleType = Dummy; U = Dummy; typename std::enable_if<((! nlohmann::detail::is_basic_json<T>::value) && nlohmann::detail::is_compatible_type<nlohmann::basic_json<>, U>::value), int>::type <anonymous> = <missing>]'\r\n/opt/compiler-explorer/libs/boost_1_79_0/boost/type_traits/is_constructible.hpp:37:65:   required by substitution of 'template<class T, class Arg, class> static boost::type_traits::yes_type boost::detail::is_constructible_imp::test1(int) [with T = Dummy; Arg = Dummy; <template-parameter-1-3> = <missing>]'\r\n/opt/compiler-explorer/libs/boost_1_79_0/boost/type_traits/is_constructible.hpp:54:185:   required from 'struct boost::is_constructible<Dummy, Dummy>'\r\n/opt/compiler-explorer/libs/boost_1_79_0/boost/optional/optional.hpp:816:8:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.6.0/single_include/nlohmann/json.hpp:14016:55:   required by substitution of 'template<class CompatibleType, class U, typename std::enable_if<((! nlohmann::detail::is_basic_json<T>::value) && nlohmann::detail::is_compatible_type<nlohmann::basic_json<>, U>::value), int>::type <anonymous> > nlohmann::basic_json<>::basic_json(CompatibleType&&) [with CompatibleType = const Dummy&; U = Dummy; typename std::enable_if<((! nlohmann::detail::is_basic_json<T>::value) && nlohmann::detail::is_compatible_type<nlohmann::basic_json<>, U>::value), int>::type <anonymous> = <missing>]'\r\n/opt/compiler-explorer/libs/boost_1_79_0/boost/type_traits/is_constructible.hpp:37:65:   required by substitution of 'template<class T, class Arg, class> static boost::type_traits::yes_type boost::detail::is_constructible_imp::test1(int) [with T = Dummy; Arg = const Dummy&; <template-parameter-1-3> = <missing>]'\r\n/opt/compiler-explorer/libs/boost_1_79_0/boost/type_traits/is_constructible.hpp:54:185:   required from 'struct boost::is_constructible<Dummy, const Dummy&>'\r\n/opt/compiler-explorer/libs/boost_1_79_0/boost/optional/optional.hpp:816:8:   required from 'struct boost::optional_detail::is_optional_constructible<Dummy, const Dummy&>'\r\n/opt/compiler-explorer/libs/boost_1_79_0/boost/core/enable_if.hpp:41:10:   required from 'struct boost::enable_if<boost::optional_detail::is_optional_constructible<Dummy, const Dummy&>, bool>'\r\n/opt/compiler-explorer/libs/boost_1_79_0/boost/optional/optional.hpp:964:14:   required by substitution of 'template<class U> boost::optional<Dummy>::optional(const boost::optional<T>&, typename boost::enable_if<boost::optional_detail::is_optional_constructible<Dummy, const U&>, bool>::type) [with U = Dummy]'\r\n<source>:20:12:   required from here\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.6.0/single_include/nlohmann/json.hpp:802:7: error: invalid use of incomplete type 'struct nlohmann::detail::detector<nlohmann::detail::nonesuch, void, nlohmann::detail::to_json_function, nlohmann::adl_serializer<Dummy, void>, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long int, long unsigned int, double, std::allocator, nlohmann::adl_serializer>&, Dummy>'\r\n  802 | using is_detected_exact = std::is_same<Expected, detected_t<Op, Args...>>;\r\n      |       ^~~~~~~~~~~~~~~~~\r\n/opt/compiler-explorer/libs/nlohmann_json/v3.6.0/single_include/nlohmann/json.hpp:776:8: note: declaration of 'struct nlohmann::detail::detector<nlohmann::detail::nonesuch, void, nlohmann::detail::to_json_function, nlohmann::adl_serializer<Dummy, void>, nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long int, long unsigned int, double, std::allocator, nlohmann::adl_serializer>&, Dummy>'\r\n  776 | struct detector\r\n      |        ^~~~~~~~\r\nCompiler returned: 1\r\n```\r\n\r\n\r\n### Compiler and operating system\r\n\r\ngcc 10, linux, \r\n\r\n### Library version\r\n\r\n3.10.3\r\n\r\n### Validation\r\n\r\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\r\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3669/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3669/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3659",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3659/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3659/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3659/events",
    "html_url": "https://github.com/nlohmann/json/issues/3659",
    "id": 1327208726,
    "node_id": "I_kwDOAKp23M5PG5kW",
    "number": 3659,
    "title": "serve_header.py doesn't process 'move' events",
    "user": {
      "login": "falbrechtskirchinger",
      "id": 320854,
      "node_id": "MDQ6VXNlcjMyMDg1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/320854?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/falbrechtskirchinger",
      "html_url": "https://github.com/falbrechtskirchinger",
      "followers_url": "https://api.github.com/users/falbrechtskirchinger/followers",
      "following_url": "https://api.github.com/users/falbrechtskirchinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/falbrechtskirchinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/falbrechtskirchinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/falbrechtskirchinger/subscriptions",
      "organizations_url": "https://api.github.com/users/falbrechtskirchinger/orgs",
      "repos_url": "https://api.github.com/users/falbrechtskirchinger/repos",
      "events_url": "https://api.github.com/users/falbrechtskirchinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/falbrechtskirchinger/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-08-03T13:20:01Z",
    "updated_at": "2022-08-03T13:20:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Description\n\nMoving a directory into or out of the `serve_header.py` root is not detected.\n\n### Reproduction steps\n\nMove a directory into or out of the `serve_header.py` root directory.\n\n### Expected vs. actual results\n\nThe directory is added to or removed from the list of work trees being served.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nn/a\n\n### Library version\n\ndevelop\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3659/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3583",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3583/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3583/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3583/events",
    "html_url": "https://github.com/nlohmann/json/issues/3583",
    "id": 1306782509,
    "node_id": "I_kwDOAKp23M5N4-st",
    "number": 3583,
    "title": "json destructor quite slow",
    "user": {
      "login": "wolfv",
      "id": 885054,
      "node_id": "MDQ6VXNlcjg4NTA1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/885054?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wolfv",
      "html_url": "https://github.com/wolfv",
      "followers_url": "https://api.github.com/users/wolfv/followers",
      "following_url": "https://api.github.com/users/wolfv/following{/other_user}",
      "gists_url": "https://api.github.com/users/wolfv/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wolfv/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wolfv/subscriptions",
      "organizations_url": "https://api.github.com/users/wolfv/orgs",
      "repos_url": "https://api.github.com/users/wolfv/repos",
      "events_url": "https://api.github.com/users/wolfv/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wolfv/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2022-07-16T11:21:47Z",
    "updated_at": "2023-11-14T14:45:22Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "### Description\n\nI was running `patch` over a ~100Mb repodata file and noticed that it was slow due to copying and destroying the entire object multiple times.\r\n\r\nI am quite curious if the performance of `destroy()` could be improved? On my computer, it takes roughly 1 second to parse the file and create the json object, but also 0.5 seconds to destroy the json object.\n\n### Reproduction steps\n\nDownload a large JSON file, such as https://conda.anaconda.org/conda-forge/linux-64/repodata.json (`curl --compressed https://conda.anaconda.org/conda-forge/linux-64/repodata.json`)\r\n\r\nand run the following code:\r\n\r\n\r\n```\r\n#include <iostream>\r\n#include <chrono>\r\n#include <nlohmann/json.hpp>\r\n\r\nint\r\nmain()\r\n{\r\n    std::ifstream rdata(\"repodata.json\");\r\n    std::unique_ptr<nlohmann::json> j = std::make_unique<nlohmann::json>();\r\n    \r\n    {\r\n        auto t0 = std::chrono::high_resolution_clock::now();\r\n        rdata >> (*j);\r\n        auto t1 = std::chrono::high_resolution_clock::now();\r\n        std::cout << \"took \" << std::chrono::duration_cast<std::chrono::milliseconds>(t1-t0).count() <<\" ms.\" << std::endl;\r\n    }\r\n\r\n    {\r\n        auto t0 = std::chrono::high_resolution_clock::now();\r\n        j.reset();\r\n        auto t1 = std::chrono::high_resolution_clock::now();\r\n        std::cout << \"took \" << std::chrono::duration_cast<std::chrono::milliseconds>(t1-t0).count() <<\" ms.\" << std::endl;\r\n    }\r\n}\r\n```\n\n### Expected vs. actual results\n\ndestruction should have minimal runtime cost\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nclang 12, macOS\n\n### Library version\n\n3.10.5\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3583/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3578",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3578/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3578/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3578/events",
    "html_url": "https://github.com/nlohmann/json/issues/3578",
    "id": 1300746162,
    "node_id": "I_kwDOAKp23M5Nh8-y",
    "number": 3578,
    "title": "Unable to use gnu mpz types for NumberIntegerType",
    "user": {
      "login": "eric-wieser",
      "id": 425260,
      "node_id": "MDQ6VXNlcjQyNTI2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/425260?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eric-wieser",
      "html_url": "https://github.com/eric-wieser",
      "followers_url": "https://api.github.com/users/eric-wieser/followers",
      "following_url": "https://api.github.com/users/eric-wieser/following{/other_user}",
      "gists_url": "https://api.github.com/users/eric-wieser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eric-wieser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eric-wieser/subscriptions",
      "organizations_url": "https://api.github.com/users/eric-wieser/orgs",
      "repos_url": "https://api.github.com/users/eric-wieser/repos",
      "events_url": "https://api.github.com/users/eric-wieser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eric-wieser/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-07-11T13:53:24Z",
    "updated_at": "2022-09-02T18:26:23Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI was hoping it would be possible to set `NumberIntegerType` and `NumberUnsignedType` (putting aside #2573 for now) to an arbitrary precision integer type (\"big integers\"), such as on wrapper types around the gnu [multiple precision arithmetic library](https://gmplib.org/).\r\n\r\nUnfortunately, this is not permitted as `json_value` is a C-style tagged union that doesn't permit any of its types to have non-trivial destructors/move constructors etc; and `mpz` is stored on the heap. \r\n\r\nI understand this is quite a big ask, but I thought it was worth having an issue explicitly mentioning big integers since I wasn't able to find an existing one via search.\n\n### Reproduction steps\n\nAttempt to use some numeric heap type for the numeric type parameters. I'm afraid I don't have a trivial example to hand without external dependencies.\n\n### Expected vs. actual results\n\nIn an ideal world, I would expect everthing to just work. Instead, I get compiler errors about deleted operators on `json_value` due to it being a union of non trivial types.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n_No response_\n\n### Compiler and operating system\n\nN/A\n\n### Library version\n\nd4daaa897f48bf7bb2f96b46b84e49f32dd11daf\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3578/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3578/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3542",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3542/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3542/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3542/events",
    "html_url": "https://github.com/nlohmann/json/issues/3542",
    "id": 1274846387,
    "node_id": "I_kwDOAKp23M5L_Jyz",
    "number": 3542,
    "title": "The MSVC team recently test JSON project failed to run test on release configuration on windows_x64.",
    "user": {
      "login": "Vincent9802",
      "id": 69944497,
      "node_id": "MDQ6VXNlcjY5OTQ0NDk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/69944497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Vincent9802",
      "html_url": "https://github.com/Vincent9802",
      "followers_url": "https://api.github.com/users/Vincent9802/followers",
      "following_url": "https://api.github.com/users/Vincent9802/following{/other_user}",
      "gists_url": "https://api.github.com/users/Vincent9802/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Vincent9802/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Vincent9802/subscriptions",
      "organizations_url": "https://api.github.com/users/Vincent9802/orgs",
      "repos_url": "https://api.github.com/users/Vincent9802/repos",
      "events_url": "https://api.github.com/users/Vincent9802/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Vincent9802/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 296080787,
        "node_id": "MDU6TGFiZWwyOTYwODA3ODc=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio",
        "name": "platform: visual studio",
        "color": "eb6420",
        "default": false,
        "description": "related to MSVC"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 16,
    "created_at": "2022-06-17T10:12:57Z",
    "updated_at": "2022-06-30T14:56:57Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nHi All,\r\n\r\nJSON failed to run test 'test-diagnostics_cpp11','test-json_pointer_cpp11' and 'test-unicode1_cpp11'on release configuration with MSVC on windows x64. Could you please help look at this issue or provide some workarounds? Thanks in advance.\n\n### Reproduction steps\n\n1. git clone https://github.com/nlohmann/json.git F:\\gitP\\nlohmann\r\n2. set VSCMD_SKIP_SENDTELEMETRY=1 & \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\Tools\\VsDevCmd.bat\" -host_arch=amd64 -arch=amd64 & set _CL_= /fsanitize=address /GS- /wd5072 & set _LINK_= /InferASanLibs /incremental:no /debug\r\n3. mkdir&cd F:\\gitP\\nlohmann\\json\\build_amd64\r\n4. cmake -G \"Visual Studio 16 2019\" -A x64 -DCMAKE_SYSTEM_VERSION=10.0.18362.0 -DJSON_BuildTests=On .. 2>&1\r\n5. msbuild /m /p:Platform=x64 /p:Configuration=Release nlohmann_json.sln /t:Rebuild 2>&1\r\n6. ctest -C Release --output-on-failure 2>&1\n\n### Expected vs. actual results\n\nExpected test pass\r\nActual results :\r\nThe following tests FAILED:\r\n\t  8 - test-bson_cpp11 (Failed)\r\n\t 25 - test-diagnostics_cpp11 (Failed)\r\n\t 38 - test-json_pointer_cpp11 (Failed)\r\n\t 61 - test-unicode1_cpp11 (Failed)\r\nErrors while running CTest\n\n### Minimal code example\n\n```Shell\n1.C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:\"F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe\" /INCREMENTAL:NO /NOLOGO /LIBPATH:\"F:\\gitP\\bitcoin\\tools\\vcpkg\\scripts\\buildsystems\\msbuild\\..\\..\\..\\installed\\x64-windows\\lib\" /LIBPATH:\"F:\\gitP\\bitcoin\\tools\\vcpkg\\scripts\\buildsystems\\msbuild\\..\\..\\..\\installed\\x64-windows\\lib\\manual-link\" /NATVIS:F:\\gitP\\nlohmann\\json\\nlohmann_json.natvis kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib \"F:\\gitP\\bitcoin\\tools\\vcpkg\\scripts\\buildsystems\\msbuild\\..\\..\\..\\installed\\x64-windows\\lib\\*.lib\" /MANIFEST /MANIFESTUAC:\"level='asInvoker' uiAccess='false'\" /manifest:embed /PDB:\"F:/gitP/nlohmann/json/build_amd64/tests/Release/test-diagnostics_cpp11.pdb\" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:\"F:/gitP/nlohmann/json/build_amd64/tests/Release/test-diagnostics_cpp11.lib\" /MACHINE:X64  /machine:x64 \"test-diagnostics_cpp11.dir\\Release\\unit-diagnostics.obj\" F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\test_main.dir\\Release\\unit.obj\r\n\r\n2.test-diagnostics_cpp11.exe\n```\n\n\n### Error messages\n\n```Shell\n==86508==ERROR: AddressSanitizer: container-overflow on address 0x00e159afb444 at pc 0x7ffc23ec68fc bp 0x00e159afadb0 sp 0x00e159afa530\r\nWRITE of size 2 at 0x00e159afb444 thread T0\r\n    #0 0x7ffc23ec6929  (C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64\\clang_rt.asan_dynamic-x86_64.dll+0x180046929)\r\n    #1 0x7ff6ed53b9dc in std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::replace(unsigned __int64, unsigned __int64, char const *const, unsigned __int64) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x1400bb9dc)\r\n    #2 0x7ff6ed53ad42 in std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::replace(unsigned __int64, unsigned __int64, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x1400bad42)\r\n    #3 0x7ff6ed4ebefd in nlohmann::detail::replace_substring<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x14006befd)\r\n    #4 0x7ff6ed4d7077 in nlohmann::detail::escape<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x140057077)\r\n    #5 0x7ff6ed4bc83a in std::accumulate<class std::reverse_iterator<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class <lambda_0b07af80a1b5e289a8e1fd0031570a68>>(class std::reverse_iterator<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, class std::reverse_iterator<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class <lambda_0b07af80a1b5e289a8e1fd0031570a68>) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x14003c83a)\r\n    #6 0x7ff6ed4d40af in nlohmann::detail::exception::diagnostics<class nlohmann::basic_json<class std::map, class std::vector, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, __int64, unsigned __int64, double, class std::allocator, struct nlohmann::adl_serializer, class std::vector<unsigned char, class std::allocator<unsigned char>>>>(class nlohmann::basic_json<class std::map, class std::vector, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, __int64, unsigned __int64, double, class std::allocator, struct nlohmann::adl_serializer, class std::vector<unsigned char, class std::allocator<unsigned char>>> const *) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x1400540af)\r\n    #7 0x7ff6ed4ca21a in nlohmann::detail::type_error::create<class nlohmann::basic_json<class std::map, class std::vector, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, __int64, unsigned __int64, double, class std::allocator, struct nlohmann::adl_serializer, class std::vector<unsigned char, class std::allocator<unsigned char>>> const *, 0>(int, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, class nlohmann::basic_json<class std::map, class std::vector, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, __int64, unsigned __int64, double, class std::allocator, struct nlohmann::adl_serializer, class std::vector<unsigned char, class std::allocator<unsigned char>>> const *) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x14004a21a)\r\n    #8 0x7ff6ed4d7642 in nlohmann::detail::from_json<class nlohmann::basic_json<class std::map, class std::vector, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, __int64, unsigned __int64, double, class std::allocator, struct nlohmann::adl_serializer, class std::vector<unsigned char, class std::allocator<unsigned char>>>>(class nlohmann::basic_json<class std::map, class std::vector, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, __int64, unsigned __int64, double, class std::allocator, struct nlohmann::adl_serializer, class std::vector<unsigned char, class std::allocator<unsigned char>>> const &, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> &) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x140057642)\r\n    #9 0x7ff6ed4d8aa1 in nlohmann::basic_json<class std::map, class std::vector, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, bool, __int64, unsigned __int64, double, class std::allocator, struct nlohmann::adl_serializer, class std::vector<unsigned char, class std::allocator<unsigned char>>>::get_impl<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, 0>(struct nlohmann::detail::priority_tag<0>) const (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x140058aa1)\r\n    #10 0x7ff6ed485740  (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x140005740)\r\n    #11 0x7ff6ed55dc93 in doctest::Context::run(void) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x1400ddc93)\r\n    #12 0x7ff6ed58b627 in main (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x14010b627)\r\n    #13 0x7ff6ed5dd20f in __scrt_common_main_seh D:\\a01\\_work\\2\\s\\src\\vctools\\crt\\vcstartup\\src\\startup\\exe_common.inl:288\r\n    #14 0x7ffc55c57973  (C:\\Windows\\System32\\KERNEL32.DLL+0x180017973)\r\n    #15 0x7ffc58a0a2f0  (C:\\Windows\\SYSTEM32\\ntdll.dll+0x18005a2f0)\r\n\r\nAddress 0x00e159afb444 is located in stack of thread T0 at offset 164 in frame\r\n    #0 0x7ff6ed4bbfaf in std::accumulate<class std::reverse_iterator<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class <lambda_0b07af80a1b5e289a8e1fd0031570a68>>(class std::reverse_iterator<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, class std::reverse_iterator<class std::_Vector_iterator<class std::_Vector_val<struct std::_Simple_types<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>>>, class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>, class <lambda_0b07af80a1b5e289a8e1fd0031570a68>) (F:\\gitP\\nlohmann\\json\\build_amd64\\tests\\Release\\test-diagnostics_cpp11.exe+0x14003bfaf)\r\n\r\n  This frame has 8 object(s):\r\n    [32, 40) '_UFirst'\r\n    [48, 56) '_ULast'\r\n    [64, 96) 'compiler temporary'\r\n    [80, 88) '_Right'\r\n    [96, 104) '_Right'\r\n    [112, 144) 'compiler temporary'\r\n    [128, 160) 'compiler temporary'\r\n    [144, 145) 'compiler temporary' <== Memory access at offset 164 overflows this variable\r\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork\r\n      (longjmp, SEH and C++ exceptions *are* supported)\r\nHINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.\r\nIf you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.\r\nSUMMARY: AddressSanitizer: container-overflow (C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64\\clang_rt.asan_dynamic-x86_64.dll+0x180046929) \r\nShadow bytes around the buggy address:\r\n  0x02f027bdf630: 00 00 f1 f1 f1 f1 f8 f8 f8 f8 f2 f2 f2 f2 f8 f8\r\n  0x02f027bdf640: f8 f8 f2 f2 f2 f2 03 fc 00 00 f2 f2 f2 f2 02 fc\r\n  0x02f027bdf650: 00 00 f3 f3 f3 f3 00 00 00 00 00 00 00 00 00 00\r\n  0x02f027bdf660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x02f027bdf670: 00 00 00 00 f1 f1 f1 f1 00 f2 00 f2 00 00 00 00\r\n=>0x02f027bdf680: f2 f2 f2 f2 00 f2 00 f2[04]fc 00 00 f2 f2 f2 f2\r\n  0x02f027bdf690: 00 00 00 00 f2 f2 f2 f2 01 f3 f3 f3 f3 00 00 00\r\n  0x02f027bdf6a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x02f027bdf6b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x02f027bdf6c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n  0x02f027bdf6d0: 00 00 00 00 00 00 00 00 00 00 f1 f1 f1 f1 00 00\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n  Shadow gap:              cc\r\n==86508==ABORTING\n```\n\n\n### Compiler and operating system\n\nVisual Studio 2019, Window10\n\n### Library version\n\ngit commit : af34396\n\n### Validation\n\n- [X] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [X] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3542/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3542/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3474",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3474/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3474/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3474/events",
    "html_url": "https://github.com/nlohmann/json/issues/3474",
    "id": 1228658654,
    "node_id": "I_kwDOAKp23M5JO9fe",
    "number": 3474,
    "title": "BAD_ALLOC exception after using parse with float value",
    "user": {
      "login": "clauderobi",
      "id": 5255742,
      "node_id": "MDQ6VXNlcjUyNTU3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5255742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/clauderobi",
      "html_url": "https://github.com/clauderobi",
      "followers_url": "https://api.github.com/users/clauderobi/followers",
      "following_url": "https://api.github.com/users/clauderobi/following{/other_user}",
      "gists_url": "https://api.github.com/users/clauderobi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/clauderobi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/clauderobi/subscriptions",
      "organizations_url": "https://api.github.com/users/clauderobi/orgs",
      "repos_url": "https://api.github.com/users/clauderobi/repos",
      "events_url": "https://api.github.com/users/clauderobi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/clauderobi/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 729086061,
        "node_id": "MDU6TGFiZWw3MjkwODYwNjE=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20arm",
        "name": "platform: arm",
        "color": "eb6420",
        "default": false,
        "description": "related to ARM architecture"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2022-05-07T15:46:55Z",
    "updated_at": "2022-07-22T17:06:15Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nOn a ARM board (raspberry Pi 0), parsing a json string that includes a float value causes a memory corruption. Any code after the parse that uses the heap will throw a bad_alloc exception. Running the program on x86 runs fine.\n\n### Reproduction steps\n\nSimply parse a string that contains a float value and then emplace data in a unordered_map container. \n\n### Expected vs. actual results\n\nThe emplace method call should success. But instead it throws a bad_alloc exception.\n\n### Minimal code example\n\n```Shell\n#include <iostream>\r\n#include <string>\r\n#include <unordered_map>\r\n#include <nlohmann/json.hpp>\r\n\r\n#define TT \"{\\\"buildtime_bin\\\":1651934971.9987135}\"\r\n\r\nint main(int argc, char** argv) {\r\n  std::string                                          manifestData = TT;\r\n  nlohmann::json                                       manifest = nlohmann::json::parse(manifestData);\r\n  std::cout << manifest.dump() << std::endl;\r\n\r\n  std::unordered_map<std::string, std::string>         testMap;\r\n\r\n  try {\r\n    testMap.emplace(std::make_pair(\"b\", \"abcd\"));\r\n    std::cout << \"Good\" << std::endl;\r\n  }\r\n  catch(std::exception& exc) {\r\n    std::cout << exc.what() << std::endl;\r\n  }\r\n\r\n}\n```\n\n\n### Error messages\n\n```Shell\nstd::bad_alloc is output by my exception handler\n```\n\n\n### Compiler and operating system\n\nCompiler is armv6-rpi-linux-gnueabi-gcc (crosstool-NG 1.24.0) 8.3.0 and OS is Raspbian GNU/Linux 11 (bullseye)\n\n### Library version\n\n3.10.5\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3474/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3453",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3453/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3453/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3453/events",
    "html_url": "https://github.com/nlohmann/json/issues/3453",
    "id": 1213640522,
    "node_id": "I_kwDOAKp23M5IVq9K",
    "number": 3453,
    "title": "Define roadmap for 4.0.0",
    "user": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 395133926,
        "node_id": "MDU6TGFiZWwzOTUxMzM5MjY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/documentation",
        "name": "documentation",
        "color": "0e8a16",
        "default": true,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2022-04-24T12:26:21Z",
    "updated_at": "2022-12-12T14:28:23Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "As discussed in https://github.com/nlohmann/json/pull/3444#discussion_r857072525, we currently have no single place to collect all things deemed to wait until the next breaking change.\r\n\r\nThe goal for this issue is to have a document in the repository to sketch what will come with 4.0.0.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3453/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3453/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3425",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3425/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3425/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3425/events",
    "html_url": "https://github.com/nlohmann/json/issues/3425",
    "id": 1194232827,
    "node_id": "I_kwDOAKp23M5HLov7",
    "number": 3425,
    "title": "Conversion from alt_json to json produces incorrect result",
    "user": {
      "login": "falbrechtskirchinger",
      "id": 320854,
      "node_id": "MDQ6VXNlcjMyMDg1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/320854?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/falbrechtskirchinger",
      "html_url": "https://github.com/falbrechtskirchinger",
      "followers_url": "https://api.github.com/users/falbrechtskirchinger/followers",
      "following_url": "https://api.github.com/users/falbrechtskirchinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/falbrechtskirchinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/falbrechtskirchinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/falbrechtskirchinger/subscriptions",
      "organizations_url": "https://api.github.com/users/falbrechtskirchinger/orgs",
      "repos_url": "https://api.github.com/users/falbrechtskirchinger/repos",
      "events_url": "https://api.github.com/users/falbrechtskirchinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/falbrechtskirchinger/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-04-06T08:08:14Z",
    "updated_at": "2022-04-15T06:04:32Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "body": "A proposed unit test for `unit-alt-string.cpp` contained the following code:\r\n```\r\n        alt_json j = R\"(\r\n        {\r\n            \"foo\": [\"bar\", \"baz\"]\r\n        }\r\n        )\"_json;\r\n```\r\n\r\nThis conversion compiles but fails to produce the expected result. Instead, the resulting object is in fact the following array:\r\n```\r\n[[[102,111,111],[[98,97,114],[98,97,122]]]]\r\n```\r\n\r\nThe test can be further reduced to this:\r\n```\r\nalt_json j = json::object();\r\n```\r\n\r\nResulting in:\r\n```\r\n[]\r\n```\r\n\r\nThe cause is the incorrect selection of this `to_json()` function for `CompatibleArrayType = std::map<...>`.\r\n```cpp\r\ntemplate < typename BasicJsonType, typename CompatibleArrayType,\r\n           enable_if_t < is_compatible_array_type<BasicJsonType,\r\n                         CompatibleArrayType>::value&&\r\n                         !is_compatible_object_type<BasicJsonType, CompatibleArrayType>::value&&\r\n                         !is_compatible_string_type<BasicJsonType, CompatibleArrayType>::value&&\r\n                         !std::is_same<typename BasicJsonType::binary_t, CompatibleArrayType>::value&&\r\n                         !is_basic_json<CompatibleArrayType>::value,\r\n                         int > = 0 >\r\nvoid to_json(BasicJsonType& j, const CompatibleArrayType& arr)\r\n{\r\n    external_constructor<value_t::array>::construct(j, arr);\r\n}\r\n```\r\n\r\nI suspect an error in `is_constructible_object_type` and will investigate.\r\n\r\nThe requirements placed on `object_t`, `string_t`, etc. should be clearly documented. Maybe a trait like `is_sax` would help?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3425/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3424",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3424/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3424/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3424/events",
    "html_url": "https://github.com/nlohmann/json/issues/3424",
    "id": 1194164205,
    "node_id": "I_kwDOAKp23M5HLX_t",
    "number": 3424,
    "title": "Support \"import\" statement in module interface files.",
    "user": {
      "login": "nicolasjinchereau",
      "id": 6433558,
      "node_id": "MDQ6VXNlcjY0MzM1NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6433558?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicolasjinchereau",
      "html_url": "https://github.com/nicolasjinchereau",
      "followers_url": "https://api.github.com/users/nicolasjinchereau/followers",
      "following_url": "https://api.github.com/users/nicolasjinchereau/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicolasjinchereau/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicolasjinchereau/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicolasjinchereau/subscriptions",
      "organizations_url": "https://api.github.com/users/nicolasjinchereau/orgs",
      "repos_url": "https://api.github.com/users/nicolasjinchereau/repos",
      "events_url": "https://api.github.com/users/nicolasjinchereau/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicolasjinchereau/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 296080787,
        "node_id": "MDU6TGFiZWwyOTYwODA3ODc=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/platform:%20visual%20studio",
        "name": "platform: visual studio",
        "color": "eb6420",
        "default": false,
        "description": "related to MSVC"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2022-04-06T07:18:20Z",
    "updated_at": "2023-03-13T11:15:49Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "### Description\n\nI'm using `MSVC 2022` with `/std:c++20`.\r\n\r\nI'm trying to import `single_include` version `3.10.5` into my module interface file (`*.ixx`).\r\n```\r\nimport <json.hpp>;\r\n```\r\n\r\nHowever, I am receiving an error.\r\n`json.hpp(18037,17): error C2976: 'nlohmann::adl_serializer': too few template arguments`\r\n\r\nIncluding the file in the global module fragment _does_ work:\r\n```\r\nmodule;\r\n#include <json.hpp>\r\nexport module MyModule;\r\n...\r\n```\r\n\r\nHowever, exporting only `nlohmann::json` with a `using` statement produces errors about dependent types, so I would like to export the whole import.\r\n```\r\nexport import <json.hpp>;\r\n```\n\n### Reproduction steps\n\nTry to import json.hpp into a module interface file.\r\n\n\n### Expected vs. actual results\n\nDoes not compile.\n\n### Minimal code example\n\n_No response_\n\n### Error messages\n\n```Shell\n`json.hpp(18037,17): error C2976: 'nlohmann::adl_serializer': too few template arguments`\n```\n\n\n### Compiler and operating system\n\nMSVC 2022\n\n### Library version\n\n3.10.5\n\n### Validation\n\n- [ ] The bug also occurs if the latest version from the [`develop`](https://github.com/nlohmann/json/tree/develop) branch is used.\n- [ ] I can successfully [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests).",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3424/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3381",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3381/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3381/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3381/events",
    "html_url": "https://github.com/nlohmann/json/issues/3381",
    "id": 1162466681,
    "node_id": "I_kwDOAKp23M5FSdV5",
    "number": 3381,
    "title": "msgpack parser failed to parse null as Map key",
    "user": {
      "login": "kotori2",
      "id": 17663689,
      "node_id": "MDQ6VXNlcjE3NjYzNjg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/17663689?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kotori2",
      "html_url": "https://github.com/kotori2",
      "followers_url": "https://api.github.com/users/kotori2/followers",
      "following_url": "https://api.github.com/users/kotori2/following{/other_user}",
      "gists_url": "https://api.github.com/users/kotori2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kotori2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kotori2/subscriptions",
      "organizations_url": "https://api.github.com/users/kotori2/orgs",
      "repos_url": "https://api.github.com/users/kotori2/repos",
      "events_url": "https://api.github.com/users/kotori2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kotori2/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 304694104,
        "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss",
        "name": "state: please discuss",
        "color": "fbca04",
        "default": false,
        "description": "please discuss the issue or vote for your favorite option"
      },
      {
        "id": 571470316,
        "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats",
        "name": "aspect: binary formats",
        "color": "5319e7",
        "default": false,
        "description": "BSON, CBOR, MessagePack, UBJSON"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2022-03-08T10:12:45Z",
    "updated_at": "2022-04-12T19:12:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Provide a concise summary of the issue in the title above. -->\r\n\r\n#### What is the issue you have?\r\n\r\nI'm trying to parse msgpack data like: \r\n```\r\n{\r\n    null: 1\r\n}\r\n```\r\nwhich serializes as `81 C0 01`. But `nlohmann::json::from_msgpack` failed to parse it with\r\n```\r\n[json.exception.parse_error.113] parse error at byte 2: syntax error while parsing MessagePack string: expected length specification (0xA0-0xBF, 0xD9-0xDB); last byte: 0xC0\r\n```\r\n\r\n#### Please describe the steps to reproduce the issue.\r\n\r\n↓\r\n\r\n#### Can you provide a small but working code example?\r\n\r\n```\r\n#include <nlohmann/json.hpp>\r\nint main() {\r\n    const uint8_t src[] = {0x81, 0xC0, 0x01};\r\n    nlohmann::json j = nlohmann::json::from_msgpack(src);\r\n}\r\n```\r\n\r\n#### What is the expected behavior?\r\n\r\nFrom the [msgpack specs](https://github.com/msgpack/msgpack/blob/master/spec.md) it doesn't restricts which value could be used on Map keys\r\n\r\n#### And what is the actual behavior instead?\r\n\r\nThe specs above says\r\n> applications may remove Binary type, restrict keys of map objects to be String type, and put some restrictions to make the semantics compatible with JSON\r\n\r\nSo maybe it could be serialized to \r\n```\r\n{\r\n    \"null\": 1\r\n}\r\n```\r\nlike [other implementation](https://gchq.github.io/CyberChef/#recipe=From_Hex('Auto')From_MessagePack()&input=ODEgQzAgMDE) does \r\n\r\n#### Which compiler and operating system are you using?\r\n\r\n<!-- Include as many relevant details about the environment you experienced the bug in. -->\r\n<!-- Make sure you use a supported compiler, see https://github.com/nlohmann/json#supported-compilers. -->\r\n\r\n- Compiler: MSVC 19.30.30705\r\n- Operating system: Windows 11 22000.527\r\nAlso reproduced on gcc11\r\n\r\n#### Which version of the library did you use?\r\n\r\n<!-- Please add an `x` to the respective line. -->\r\n\r\n- [ ] latest release version 3.10.5\r\n- [x] other release - please state the version: 3.10.4\r\n- [ ] the `develop` branch\r\n\r\n#### If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n- [ ] yes\r\n- [ ] no - please copy/paste the error message below\r\n- [x] N/A \r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3381/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3146",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3146/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3146/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3146/events",
    "html_url": "https://github.com/nlohmann/json/issues/3146",
    "id": 1056190425,
    "node_id": "I_kwDOAKp23M4-9C_Z",
    "number": 3146,
    "title": "Bad JSON diff when removing object in array of object",
    "user": {
      "login": "LouisNoailles",
      "id": 24441351,
      "node_id": "MDQ6VXNlcjI0NDQxMzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/24441351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LouisNoailles",
      "html_url": "https://github.com/LouisNoailles",
      "followers_url": "https://api.github.com/users/LouisNoailles/followers",
      "following_url": "https://api.github.com/users/LouisNoailles/following{/other_user}",
      "gists_url": "https://api.github.com/users/LouisNoailles/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LouisNoailles/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LouisNoailles/subscriptions",
      "organizations_url": "https://api.github.com/users/LouisNoailles/orgs",
      "repos_url": "https://api.github.com/users/LouisNoailles/repos",
      "events_url": "https://api.github.com/users/LouisNoailles/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LouisNoailles/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 304694104,
        "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss",
        "name": "state: please discuss",
        "color": "fbca04",
        "default": false,
        "description": "please discuss the issue or vote for your favorite option"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2021-11-17T14:22:02Z",
    "updated_at": "2022-05-27T15:26:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Provide a concise summary of the issue in the title above. -->\r\n\r\n#### What is the issue you have?\r\n\r\n<!-- Provide a detailed introduction to the issue itself, and why you consider it to be a bug. -->\r\nIn [this test](https://github.com/nlohmann/json/blob/develop/test/src/unit-json_patch.cpp#L181) A simple remove is expected as a diff. But the following exemple is not following the expected behavior:\r\nOld JSON:\r\n```json\r\n{\r\n    \"a\": [\"aa\", \"ab\"]\r\n}\r\n```\r\n\r\nNew JSON:\r\n```json\r\n{\r\n    \"a\": [\"ab\"]\r\n}\r\n```\r\nThe JSON Patch:\r\n```json\r\n[\r\n    {\r\n        \"op\": \"remove\",\r\n        \"path\": \"/a/1\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/a/0\",\r\n        \"value\": \"ab\"\r\n    }\r\n]\r\n```\r\n\r\n\r\n<!-- If possible, be specific and add stack traces, error messages, etc. Avoid vague terms like \"crash\" or \"doesn't work\". -->\r\n\r\n#### Please describe the steps to reproduce the issue.\r\n\r\n<!-- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!-- reproduce this bug. Include code to reproduce, if relevant -->\r\n\r\n1. Create a JSON array containing multiple objects\r\n2. Remove an object but not the last one\r\n\r\n<!-- #### Can you provide a small but working code example? -->\r\n\r\n<!-- Please understand that we cannot analyze and debug large code bases. -->\r\n\r\n#### What is the expected behavior?\r\n\r\n<!-- Tell us what should happen -->\r\nThe patch should be as following:\r\n```json\r\n[\r\n    {\r\n        \"op\": \"remove\",\r\n        \"path\": \"/a/0\"\r\n    }\r\n]\r\n```\r\n\r\n#### And what is the actual behavior instead?\r\n\r\n<!-- Tell us what happens instead. -->\r\nThe JSON Patch is currently as follow:\r\n```json\r\n[\r\n    {\r\n        \"op\": \"remove\",\r\n        \"path\": \"/a/1\"\r\n    },\r\n    {\r\n        \"op\": \"replace\",\r\n        \"path\": \"/a/0\",\r\n        \"value\": \"ab\"\r\n    }\r\n]\r\n```\r\n\r\n#### Which version of the library did you use?\r\n\r\n<!-- Please add an `x` to the respective line. -->\r\nVersion: 3.9.1\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3146/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3112",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3112/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3112/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3112/events",
    "html_url": "https://github.com/nlohmann/json/issues/3112",
    "id": 1040403668,
    "node_id": "I_kwDOAKp23M4-A0zU",
    "number": 3112,
    "title": "Help needed",
    "user": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      },
      {
        "id": 968316937,
        "node_id": "MDU6TGFiZWw5NjgzMTY5Mzc=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/good%20first%20issue",
        "name": "good first issue",
        "color": "d4c5f9",
        "default": true,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-10-31T08:03:35Z",
    "updated_at": "2023-12-26T12:12:44Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "When you want to help with the development of this library, there are plenty of things were you are more than welcome:\r\n\r\n## Blocked Issues\r\n\r\n- In #3106, the missing possibility to switch on `JSON_DIAGNOSTICS` via CMake when installing the library via Homebrew. If you are familiar with Homebrew, you could fix [the formula](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/nlohmann-json.rb) accordingly.\r\n\r\n- In #2907, an issue in the pkgconfig integration is reported. Apparently, executing tests change the install prefix.\r\n\r\nSee [here](https://github.com/nlohmann/json/labels/state%3A%20help%20needed) for a list of all issues and pull requests that need help.\r\n\r\n## Reviews\r\n\r\nSee [here](https://github.com/nlohmann/json/pulls?q=is%3Apr+is%3Aopen+label%3A%22review+needed%22) for a list of all pull requests that need to be reviewed.\r\n\r\n## Evergreens\r\n\r\n- The documentation can always be improved - be it with more examples or just by fixing typos.\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3112/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3112/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3106",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3106/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3106/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3106/events",
    "html_url": "https://github.com/nlohmann/json/issues/3106",
    "id": 1036418256,
    "node_id": "I_kwDOAKp23M49xnzQ",
    "number": 3106,
    "title": "Use of JSON_DIAGNOSTICS through CMake and find_package()",
    "user": {
      "login": "psalvaggio",
      "id": 13050294,
      "node_id": "MDQ6VXNlcjEzMDUwMjk0",
      "avatar_url": "https://avatars.githubusercontent.com/u/13050294?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/psalvaggio",
      "html_url": "https://github.com/psalvaggio",
      "followers_url": "https://api.github.com/users/psalvaggio/followers",
      "following_url": "https://api.github.com/users/psalvaggio/following{/other_user}",
      "gists_url": "https://api.github.com/users/psalvaggio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/psalvaggio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/psalvaggio/subscriptions",
      "organizations_url": "https://api.github.com/users/psalvaggio/orgs",
      "repos_url": "https://api.github.com/users/psalvaggio/repos",
      "events_url": "https://api.github.com/users/psalvaggio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/psalvaggio/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 9,
    "created_at": "2021-10-26T15:05:21Z",
    "updated_at": "2023-11-03T09:15:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "I would like to use the  JSON_DIAGNOSTICS feature to produce better error messages. I am using the library through Homebrew and in the Targets.cmake file, there is the following:\r\n```\r\nINTERFACE_COMPILE_DEFINITIONS \"JSON_USE_IMPLICIT_CONVERSIONS=\\$<BOOL:ON>;JSON_DIAGNOSTICS=\\$<BOOL:OFF>\"\r\n``` \r\nso this is hard-coded to be off. I can fix this by undoing in in my code, but it would be nice if we could have control over these parameters via some CMake variables, similar to how you can pass hints to some other CMake packages.\r\n\r\nI am using Version 3.10.4 installed through Homebrew.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3106/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3089",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3089/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3089/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3089/events",
    "html_url": "https://github.com/nlohmann/json/issues/3089",
    "id": 1028323791,
    "node_id": "I_kwDOAKp23M49SvnP",
    "number": 3089,
    "title": "Limit AppVeyor use",
    "user": {
      "login": "nlohmann",
      "id": 159488,
      "node_id": "MDQ6VXNlcjE1OTQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/159488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nlohmann",
      "html_url": "https://github.com/nlohmann",
      "followers_url": "https://api.github.com/users/nlohmann/followers",
      "following_url": "https://api.github.com/users/nlohmann/following{/other_user}",
      "gists_url": "https://api.github.com/users/nlohmann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nlohmann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nlohmann/subscriptions",
      "organizations_url": "https://api.github.com/users/nlohmann/orgs",
      "repos_url": "https://api.github.com/users/nlohmann/repos",
      "events_url": "https://api.github.com/users/nlohmann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nlohmann/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-10-17T13:24:07Z",
    "updated_at": "2022-03-07T21:07:00Z",
    "closed_at": null,
    "author_association": "OWNER",
    "active_lock_reason": null,
    "body": "Check if all jobs in AppVeyor are needed. AppVeyor is much slower as GitHub Actions.\r\n\r\n- [ ] Remove jobs that can also be executed in GitHub Actions.\r\n- [ ] Adjust README file.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3089/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/3056",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/3056/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/3056/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/3056/events",
    "html_url": "https://github.com/nlohmann/json/issues/3056",
    "id": 1018346923,
    "node_id": "I_kwDOAKp23M48sr2r",
    "number": 3056,
    "title": "Not parsing valid CBOR correctly",
    "user": {
      "login": "BrunoFiligree",
      "id": 32366481,
      "node_id": "MDQ6VXNlcjMyMzY2NDgx",
      "avatar_url": "https://avatars.githubusercontent.com/u/32366481?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BrunoFiligree",
      "html_url": "https://github.com/BrunoFiligree",
      "followers_url": "https://api.github.com/users/BrunoFiligree/followers",
      "following_url": "https://api.github.com/users/BrunoFiligree/following{/other_user}",
      "gists_url": "https://api.github.com/users/BrunoFiligree/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BrunoFiligree/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BrunoFiligree/subscriptions",
      "organizations_url": "https://api.github.com/users/BrunoFiligree/orgs",
      "repos_url": "https://api.github.com/users/BrunoFiligree/repos",
      "events_url": "https://api.github.com/users/BrunoFiligree/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BrunoFiligree/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 571470316,
        "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats",
        "name": "aspect: binary formats",
        "color": "5319e7",
        "default": false,
        "description": "BSON, CBOR, MessagePack, UBJSON"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2021-10-06T13:38:29Z",
    "updated_at": "2022-07-30T19:40:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Passing legal CBOR to json::from_cbor() causes an exception to be raised.\r\n\r\n#### What is the issue you have?\r\n\r\nI've encoded data into cbor using the tinycbor library and tried to load it into a nlohmann::json using the cbor parser, this fails to parse and raises an exception. That same data is readily loadable with,\r\n\r\n```python -m cbor2.tool data.cbor ```\r\n\r\nand is valid according to the website http://cbor.me/\r\n\r\nThe exception raised was...\r\n```\r\nnlohmann::detail::parse_error: [json.exception.parse_error.113] parse error at byte 2: syntax error while parsing CBOR string: expected length specification (0x60-0x7B) or indefinite string type (0x7F); last byte: 0x41\r\n```\r\n\r\n#### Please describe the steps to reproduce the issue.\r\nPass valid data to json::from_cbor\r\n\r\nThe hex in question that you can cut and paste into cbor playground is...\r\n```\r\nbf 41 41 0a 41 42 14 41 43 bf 41 69 18 21 41 64\r\nfb 40 67 70 00 00 00 00 00 ff 41 45 bf 46 6d 6f\r\n6e 6b 65 79 48 22 77 69 62 62 6c 65 22 44 6e 75\r\n74 73 f4 ff 41 46 bf 41 78 f5 41 79 20 ff 41 47\r\nbf 41 69 f5 41 6a f4 ff 41 58 86 00 01 02 03 83\r\n41 58 41 59 41 5a 82 41 41 41 42 ff\r\n```\r\n\r\n#### Can you provide a small but working code example?\r\nThis program fails...\r\n```cpp\r\n#include <string>\r\n#include <nlohmann/json.hpp>\r\nusing json = nlohmann::json;\r\n\r\nstd::vector<uint8_t> cborData({0xbf, 0x41, 0x41, 0x0a, 0x41, 0x42, 0x14, 0x41, 0x43, 0xbf, 0x41, 0x69, 0x18, 0x21, 0x41, 0x64,\r\n    0xfb, 0x40, 0x67, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x41, 0x45, 0xbf, 0x46, 0x6d, 0x6f,\r\n    0x6e, 0x6b, 0x65, 0x79, 0x48, 0x22, 0x77, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x22, 0x44, 0x6e, 0x75,\r\n    0x74, 0x73, 0xf4, 0xff, 0x41, 0x46, 0xbf, 0x41, 0x78, 0xf5, 0x41, 0x79, 0x20, 0xff, 0x41, 0x47,\r\n    0xbf, 0x41, 0x69, 0xf5, 0x41, 0x6a, 0xf4, 0xff, 0x41, 0x58, 0x86, 0x00, 0x01, 0x02, 0x03, 0x83,\r\n    0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x82, 0x41, 0x41, 0x41, 0x42, 0xff});\r\n\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n  auto jsonDom = json::from_cbor(cborData);\r\n}\r\n```\r\n\r\n#### What is the expected behavior?\r\nIt should accept the given cbor and should generate the following JSON structure...\r\n```json\r\n{\r\n  \"A\": 10,\r\n  \"B\": 20,\r\n  \"C\": {\r\n    \"i\": 33,\r\n    \"d\": 187.5\r\n  },\r\n  \"E\": {\r\n    \"monkey\": \"\\\"wibble\\\"\",\r\n    \"nuts\": false\r\n  },\r\n  \"F\": {\r\n    \"x\": true,\r\n    \"y\": -1\r\n  },\r\n  \"G\": {\r\n    \"i\": true,\r\n    \"j\": false\r\n  },\r\n  \"X\": [\r\n    0,\r\n    1,\r\n    2,\r\n    3,\r\n    [\r\n      \"X\",\r\n      \"Y\",\r\n      \"Z\"\r\n    ],\r\n    [\r\n      \"A\",\r\n      \"B\"\r\n    ]\r\n  ]\r\n}\r\n```\r\n\r\n#### And what is the actual behavior instead?\r\nIt is failing to parse on the second byte. The first byte specifies a map of indefinite size, which means the following bytes in the cbor stream should be the contained key/value pairs. However the parser is expecting to see an integer size, even though the standard says this is not needed.\r\n\r\nI refer you to section 3.2.2 of the cbor standard and the last example...\r\n\r\nhttps://www.rfc-editor.org/rfc/rfc8949.html\r\n\r\n#### Which compiler and operating system are you using?\r\n- Compiler: ___\r\nApple clang version 11.0.3 (clang-1103.0.32.62)\r\nTarget: x86_64-apple-darwin20.6.0\r\nThread model: posix\r\nInstalledDir: /Applications/Xcode_11.6.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\r\n\r\n- Operating system: ___\r\nMacOS 11.6,\r\n\r\n#### Which version of the library did you use?\r\n\r\n<!-- Please add an `x` to the respective line. -->\r\n\r\n- [X] latest release version 3.10.2\r\n- [ ] other release - please state the version: ___\r\n- [ ] the `develop` branch\r\n\r\n#### If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n- [ ] yes\r\n- [ x] no - please copy/paste the error message below\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/3056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/3056/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/2794",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/2794/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/2794/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/2794/events",
    "html_url": "https://github.com/nlohmann/json/issues/2794",
    "id": 908189823,
    "node_id": "MDU6SXNzdWU5MDgxODk4MjM=",
    "number": 2794,
    "title": "Compile error for json in template and  variadic macros.",
    "user": {
      "login": "akeyliu",
      "id": 5533073,
      "node_id": "MDQ6VXNlcjU1MzMwNzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5533073?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/akeyliu",
      "html_url": "https://github.com/akeyliu",
      "followers_url": "https://api.github.com/users/akeyliu/followers",
      "following_url": "https://api.github.com/users/akeyliu/following{/other_user}",
      "gists_url": "https://api.github.com/users/akeyliu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/akeyliu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/akeyliu/subscriptions",
      "organizations_url": "https://api.github.com/users/akeyliu/orgs",
      "repos_url": "https://api.github.com/users/akeyliu/repos",
      "events_url": "https://api.github.com/users/akeyliu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/akeyliu/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 730407699,
        "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale",
        "name": "state: stale",
        "color": "999999",
        "default": false,
        "description": "the issue has not been updated in a while and will be closed automatically soon unless it is updated"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2021-06-01T11:24:02Z",
    "updated_at": "2022-01-09T03:24:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Provide a concise summary of the issue in the title above. -->\r\nI'm now using Template and Variadic macros for converting user-defined class to json and output to ostream i.e. using in log and output current variables. And Boost log is integrated to record the variables into the log when running.\r\n\r\n1.  Variadic Macros is used to define to_json function for user-defined classes;\r\n```cpp\r\n#define MY_SERIALIZATION( class_name, ... )                                         \\\r\npublic:                                                                                                    \\\r\n    void to_json( nlohmann::json& j ) {                                                     \\\r\n        mySerialization( j,  __VA_ARGS__ );                                                  \\\r\n    };                                                                                                       \\\r\n    friend inline ostream& operator << ( ostream& os, class_name& obj ) {           \\\r\n        nlohmann::json j;                                                           \\\r\n        obj.to_json( j );                                                               \\\r\n        os << j;                                                                         \\\r\n        return( os );                                                                   \\\r\n    }\r\n#define CLASS_PROPERTY( class_name, type_name, variable_name )                      \\\r\n    protected:                                                                      \\\r\n        type_name m_##variable_name;                                                \\\r\n    public:                                                                         \\\r\n        inline class_name& Set_##variable_name( type_name other){                   \\\r\n            m_##variable_name = other; return(*this); };                            \\\r\n        inline type_name& Get_##variable_name(void) { return( m_##variable_name ); }\r\n```\r\n\r\n2.  Define iteration functions for variadic macros.\r\n```cpp\r\ntemplate< class First >\r\nvoid mySerialization( nlohmann::json& j, First first ) {\r\n    j.push_back( first );\r\n}\r\n\r\ntemplate< class First, class ...Rest >\r\nvoid mySerialization( nlohmann::json& j, First first, Rest ...rest ) {\r\n    j.push_back( first );\r\n    mySerialization( j, rest...  );\r\n}\r\n\r\ntemplate< class now >\r\nvoid to_json( nlohmann::json& j, now& obj ) {\r\n    obj.to_json( j );\r\n}\r\n```\r\n\r\n3.  Define user-defined class.\r\n```cpp\r\nclass CBase {\r\npublic:\r\n    CBase( int ii, long ll, float ff, double dd, string ss );\r\n\r\n    CLASS_PROPERTY( CBase, int, ii );\r\n    CLASS_PROPERTY( CBase, long, ll );\r\n    CLASS_PROPERTY( CBase, float, ff );\r\n    CLASS_PROPERTY( CBase, double, dd );\r\n    CLASS_PROPERTY( CBase, string, ss );\r\n    MY_SERIALIZATION( CBase, m_ii, m_ll, m_ff, m_dd, m_ss );\r\n};\r\n\r\nCBase::CBase( int ii=11, long ll=12, float ff=3.33, double dd=4.44, string ss=\"ss\")\r\n{\r\n    m_ii = ii;\r\n    m_ll = ll;\r\n    m_ff = ff;\r\n    m_dd = dd;\r\n    m_ss = ss;\r\n};\r\n\r\nclass CNew1 {\r\npublic:\r\n    CLASS_PROPERTY( CNew1, CBase, objBase );\r\n    MY_SERIALIZATION( CNew1, m_objBase );\r\n};\r\n```\r\n\r\n4.  Define source code to run the example.\r\n```cpp\r\nint main(void)\r\n{\r\n    INIT_LOG( \"log\", \"IVS\", 40, 200, debug );\r\n \r\n    int ii=10;\r\n    int& jj = ii;\r\n    DEBUG_LOG( \"LOG for Debug\", 11, 22, ii, jj );\r\n    INFO_LOG( \"LOG for Info\", 33, 44, ii, jj );\r\n    WARN_LOG( \"LOG for Warn\", 55, 66, ii, jj );\r\n    ERROR_LOG( \"LOG for Error\", 77, 88, ii, jj );\r\n    FATAL_LOG( \"LOG for Fatal\", 99, 100, ii, jj );\r\n\r\n    CBase objBase( 11, 22, 33.0, 44.0, \"aa\" );\r\n\r\n    ERROR_LOG( ii, jj, objBase );\r\n\r\n    CNew1 objNew1;\r\n    objNew1.Set_objBase( objBase );\r\n    ERROR_LOG( ii, jj, objNew1 );\r\n```\r\n5.  Compile Status：\r\n5.1  The source code is compiled and run OK when all source code related CNew1 is commented.\r\n   This means CBase class is OK for the source code.\r\n5.2  There is compile error when CNew1 class is active.\r\n```\r\nmylog.h: In instantiation of ‘void mySerialization(nlohmann::json&, First) [with First = CBase; nlohmann::json = nlohmann::basic_json<>]’:\r\nmylog.cpp:42:2:   required from here\r\nmylog.h:100:2: error: no matching function for call to ‘nlohmann::basic_json<>::push_back(CBase&)’\r\n  100 |  j.push_back( first );\r\n      |  ^\r\n```\r\n6. I try to change to other convert CBase to Json, i.e. nlohmann::json jTmp = first; but not work.\r\n\r\n#### What is the issue you have?\r\nThere is compile error when CNew1 is active, error info list upper.\r\n\r\n<!-- Provide a detailed introduction to the issue itself, and why you consider it to be a bug. -->\r\n<!-- If possible, be specific and add stack traces, error messages, etc. Avoid vague terms like \"crash\" or \"doesn't work\". -->\r\nThe CBase can convert to json  when CNew1 is commented, while not OK when CNew1 is active.\r\n\r\n#### Please describe the steps to reproduce the issue.\r\n\r\n<!-- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!-- reproduce this bug. Include code to reproduce, if relevant -->\r\n\r\n1. There are 3 file, mylog.hpp, mylog.cpp, aa.sh(compile the code);\r\n2. The environment is Ubuntu 20.04 LTS, with default gcc(9.3.0), libboost-dev(1.7.1 using for LOG), nlohmann::json(7.3.0)\r\n   all software can get by apt-get install build-essential, libboost-all-dev, nlohmann; \r\n3.  Source code of mylog.hpp\r\n\r\n```cpp\r\n#ifndef MY_LOG_H\r\n#define MY_LOG_H\r\n\r\n#include <boost/log/common.hpp>\r\n#include <boost/log/expressions.hpp>\r\n#include <boost/log/sinks.hpp>\r\n#include <boost/log/trivial.hpp>\r\n#include <boost/log/utility/setup.hpp>\r\n#include <boost/log/support/date_time.hpp>\r\n#include <nlohmann/json.hpp>\r\n#include <sstream>\r\n#include <iostream>\r\n\r\nextern boost::log::sources::severity_logger_mt< boost::log::trivial::severity_level > gLogger;\r\n\r\n#define INIT_LOG(fileDir, fileName, fileSize, maxFile, level)                           \\\r\n{                                                                                       \\\r\n    using namespace boost::log;                                                         \\\r\n    auto formatter = ( expressions::stream                                              \\\r\n                << \"[\" << expressions::format_date_time< boost::posix_time::ptime >     \\\r\n                        ( \"TimeStamp\", \"%Y%m%d%H%M%S\")                                  \\\r\n                << \"][\" << expressions::attr<aux::thread::id>( \"ThreadID\")              \\\r\n                << \"][\" << expressions::attr<unsigned int>( \"LineID\")                   \\\r\n                << \"][\" << trivial::severity                                            \\\r\n                << \"]\"  << expressions::smessage );                                     \\\r\n    add_common_attributes();                                                            \\\r\n    core::get()->add_sink( add_file_log(                                                \\\r\n        keywords::file_name         = fileName\"_%N.log\",                                \\\r\n        keywords::target            = fileDir,                                          \\\r\n        keywords::open_mode         = std::ios::app,                                    \\\r\n        keywords::rotation_size     = fileSize * 1024 * 1024,                           \\\r\n        keywords::max_files         = maxFile,                                          \\\r\n        keywords::auto_flush        = true,                                             \\\r\n        keywords::scan_method       = sinks::file::scan_matching,                       \\\r\n        keywords::format            = formatter                                         \\\r\n        ) );                                                                            \\\r\n    core::get()->add_sink( add_file_log(                                                \\\r\n        keywords::file_name         = fileName\"_%N.err\",                                \\\r\n        keywords::target            = fileDir,                                          \\\r\n        keywords::open_mode         = std::ios::app,                                    \\\r\n        keywords::rotation_size     = fileSize * 1024 * 1024,                           \\\r\n        keywords::max_files         = maxFile,                                          \\\r\n        keywords::auto_flush        = true,                                             \\\r\n        keywords::scan_method       = sinks::file::scan_matching,                       \\\r\n        keywords::filter            = trivial::severity >= trivial::warning,            \\\r\n        keywords::format            = formatter                                         \\\r\n        ) );                                                                            \\\r\n    core::get()->set_filter( trivial::severity >= trivial::level );                     \\\r\n}\r\n\r\n#define MY_LOG(level, ...)  myLog( level, __FILE__, __LINE__, __FUNCTION__, __VA_ARGS__ )\r\n\r\n#define TRACE_LOG(...)       MY_LOG(boost::log::trivial::trace,      __VA_ARGS__)\r\n#define DEBUG_LOG(...)       MY_LOG(boost::log::trivial::debug,      __VA_ARGS__)\r\n#define INFO_LOG(...)        MY_LOG(boost::log::trivial::info,       __VA_ARGS__)\r\n#define WARN_LOG(...)        MY_LOG(boost::log::trivial::warning,    __VA_ARGS__)\r\n#define ERROR_LOG(...)       MY_LOG(boost::log::trivial::error,      __VA_ARGS__)\r\n#define FATAL_LOG(...)       MY_LOG(boost::log::trivial::fatal,      __VA_ARGS__)\r\n\r\ntemplate<class Last1, class Last2>\r\nvoid myString( std::ostringstream& oss, Last1&& last1, Last2&& last2 ) {\r\n    oss << last1 << \":\" << last2;\r\n}\r\n\r\ntemplate<class First, class Second, class ...Rest>\r\nvoid myString( std::ostringstream& oss, First&& first, Second&& second, Rest&& ...rest ) {\r\n    oss << first << \":\" << second;\r\n    myString( oss, rest... );\r\n}\r\n\r\ntemplate<class First, class ...Rest>\r\nvoid myLog( boost::log::trivial::severity_level level, First&& first, Rest&& ...rest ) {\r\n    std::ostringstream oss;\r\n    myString( oss, first, rest... );\r\n    BOOST_LOG_SEV( gLogger, level ) << oss.str();\r\n}\r\n\r\n#define CLASS_PROPERTY( class_name, type_name, variable_name )                      \\\r\n    protected:                                                                      \\\r\n        type_name m_##variable_name;                                                \\\r\n    public:                                                                         \\\r\n         inline class_name& Set_##variable_name( type_name other){                   \\\r\n            m_##variable_name = other; return(*this); };                            \\\r\n        inline type_name& Get_##variable_name(void) { return( m_##variable_name ); }\r\n\r\n#define MY_SERIALIZATION( class_name, ... )                                         \\\r\npublic:                                                                             \\\r\n    void to_json( nlohmann::json& j ) {                                             \\\r\n        mySerialization( j,  __VA_ARGS__ );                                         \\\r\n    };                                                                              \\\r\n    friend inline ostream& operator << ( ostream& os, class_name& obj ) {           \\\r\n        nlohmann::json j;                                                           \\\r\n        obj.to_json( j );                                                           \\\r\n        os << j;                                                                    \\\r\n        return( os );                                                               \\\r\n    }\r\n\r\ntemplate< class First >\r\nvoid mySerialization( nlohmann::json& j, First first ) {\r\n    j.push_back( first );\r\n}\r\n\r\ntemplate< class First, class ...Rest >\r\nvoid mySerialization( nlohmann::json& j, First first, Rest ...rest ) {\r\n    j.push_back( first );\r\n    mySerialization( j, rest...  );\r\n}\r\n\r\ntemplate< class now >\r\nvoid to_json( nlohmann::json& j, now& obj ) {\r\n    obj.to_json( j );\r\n}\r\n\r\n#endif // MY_LOG_H\r\n```\r\n\r\n4.  Content for mylog.cpp\r\n\r\n```cpp\r\n#include <iostream>\r\n#include <string>\r\n#include <vector>\r\n#include \"mylog.h\"\r\n\r\nusing namespace std;\r\n\r\nboost::log::sources::severity_logger_mt< boost::log::trivial::severity_level > gLogger;\r\n\r\nclass CBase {\r\npublic:\r\n    CBase( int ii, long ll, float ff, double dd, string ss );\r\n\r\n    CLASS_PROPERTY( CBase, int, ii );\r\n    CLASS_PROPERTY( CBase, long, ll );\r\n    CLASS_PROPERTY( CBase, float, ff );\r\n    CLASS_PROPERTY( CBase, double, dd );\r\n    CLASS_PROPERTY( CBase, string, ss );\r\n    MY_SERIALIZATION( CBase, m_ii, m_ll, m_ff, m_dd, m_ss );\r\n};\r\n\r\nCBase::CBase( int ii=11, long ll=12, float ff=3.33, double dd=4.44, string ss=\"ss\")\r\n{\r\n    m_ii = ii;\r\n    m_ll = ll;\r\n    m_ff = ff;\r\n    m_dd = dd;\r\n    m_ss = ss;\r\n};\r\n\r\nclass CNew1 {\r\npublic:\r\n    CLASS_PROPERTY( CNew1, CBase, objBase );\r\n    MY_SERIALIZATION( CNew1, m_objBase );\r\n};\r\n\r\n/*\r\nclass CNew {\r\npublic:\r\n    CLASS_PROPERTY( CNew, vector<CBase>, vecBase );\r\n    MY_SERIALIZATION( CNew, m_vecBase );\r\n};\r\n*/\r\nint main(void)\r\n{\r\n    INIT_LOG( \"log\", \"IVS\", 40, 200, debug );\r\n\r\n    int ii=10;\r\n    int& jj = ii;\r\n    DEBUG_LOG( \"LOG for Debug\", 11, 22, ii, jj );\r\n    INFO_LOG( \"LOG for Info\", 33, 44, ii, jj );\r\n    WARN_LOG( \"LOG for Warn\", 55, 66, ii, jj );\r\n    ERROR_LOG( \"LOG for Error\", 77, 88, ii, jj );\r\n    FATAL_LOG( \"LOG for Fatal\", 99, 100, ii, jj );\r\n\r\n    CBase objBase( 11, 22, 33.0, 44.0, \"aa\" );\r\n\r\n    ERROR_LOG( ii, jj, objBase );\r\n\r\n    CNew1 objNew1;\r\n    objNew1.Set_objBase( objBase );\r\n    ERROR_LOG( ii, jj, objNew1 );\r\n    /*\r\n    CNew objNew; \r\n    objNew.Get_vecBase().push_back( objBase );\r\n    objNew.Get_vecBase().push_back( objBase );\r\n    ERROR_LOG( ii, jj, objNew );\r\n    */\r\n\r\n    /*\r\n    vector<CNew> vectorNew;\r\n    vectorNew.push_back( objNew );\r\n    vectorNew.push_back( objNew );\r\n    vectorNew.push_back( objNew );\r\n    cout << vectorNew << endl;\r\n    */\r\n}\r\n```\r\n\r\n6. Content for aa.sh which is defined to compile the source code.\r\n\r\n```\r\ng++ -std=c++17 -DBOOST_LOG_DYN_LINK -o mylog mylog.cpp -lboost_date_time -lboost_filesystem -lboost_thread -lboost_log_setup -lboost_log -lpthread -frtti -fexceptions\r\n```\r\n\r\n#### Can you provide a small but working code example?\r\n\r\nYes, the source code are list upper.\r\n\r\n#### What is the expected behavior?\r\n1. There will be a log directory, and the log data will be recorded in the files under the log directory.\r\n2. If comment the source code of CNew1, the program can be compiled and run OK.\r\n3. If uncomment the source code of CNew1, then there is a compile error.\r\n\r\n#### And what is the actual behavior instead?\r\n\r\nThere is a compile error and I just list the first error message upper.\r\n\r\n#### Which compiler and operating system are you using?\r\n\r\n<!-- Include as many relevant details about the environment you experienced the bug in. -->\r\n<!-- Make sure you use a supported compiler, see https://github.com/nlohmann/json#supported-compilers. -->\r\n\r\n- Compiler: _gcc 9.3.0__\r\n- Operating system: _Ubuntu 20.04 LTS__\r\n\r\n#### Which version of the library did you use?\r\n\r\n<!-- Please add an `x` to the respective line. -->\r\n\r\n- [ ] latest release version 3.9.1\r\n- [x] other release - please state the version: _3.7.3__\r\n- [ ] the `develop` branch\r\n\r\n#### If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n- [ ] yes\r\n- [ ] no - please copy/paste the error message below\r\nThe nlohmann::json is running OK when only CBase class is tested, so, I don't think nlohmann:json has compile error.\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/2794/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/2794/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/2793",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/2793/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/2793/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/2793/events",
    "html_url": "https://github.com/nlohmann/json/issues/2793",
    "id": 908154630,
    "node_id": "MDU6SXNzdWU5MDgxNTQ2MzA=",
    "number": 2793,
    "title": "An Ubjson Parsing Problem Can Easily Cause DDoS Attack.",
    "user": {
      "login": "spidermana",
      "id": 29861858,
      "node_id": "MDQ6VXNlcjI5ODYxODU4",
      "avatar_url": "https://avatars.githubusercontent.com/u/29861858?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spidermana",
      "html_url": "https://github.com/spidermana",
      "followers_url": "https://api.github.com/users/spidermana/followers",
      "following_url": "https://api.github.com/users/spidermana/following{/other_user}",
      "gists_url": "https://api.github.com/users/spidermana/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spidermana/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spidermana/subscriptions",
      "organizations_url": "https://api.github.com/users/spidermana/orgs",
      "repos_url": "https://api.github.com/users/spidermana/repos",
      "events_url": "https://api.github.com/users/spidermana/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spidermana/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 304694104,
        "node_id": "MDU6TGFiZWwzMDQ2OTQxMDQ=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20please%20discuss",
        "name": "state: please discuss",
        "color": "fbca04",
        "default": false,
        "description": "please discuss the issue or vote for your favorite option"
      },
      {
        "id": 571470316,
        "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats",
        "name": "aspect: binary formats",
        "color": "5319e7",
        "default": false,
        "description": "BSON, CBOR, MessagePack, UBJSON"
      },
      {
        "id": 730407699,
        "node_id": "MDU6TGFiZWw3MzA0MDc2OTk=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20stale",
        "name": "state: stale",
        "color": "999999",
        "default": false,
        "description": "the issue has not been updated in a while and will be closed automatically soon unless it is updated"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 14,
    "created_at": "2021-06-01T10:39:14Z",
    "updated_at": "2022-01-09T03:25:01Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Provide a concise summary of the issue in the title above. -->\r\n\r\n#### What is the issue you have?\r\n\r\nIn the process of parsing ubjson and converting it to json with the `from_ubjson` function, parsing an extremely long array of null characters (unlike other characters, null characters do not need to be supplied by the user in the input) can **lead to a “dead” loop or loop explosion problem**.\r\n\r\nIn my initial experiments, **taking just 10 characters as input can cause the function `from_ubjson` to execute for over 150s (even with -O3 enabled) and use over 35G of memory in my [server](https://www.amd.com/en/products/cpu/amd-epyc-7742).** Besides, the effect of such an attack is **cumulative**. That is, if this 10-character string is copied `n` times, it can generates `150n` seconds  of execution time, and `35n`G memory usage.\r\n\r\nAny host that uses the correlation function is vulnerable to a extremely serious DoS attack for the unreasonably high usage of CPU and memory resources \r\n\r\nThe stack traces and error messages are as follows:\r\n\r\n```\r\n\t……\r\n    #12 0x5957e7 in emplace_back<nullptr_t> /usr/bin/../lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/bits/vector.tcc:121:4\r\n    #13 0x5957e7 in nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>* nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(std::nullptr_t&&) /root/JSON_BUILD/single_include/nlohmann/json.hpp:2981:46\r\n    #14 0x5ae444 in null /root/JSON_BUILD/single_include/nlohmann/json.hpp:2849:9\r\n    #15 0x5ae444 in nlohmann::detail::binary_reader<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::get_ubjson_value(int) /root/JSON_BUILD/single_include/nlohmann/json.hpp:5091:29\r\n    #16 0x5b1eb9 in nlohmann::detail::binary_reader<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::get_ubjson_array() /root/JSON_BUILD/single_include/nlohmann/json.hpp:5195:29\r\n    #17 0x5ad8be in nlohmann::detail::binary_reader<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::get_ubjson_value(int) /root/JSON_BUILD/single_include/nlohmann/json.hpp:5158:24\r\n    #18 0x5b1faa in parse_ubjson_internal /root/JSON_BUILD/single_include/nlohmann/json.hpp:4889:16\r\n    #19 0x5b1faa in nlohmann::detail::binary_reader<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::get_ubjson_array() /root/JSON_BUILD/single_include/nlohmann/json.hpp:5222:21\r\n    #20 0x5ad8be in nlohmann::detail::binary_reader<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::get_ubjson_value(int) /root/JSON_BUILD/single_include/nlohmann/json.hpp:5158:24\r\n    #21 0x597a80 in parse_ubjson_internal /root/JSON_BUILD/single_include/nlohmann/json.hpp:4889:16\r\n    #22 0x597a80 in nlohmann::detail::binary_reader<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>, nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> > >::sax_parse(nlohmann::detail::input_format_t, nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer> >*, bool) /root/JSON_BUILD/single_include/nlohmann/json.hpp:3599:26\r\n    #23 0x5578ba in nlohmann::basic_json<std::map, std::vector, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>::from_ubjson(nlohmann::detail::input_adapter&&, bool, bool) /root/JSON_BUILD/single_include/nlohmann/json.hpp:19829:66\r\n\r\nInput: 0x22,0x37,0x2c,0x23,0x69,0x69,0x6f,0x24,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x6f,0x2c,0x23,0x2d,0x69,0x69,0x69,0x3a,0x69,0x5b,0x5b,0x24,0x5a,0x23,0x69,0x3a,0x69,0x5b,0x5b,0x24,0x5a,0x23,0x69,0x5b,0x5b,0x24,0x5a,0x23,0x6c,0x3a,0x69,0x5b,0x5b,0x24,0x5a,0x23,0x69,0x69,0x22,\r\n\\\"7,#iio$ooooooooooooo,#-iii:i[[$Z#i:i[[$Z#i[[$Z#l:i[[$Z#ii\\\"\r\nError: out-of-memory and TLE\r\n```\r\n\r\n#### Please describe the steps to reproduce the issue.\r\n\r\n<!-- Provide a link to a live example, or an unambiguous set of steps to -->\r\n<!-- reproduce this bug. Include code to reproduce, if relevant -->\r\n\r\n1. Download load test case from [here](https://drive.google.com/file/d/1JrwXvpVtR-_YeT5kJRHrvOVOU29FXrL0/view?usp=sharing).\r\n   2. Code to parse the ubjson from [here](https://drive.google.com/file/d/1KOi7us3s4zUANaZMaoL54L-nagYZ4CYI/view?usp=sharing).\r\n      3. Compile using command: `g++ -O3 -std=c++11 -g -I <JSON_SRC_PATH>/single_include ./test_ubjson.cpp`\r\n\r\nRun `a.out` and check the CPU and memory usage.\r\n\r\n#### Can you provide a small but working code example?\r\n\r\n<!-- Please understand that we cannot analyze and debug large code bases. -->\r\n\r\nPlease see above.\r\n\r\n#### What is the expected behavior?\r\n\r\n<!-- Tell us what should happen -->\r\n\r\nIt should parse null very quickly for very small inputs.\r\n\r\n#### And what is the actual behavior instead?\r\n\r\n<!-- Tell us what happens instead. -->\r\n\r\nThe `from_ubjson` function has extremely high memory and CPU usage when parsing pure null characters with large length fields in UBJSON format.\r\n\r\nIn UBJSON, for null characters, the user does not need to actually enter the character. \r\n\r\nHowever, according to ubjson's compression logic, the user only needs to provide a very large length field of the null character when parsing, which can make `from_ubjson` take a long time to finish.\r\n\r\nhttps://github.com/nlohmann/json/blob/e10a3fac8a255433146e3f06a703dc110fc3c3da/single_include/nlohmann/json.hpp#L10255-L10261\r\n\r\nIn practice, the loop for `get_ubjson_array` should be optimized (using `resize()` etc. to speed it up), or a special structure should be used to record the number and the position of null character, rather than just pushing it into memory, and only rewrite the answer to the standard output directly when converting to the json format.\r\n\r\n#### Which compiler and operating system are you using?\r\n\r\n<!-- Include as many relevant details about the environment you experienced the bug in. -->\r\n<!-- Make sure you use a supported compiler, see https://github.com/nlohmann/json#supported-compilers. -->\r\n\r\n- Compiler: g++\r\n- Operating system: ubuntu\r\n\r\n```\r\n$ uname -a\r\nLinux spider 5.4.114-1-pve #1 SMP PVE 5.4.114-1 (Sun, 09 May 2021 17:13:05 +0200) x86_64 x86_64 x86_64 GNU/Linux\r\n$ g++ --version                                                                   \r\ng++ (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\r\n```\r\n\r\n#### Which version of the library did you use?\r\n\r\n<!-- Please add an `x` to the respective line. -->\r\n\r\n- [x] latest release version 3.9.1\r\n- [ ] other release - please state the version: _not checked， maybe__\r\n- [x] the `develop` branch\r\n\r\n#### If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n- [x] yes\r\n- [ ] no - please copy/paste the error message below",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/2793/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/2793/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/2766",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/2766/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/2766/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/2766/events",
    "html_url": "https://github.com/nlohmann/json/issues/2766",
    "id": 881959594,
    "node_id": "MDU6SXNzdWU4ODE5NTk1OTQ=",
    "number": 2766,
    "title": "Support for integer keys in the SAX interface when parsing CBOR",
    "user": {
      "login": "deepbluev7",
      "id": 16312324,
      "node_id": "MDQ6VXNlcjE2MzEyMzI0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16312324?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/deepbluev7",
      "html_url": "https://github.com/deepbluev7",
      "followers_url": "https://api.github.com/users/deepbluev7/followers",
      "following_url": "https://api.github.com/users/deepbluev7/following{/other_user}",
      "gists_url": "https://api.github.com/users/deepbluev7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/deepbluev7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/deepbluev7/subscriptions",
      "organizations_url": "https://api.github.com/users/deepbluev7/orgs",
      "repos_url": "https://api.github.com/users/deepbluev7/repos",
      "events_url": "https://api.github.com/users/deepbluev7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/deepbluev7/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 571470316,
        "node_id": "MDU6TGFiZWw1NzE0NzAzMTY=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/aspect:%20binary%20formats",
        "name": "aspect: binary formats",
        "color": "5319e7",
        "default": false,
        "description": "BSON, CBOR, MessagePack, UBJSON"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-05-09T07:50:34Z",
    "updated_at": "2022-01-09T03:26:37Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "<!-- Provide a concise summary of the issue in the title above. -->\r\nCurrently parsing CBOR with this library can only handle string keys. At the project I am working on, we want to use integer keys to reduce the size of our responses by using them as an alias for the long string keys. As such it would be very helpful to have some way to transform those to integer keys. While this would probably not fit into the STL-like interface, there is place to add it to the SAX interface.\r\n\r\nMy proposal would be to add overloads for `bool key(string_t& val);`, which take an integer or similar types. The default version of those functions should still emit a parse error, but a library user would be able to override them and decide how to handle them differently. That way I can transform the CBOR into something, that can be handled via the STL interface (or one could even use that to build some native structs).\r\n\r\nOne issue I see with that, is how to handle the default implementation, which should call `bool parse_error(std::size_t position, const std::string& last_token, const detail::exception& ex);` imo. This has more parameters, which may have gotten lost already? This may be solveable by accessing some internal state, but I am not familiar enough with the library to be able to tell, if this is actually doable.\r\n\r\n### Alternatives\r\n\r\nOne could probably also implement the parsing in the `parse_error` callback, but that would be difficult and error prone. Maybe there is also already a way to do this already, but I don't know how.\r\n\r\nPS: How do I tag this as enhancement?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/2766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/2766/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/2649",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/2649/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/2649/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/2649/events",
    "html_url": "https://github.com/nlohmann/json/issues/2649",
    "id": 811066906,
    "node_id": "MDU6SXNzdWU4MTEwNjY5MDY=",
    "number": 2649,
    "title": "String type change breaks C++ type matching",
    "user": {
      "login": "sirzooro",
      "id": 1969912,
      "node_id": "MDQ6VXNlcjE5Njk5MTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1969912?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sirzooro",
      "html_url": "https://github.com/sirzooro",
      "followers_url": "https://api.github.com/users/sirzooro/followers",
      "following_url": "https://api.github.com/users/sirzooro/following{/other_user}",
      "gists_url": "https://api.github.com/users/sirzooro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sirzooro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sirzooro/subscriptions",
      "organizations_url": "https://api.github.com/users/sirzooro/orgs",
      "repos_url": "https://api.github.com/users/sirzooro/repos",
      "events_url": "https://api.github.com/users/sirzooro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sirzooro/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 17,
    "created_at": "2021-02-18T12:44:56Z",
    "updated_at": "2022-06-04T10:31:16Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Usually when one of template parameters is changed, reference to new type cannot be implicitly converted to reference to old type. However for some reason this is not true for nlohmann::json. I tried to change std::string to my custom string class, and it turned out that references to both types are compatible for compiler. Here is example code which demonstrates this problem. It uses std::wstring instead of std::string:\r\n\r\n```cpp\r\n#include <json.hpp>\r\n\r\ntemplate <\r\n    template <typename U, typename V, typename... Args> class ObjectType = std::map,\r\n    template <typename U, typename... Args> class ArrayType              = std::vector,\r\n    class StringType = std::wstring, class BooleanType = bool,\r\n    class NumberIntegerType = std::int64_t, class NumberUnsignedType = std::uint64_t,\r\n    class NumberFloatType = double, template <typename U> class AllocatorType = std::allocator,\r\n    template <typename T, typename SFINAE = void> class JSONSerializer = nlohmann::adl_serializer>\r\nusing MyBasicJson = nlohmann::basic_json<\r\n    ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType,\r\n    NumberFloatType, AllocatorType, JSONSerializer>;\r\n\r\nusing MyJson = MyBasicJson<>;\r\n\r\nvoid load(const nlohmann::json& json);\r\n//void load(const MyJson& json);\r\n\r\nvoid test(MyJson* json)\r\n{\r\n    load(*json);\r\n}\r\n```\r\nDuring compilation I should get error that parameter passed to load() has incorrect type. However this code compiles cleanly. I tried to use gcc 10.2, clang 10.0, both compiles this code without any complain. I use nlohmann::json 3.9.1. I compiled it on CentOS and Ubuntu using following command:\r\n\r\n`g++ -c -o dupa.o test.cpp -O3 -Wall -Wextra -Werror -std=c++11 -I.`\r\n\r\nI played a bit with this code trying to create minimum example. I found that when removed include and copied forward declarations from json.hpp to my file, g++ reported error as expected. So it looks that something is wrong in other part of json.hpp.\r\n\r\nInitially I thought that this may be some gcc error, but clang also does not complain, so this is unlikely.\r\n\r\n#### Which compiler and operating system are you using?\r\n\r\ngcc 10.2 on CentOS7 (installed from RedHat SCL packages), clang 10.0 on Ubuntu Ubuntu 20.04.2 LTS\r\n\r\n#### Which version of the library did you use?\r\n\r\n<!-- Please add an `x` to the respective line. -->\r\n\r\n- [x] latest release version 3.9.1\r\n- [ ] other release - please state the version: ___\r\n- [ ] the `develop` branch\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/2649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/2649/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/nlohmann/json/issues/2226",
    "repository_url": "https://api.github.com/repos/nlohmann/json",
    "labels_url": "https://api.github.com/repos/nlohmann/json/issues/2226/labels{/name}",
    "comments_url": "https://api.github.com/repos/nlohmann/json/issues/2226/comments",
    "events_url": "https://api.github.com/repos/nlohmann/json/issues/2226/events",
    "html_url": "https://github.com/nlohmann/json/issues/2226",
    "id": 646668747,
    "node_id": "MDU6SXNzdWU2NDY2Njg3NDc=",
    "number": 2226,
    "title": "std::tuple dangling reference - implicit conversion",
    "user": {
      "login": "schaumb",
      "id": 6457941,
      "node_id": "MDQ6VXNlcjY0NTc5NDE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6457941?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schaumb",
      "html_url": "https://github.com/schaumb",
      "followers_url": "https://api.github.com/users/schaumb/followers",
      "following_url": "https://api.github.com/users/schaumb/following{/other_user}",
      "gists_url": "https://api.github.com/users/schaumb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schaumb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schaumb/subscriptions",
      "organizations_url": "https://api.github.com/users/schaumb/orgs",
      "repos_url": "https://api.github.com/users/schaumb/repos",
      "events_url": "https://api.github.com/users/schaumb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schaumb/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 46374231,
        "node_id": "MDU6TGFiZWw0NjM3NDIzMQ==",
        "url": "https://api.github.com/repos/nlohmann/json/labels/kind:%20bug",
        "name": "kind: bug",
        "color": "fc2929",
        "default": false,
        "description": null
      },
      {
        "id": 344572510,
        "node_id": "MDU6TGFiZWwzNDQ1NzI1MTA=",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20help%20needed",
        "name": "state: help needed",
        "color": "fbca04",
        "default": false,
        "description": "the issue needs help to proceed"
      },
      {
        "id": 1104192588,
        "node_id": "MDU6TGFiZWwxMTA0MTkyNTg4",
        "url": "https://api.github.com/repos/nlohmann/json/labels/state:%20waiting%20for%20PR",
        "name": "state: waiting for PR",
        "color": "d665f2",
        "default": false,
        "description": ""
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 39,
    "created_at": "2020-06-27T12:04:41Z",
    "updated_at": "2024-03-27T17:06:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "#### What is the issue you have?\r\n\r\nI created a nlohmann::json, which I passed to a std::apply. When I wanted to get the json value at a parameter specified function (const nlohmann::json&), it referenced some undefined memory (g++). \r\n\r\nI tried to simplify the code, when I came across the following:\r\n`std::tuple<const nlohmann::json&>::tuple(std::tuple<nlohmann::json&>&&)` constructor creates a temporary object and a dangling reference.\r\nThis happens because `nlohmann::json` implicit conversion exists from `std::tuple<nlohmann::json&>`, and the tuple [constructor](https://en.cppreference.com/w/cpp/utility/tuple/tuple) calls the variant (3) instead of (5). \r\n\r\n#### Can you provide a small but working code example?\r\n\r\n```\r\n#include <iostream>\r\n#include <tuple>\r\n#include <cassert>\r\n\r\n#include \"json.hpp\"\r\n\r\nint main() {\r\n    nlohmann::json j = true;\r\n    std::tuple<const nlohmann::json&> tup(std::forward_as_tuple(j)); \r\n        // std::forward_as_tuple(std::as_const(j)) works well.\r\n    assert(&j == &std::get<0>(tup));\r\n}\r\n```\r\n\r\n[try g++](https://wandbox.org/permlink/RMi9jkaqZdfefePo)\r\n\r\nWith clang it doesn't compile:\r\n`tuple:232:24: error: reference member '__value_' binds to a temporary object whose lifetime would be shorter than the lifetime of the constructed object`\r\n\r\n#### What is the expected behavior?\r\n\r\ng++: no assertion happens on the example code.\r\nclang: compiles.\r\n\r\n#### And what is the actual behavior instead?\r\n\r\ng++: tuple creates a temporary object and creates a dangling reference.\r\nclang: not compiles.\r\n\r\n#### Which compiler and operating system are you using?\r\n\r\n- Compiler: g++ / clang (in wandbox)\r\n- Operating system: ubuntu based (18.04) + wandbox\r\n\r\n#### Which version of the library did you use?\r\n\r\n- [ ] latest release version 3.7.3\r\n- [ ] other release - please state the version: ___\r\n- [X] the `develop` branch\r\n\r\n(but all version is affected)\r\n\r\n#### If you experience a compilation error: can you [compile and run the unit tests](https://github.com/nlohmann/json#execute-unit-tests)?\r\n\r\n- [X] yes\r\n- [ ] no - please copy/paste the error message below\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/nlohmann/json/issues/2226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/nlohmann/json/issues/2226/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]